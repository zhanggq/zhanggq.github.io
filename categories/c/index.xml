<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>C on Zhanggq</title>
    <link>https://zhanggq.github.io/categories/c/</link>
    <description>Recent content in C on Zhanggq</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Mon, 14 Mar 2022 09:03:09 +0800</lastBuildDate>
    
	<atom:link href="https://zhanggq.github.io/categories/c/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Hash冲突链</title>
      <link>https://zhanggq.github.io/post/zgq-c-hash/</link>
      <pubDate>Mon, 14 Mar 2022 09:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-c-hash/</guid>
      <description>摘要 写了一个Hash冲突链。 一、Hash冲突链解释 UPF单节点需要支持大量的用户，每个用户又会建立多条Pdu会话。所以需要一张Hash表用于</description>
    </item>
    
    <item>
      <title>扫描工具</title>
      <link>https://zhanggq.github.io/post/zgq-c-check/</link>
      <pubDate>Thu, 10 Mar 2022 09:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-c-check/</guid>
      <description>摘要 分享一下我在项目中用到的代码扫描工具。静态扫描工具Fortify和动态扫描工具Valgrind。 一、Valgrind 说明 Valgrind</description>
    </item>
    
    <item>
      <title>性能调优工具</title>
      <link>https://zhanggq.github.io/post/zgq-c-performance/</link>
      <pubDate>Wed, 23 Feb 2022 09:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-c-performance/</guid>
      <description>摘要 最近搞UPF性能调优时，简单使用了一下性能调优工具，这里描述一下使用过程。gprof，vtune(待补充)。 一、gprof 编译 gprof</description>
    </item>
    
  </channel>
</rss>
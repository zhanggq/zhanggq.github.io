<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Zhanggq</title>
    <link>https://zhanggq.github.io/post/</link>
    <description>Recent content in Posts on Zhanggq</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Thu, 24 Mar 2022 09:03:09 +0800</lastBuildDate>
    
	<atom:link href="https://zhanggq.github.io/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>UPF防火墙</title>
      <link>https://zhanggq.github.io/post/zgq-upf-firewall/</link>
      <pubDate>Thu, 24 Mar 2022 09:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-upf-firewall/</guid>
      <description>摘要 在海外商用的环境被黑客攻破了，简单来说就是我们对外暴露的端口没有做防火墙，导致被人嗅探到了IP，且被破解了密码，最终被人ssh上去了。这</description>
    </item>
    
    <item>
      <title>Hash冲突链</title>
      <link>https://zhanggq.github.io/post/zgq-c-hash/</link>
      <pubDate>Mon, 14 Mar 2022 09:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-c-hash/</guid>
      <description>摘要 写了一个Hash冲突链。 一、Hash冲突链解释 UPF单节点需要支持大量的用户，每个用户又会建立多条Pdu会话。所以需要一张Hash表用于</description>
    </item>
    
    <item>
      <title>扫描工具</title>
      <link>https://zhanggq.github.io/post/zgq-c-check/</link>
      <pubDate>Thu, 10 Mar 2022 09:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-c-check/</guid>
      <description>摘要 分享一下我在项目中用到的代码扫描工具。静态扫描工具Fortify和动态扫描工具Valgrind。 一、Valgrind 说明 Valgrind</description>
    </item>
    
    <item>
      <title>UPF的VRF功能</title>
      <link>https://zhanggq.github.io/post/zgq-upf-vrf/</link>
      <pubDate>Fri, 25 Feb 2022 09:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-upf-vrf/</guid>
      <description>摘要 我们的UPF网元在和客户对接使用的过程中，发现缺少了VRF功能，这里简单描述一下VRF功能的设计。 一、需求 Case1 按照客户目前的组网方案，基站</description>
    </item>
    
    <item>
      <title>性能调优工具</title>
      <link>https://zhanggq.github.io/post/zgq-c-performance/</link>
      <pubDate>Wed, 23 Feb 2022 09:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-c-performance/</guid>
      <description>摘要 最近搞UPF性能调优时，简单使用了一下性能调优工具，这里描述一下使用过程。gprof，vtune(待补充)。 一、gprof 编译 gprof</description>
    </item>
    
    <item>
      <title>DPDK的Mbuf</title>
      <link>https://zhanggq.github.io/post/zgq-dpdk-mbuf-pool/</link>
      <pubDate>Tue, 18 Jan 2022 09:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-dpdk-mbuf-pool/</guid>
      <description>摘要 上一篇做DPDK性能调优的时候，对于DPDK使用的Mbuf进行了拆分，但随之而来发现Mbuf的回收似乎出现了问题，一天灌包后基本上转发面</description>
    </item>
    
    <item>
      <title>DPDK性能调优</title>
      <link>https://zhanggq.github.io/post/zgq-dpdk-performance/</link>
      <pubDate>Mon, 17 Jan 2022 09:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-dpdk-performance/</guid>
      <description>摘要 最近在用上古16.07版本的DPDK做UPF，最初的性能是2核67wpps，调优后至少能到2核180wpps。这里记录一下整个操作过程。</description>
    </item>
    
    <item>
      <title>DPDK的Checksum offload</title>
      <link>https://zhanggq.github.io/post/zgq-dpdk-checksum/</link>
      <pubDate>Sun, 16 Jan 2022 09:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-dpdk-checksum/</guid>
      <description>摘要 做DPDK性能调优的时候，涉及到了使用DPDK+硬件的Checksum offload功能，这里简单描述一下。 一、背景 对于IPv6的报文来</description>
    </item>
    
    <item>
      <title>UPF对接FRR之BGP</title>
      <link>https://zhanggq.github.io/post/zgq-upf-bgp/</link>
      <pubDate>Tue, 04 Jan 2022 13:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-upf-bgp/</guid>
      <description>前言 动态路由是UPF冗余方案中必不可少的一部分，这里简单介绍一下UPF的冗余组网方案及UPF对接BGP路由。 一、UPF冗余网络模型 在商用的U</description>
    </item>
    
    <item>
      <title>UPF对接FRR之OSPF</title>
      <link>https://zhanggq.github.io/post/zgq-upf-ospf/</link>
      <pubDate>Tue, 04 Jan 2022 13:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-upf-ospf/</guid>
      <description>前言 接续上一篇&amp;rdquo;UPF对接FRR之BGP&amp;rdquo;，这里简单列一下OSPF的配置。 一、主用UPF的OSPF配置参考 主用UPF</description>
    </item>
    
    <item>
      <title>VPP运行在ARM板上</title>
      <link>https://zhanggq.github.io/post/zgq-dpdk-vpp-arm/</link>
      <pubDate>Sat, 25 Dec 2021 09:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-dpdk-vpp-arm/</guid>
      <description>摘要 最近有个项目需要把VPP运行在ARM板子上，本篇文章主要记录一些操作过程： 环境信息； VPP交叉编译； UPF依赖交叉编译； 运行； 一、环境信</description>
    </item>
    
    <item>
      <title>论大型通信软件平台 队列篇</title>
      <link>https://zhanggq.github.io/post/zgq-plat-5-msg-queue/</link>
      <pubDate>Sun, 21 Nov 2021 09:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-plat-5-msg-queue/</guid>
      <description>摘要 继续归纳平台，本篇主要讲讲平台用于线程间通信的消息队列。 一、线程间通信概述 通常进程间通信的概念被人熟知，有很多著名的消息队列如Rabbi</description>
    </item>
    
    <item>
      <title>论大型通信软件平台 内存篇</title>
      <link>https://zhanggq.github.io/post/zgq-plat-4-mempool/</link>
      <pubDate>Thu, 18 Nov 2021 09:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-plat-4-mempool/</guid>
      <description>摘要 继续归纳平台，本篇主要讲讲平台的内存封装。 一、内存封装概述 对于一个C语言写的系统，由于缺乏内存管理机制，在代码中直接用mem_alloc</description>
    </item>
    
    <item>
      <title>论大型通信软件平台 接口篇</title>
      <link>https://zhanggq.github.io/post/zgq-plat-3-socket/</link>
      <pubDate>Mon, 15 Nov 2021 09:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-plat-3-socket/</guid>
      <description>摘要 继续归纳平台，本篇主要讲讲平台的Socket封装。 一、Socket封装概述 Socket封装简单来说就是对上层业务提供发送消息的接口。当业</description>
    </item>
    
    <item>
      <title>论大型通信软件平台 注册篇</title>
      <link>https://zhanggq.github.io/post/zgq-plat-2-register/</link>
      <pubDate>Wed, 03 Nov 2021 09:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-plat-2-register/</guid>
      <description>摘要 继续归纳平台，本篇主要讲讲平台的注册机制。 一、注册机制概述 说到服务注册、服务发现这些微服务方面的概念，大家肯定都比较耳熟，实际上这些概念</description>
    </item>
    
    <item>
      <title>论大型通信软件平台 概述篇</title>
      <link>https://zhanggq.github.io/post/zgq-plat-1-overview/</link>
      <pubDate>Mon, 01 Nov 2021 09:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-plat-1-overview/</guid>
      <description>摘要 最近接触了FreeRTOS，发现这实际上并不是什么操作系统，而是传统意义上的平台被移植到了嵌入式开发中。所以在学习之前，先结合这些年接触</description>
    </item>
    
    <item>
      <title>关于Go的空指针检查</title>
      <link>https://zhanggq.github.io/post/zgq-go-nil-pointer/</link>
      <pubDate>Fri, 02 Apr 2021 09:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-go-nil-pointer/</guid>
      <description>摘要 最近开发过程中遇到挺多空指针引发的Coredump，想在CI过程中集成一下Go的代码检查工具，但实际发现这些工具的效果都不行…… 一、测试</description>
    </item>
    
    <item>
      <title>VPP如何使用Mellanox网卡</title>
      <link>https://zhanggq.github.io/post/zgq-dpdk-vpp-mellanox/</link>
      <pubDate>Wed, 17 Mar 2021 09:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-dpdk-vpp-mellanox/</guid>
      <description>摘要 最近在用VPP做用户面报文的转发，发现Mellanox网卡挺难用，这里记录一下整个操作过程。整个过程大致有以下几步： 更新Mellanox</description>
    </item>
    
    <item>
      <title>关于图床的选择</title>
      <link>https://zhanggq.github.io/post/zgq-natter-smms/</link>
      <pubDate>Fri, 19 Feb 2021 09:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-natter-smms/</guid>
      <description>摘要 好久没有更新帖子了。一个原因是懒，另一个原因是之前用的MarkdownPad2的图床，国内访问总是打不开图片，影响用户体验。本次试试换一</description>
    </item>
    
    <item>
      <title>Vue Debug调试</title>
      <link>https://zhanggq.github.io/post/zgq-paas-vue-debug/</link>
      <pubDate>Tue, 21 May 2019 10:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-paas-vue-debug/</guid>
      <description>摘要 差不多半年没碰Vue，回头再来看发现又差不多都忘了。Git hub上下载了最新的vue-element-admin，从头学起吧。学习的第一</description>
    </item>
    
  </channel>
</rss>
<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zhanggq</title>
    <link>https://zhanggq.github.io/</link>
    <description>Recent content on Zhanggq</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Sun, 20 Aug 2017 21:38:52 +0800</lastBuildDate>
    
        <atom:link href="https://zhanggq.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>About</title>
      <link>https://zhanggq.github.io/about/</link>
      <pubDate>Sun, 20 Aug 2017 21:38:52 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/about/</guid>
      
        <description>&lt;p&gt;Hugo is a static site engine written in Go.&lt;/p&gt;

&lt;p&gt;It makes use of a variety of open source projects including:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cobra&#34;&gt;Cobra&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/viper&#34;&gt;Viper&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/jWalterWeatherman&#34;&gt;J Walter Weatherman&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/spf13/cast&#34;&gt;Cast&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Learn more and contribute on &lt;a href=&#34;https://github.com/gohugoio&#34;&gt;GitHub&lt;/a&gt;.&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>浅谈Openstack、OpenContrail、OpenFlow、NFV</title>
      <link>https://zhanggq.github.io/post/zgq-sdn-openstack-opencontrail-openflow-nfv/</link>
      <pubDate>Tue, 03 Apr 2018 19:08:48 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-sdn-openstack-opencontrail-openflow-nfv/</guid>
      
        <description>&lt;p&gt;浅谈Openstack、OpenContrail、OpenFlow、NFV。属于我个人学习过程中的笔记杂谈。&lt;/p&gt;

&lt;p&gt;首先先从2个大的概念说起吧：SDN和NFV。它们都是网络虚拟化技术，即用软件来实现传统硬件的网络功能。其中名气最大的就是SDN（软件定义网络）和NFV（网络功能虚拟化）。起初、两者的初衷和架构并不相同，SDN起源于园区网，发展于数据中心，目的是将控制平面和转发平面分离，通过集中化的控制平面能够灵活定义网络行为；而NFV则由运营商联盟提出，为了加速部署新的网络服务，运营商倾向于放弃笨重昂贵的专用网络设备，转而使用标准的IT虚拟化技术来拆分网络功能模块，如DNS、NAT、Firewall等。于是一些运营商联合成立了欧洲通信标准协会ETSI（European Telecommunications Standards Institute），他的一个工作组（ETSI ISG NFV）负责开发制定电信网络的虚拟化架构，如NFV MANO。但随着互联网的发展，两者逐渐融合。有人认为，两者的侧重点不一样，NFV更偏向于网络功能虚拟化，而SDN是对网络本身的控制，两者可以结合使用，作为一种电信级的解决方案（2014年江苏电信的解决方案 &lt;a href=&#34;https://www.sdnlab.com/15751.html&#34;&gt;https://www.sdnlab.com/15751.html&lt;/a&gt; ）。&lt;/p&gt;

&lt;p&gt;接着说SDN的解决方案吧，知道几种OpenContrail，OpenFlow，OpenDayLight，OpenvSwitch。 说说我对他们的理解吧：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OpenFlow：准确的它是一种协议，并不完全是一种解决方案，其主要目的是觉着现在的协议太多太复杂了，所以推翻了以前的所有协议，重新定义了一种。但正好SDN是控制面和转发面分离，OpenFlow也是，所以它也被称作了一种SDN解决方案。但OpenFlow太学院派了，随着时间的发展，已经逐渐被淘汰（高潮是OpenFlow v1.3，v1.5之后好像就没版本了）。&lt;/li&gt;
&lt;li&gt;OpenContrail：与OpenFlow不同的是，OpenContrail是商业派的解决方案，由Juniper在2012年底收购Contrail之后将其SDN平台开源出来，这就是OpenContrail（现已经改名为Tungsten Fabric）。正如前面SDN定义的那样，OpenContrail也分成了控制面和转发面两部分。控制面主要由配置模块、控制模块、分析模块组成，转发面主要是vRouter&lt;/li&gt;
&lt;li&gt;OpenvSwitch：属于开源的SDN解决方案，被Openstack社区用来和Neutron项目配合使用。目前算是比较主流的SDN解决方案之一。小规模的云都喜欢用它，一般的协议都支持，也能支持DPDK。稳定性方面依赖Linux内核版本。以前在Centos 7的3.10.0内核下，是不是会出现Crash。后来升级到4.6.0之后，没有再出现过Crash的现象。&lt;/li&gt;
&lt;li&gt;OpenDayLight：它是由CISCO主导的一个基于Linux的SDN控制器，并不是一个完整的解决方案，一般会配合OpenvSwitch来做解决方案。它比Neutron要更专业一些，但要比OpenContrail轻一些，介于两者之间吧。前期被OpenContrail打压得不行，现在逐渐成熟起来。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前面说到过SDN+NFV的解决方案，另一种解决方案是Openstack/VMware + OpenContrail。这里讲讲Openstack + OpenContrail。一般大多数OpenStack部署使用OpenvSwitch和OpenStack Neutron进行对接，但是想要实现大规模生产部署需要更多的商业化的产品，这时候就可以选择OpenContrail与Openstack进行对接。OpenContrail提供neutron_plugin_contrail作为插件和Neuron对接，之后openstack就可以通过neutron下发配置给contrail的config模块。刚刚说过，一般情况下Openstack Neutron也就够了，vxlan、FW、LB什么的都支持，那么为啥要用OpenContrail？ 我个人认为，前者是社区的方案，OpenContrail是Juniper的，所以后者给客户的信心会大一点；另一方面OpenContrail确实要强一些，比如支持的协议多一点点（MPLS over GRE/UDP），比如OpenContrail的服务链功能。当然，最重要的还是稳定性和性能，可惜我没做过这方面的对比测试，网上也没找到资料，只知道2017年中国电信省级云资源池试商用SDN工程用的就是这个方案。&lt;/p&gt;

&lt;p&gt;这篇Blog就先写到这，等继续学习了OpenContrail之后再更新吧。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>关于Go----Golang的优秀组件整理</title>
      <link>https://zhanggq.github.io/post/zgq-web-golang-good-program/</link>
      <pubDate>Tue, 03 Apr 2018 18:53:48 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-web-golang-good-program/</guid>
      
        <description>&lt;p&gt;这里仅介绍我见过的，觉得不错的Golang优秀组件。算是个人笔记吧，只有介绍，没有使用说明。&lt;/p&gt;

&lt;p&gt;1.框架
Go的框架有很多很多，但至今还没有一款能和Spring媲美的神级框架出现。所以大神都是自己直接写，不用框架。这里介绍我用过的2个框架gin和beego，前者路由速度快，后者功能全。但还是我前面讲的那句话，两个都不能算是神级框架，所以仁者见仁，智者见智吧。
github.com/gin-gonic/gin
github.com/astaxie/beego&lt;/p&gt;

&lt;p&gt;2.WEB服务
caddy类似于Apache，Nginx，是一个高性能的HTTP/2和反向代理服务器，天然支持https。挺强。
github.com/mholt/caddy&lt;/p&gt;

&lt;p&gt;3.数据库操作
gorm或者beego的orm，但和前面的框架类似，用也可以，不用也可以。
github.com/jinzhu/gorm&lt;/p&gt;

&lt;p&gt;4.包管理工具
类似于Maven。目前我只用过govendor，其它的还有godep、glide。但有个不好的地方就是被墙的还是被墙，得翻墙出去找。
github.com/kardianos/govendor&lt;/p&gt;

&lt;p&gt;5.热重启
通过监听syscall信号量实现优雅重启。
github.com/fvbock/endless&lt;/p&gt;

&lt;p&gt;6.log记录
github.com/Sirupsen/logrus&lt;/p&gt;

&lt;p&gt;7.定时任务
github.com/robfig/cron&lt;/p&gt;

&lt;p&gt;8.帮助文档生成工具
自己的应用编好之后，自动给你生成帮助文档，执行xxxx -h或者xxxx help显示帮助文档
github.com/urfave/cli(以前叫github.com/codegangsta/cli)&lt;/p&gt;

&lt;p&gt;9.配置文件读取
github.com/spf13/viper&lt;/p&gt;

&lt;p&gt;10.内存管理
支持Redis内存存储
github.com/coocood/freecache&lt;/p&gt;

&lt;p&gt;11.redis依赖
github.com/garyburd/redigo&lt;/p&gt;

&lt;p&gt;12.静态网站生成器
我的Blog就是靠它生成的，挺好用
github.com/gohugoio/hugo&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Caddy初探</title>
      <link>https://zhanggq.github.io/post/zgq-web-caddy-test/</link>
      <pubDate>Tue, 03 Apr 2018 18:43:48 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-web-caddy-test/</guid>
      
        <description>&lt;p&gt;Caddy
类似于Apache，Nginx，是一个高性能的HTTP和反向代理服务器&lt;/p&gt;

&lt;p&gt;代码
&lt;a href=&#34;https://github.com/mholt/caddy&#34;&gt;https://github.com/mholt/caddy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用，先升级Go至1.9以上(&lt;a href=&#34;https://my.oschina.net/u/2601623/blog/1785798)，然后&#34;&gt;https://my.oschina.net/u/2601623/blog/1785798)，然后&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/mholt/caddy/caddy
go get github.com/caddyserver/builds
cd $GOPATH/src/github.com/mholt/caddy/caddy
go run build.go
./caddy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;初步尝试，在caddy同目录下创建Caddyfile文件，并写入配置，然后运行caddy&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cat Caddyfile
0.0.0.0:2015

push
browse
websocket /echo cat
ext    .html
log    /var/log/access.log
proxy  /api 127.0.0.1:7005
header /api Access-Control-Allow-Origin *
# 
# ./caddy
Activating privacy features... done.
http://0.0.0.0:2015
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果如图，运行了一个简单的文件服务器
&lt;img src=&#34;https://i.imgur.com/pZ8mOWy.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;开启https，需要加一行配置tls /root/ca.pem /root/ca-key.pem，如图：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cat Caddyfile
0.0.0.0:2015 {
    gzip
    tls /etc/ssl/caddy/ca.pem /etc/ssl/caddy/ca-key.pem
    #tls xxxx@qq.com {
    #    protocols tls1.0 tls1.2
    #}
    push
    browse
    websocket /echo cat
    ext    .html
    log    /var/log/access.log
    proxy  /api 127.0.0.1:7005
    header /api Access-Control-Allow-Origin *
}
# ./caddy
Activating privacy features... done.
https://0.0.0.0:2015
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/cW0B0lb.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;看到有很多帖子说Caddy可以自动申请证书，但我尝试了多次都没有成功。墙外的虚机也不行……&lt;/p&gt;

&lt;p&gt;反向代理，简单配置如下，给原来的web服务直接加了https，挺好。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0.0.0.0:2015 {
    gzip
    tls /root/ca.pem /root/ca-key.pem
    proxy / http://localhost:8080 {
        header_upstream Host {host}
        header_upstream X-Real-IP {remote}
        header_upstream X-Forwarded-For {remote}
        header_upstream X-Forwarded-Proto {scheme}
    }  
} 
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>我对网站开发的总结与思考</title>
      <link>https://zhanggq.github.io/post/zgq-ui-think/</link>
      <pubDate>Tue, 03 Apr 2018 16:43:48 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-ui-think/</guid>
      
        <description>&lt;p&gt;&lt;strong&gt;一、前言&lt;/strong&gt;
  2006年开始入坑至今，期间还进进出出几次，没怎么做过大项目，多是自学，自学和自学。有些时候回头想想，也算接触过不少东东，但没有形成一个完整的体系，所以在这里写点东西，写到哪算哪吧，是总结，也是思考。
  2006年做的是CSS，powerbuilder + weblogic + Oracle。后来也用powerbuilder + access写了些单机小程序玩。不知道PB算不算上古时代的前端技术(≖ ‿ ≖)✧。大概到了08年，第一次接触了BSS，惊为天人，感觉用WEB比PB那玩意高大上了好多，从此开始一发不可收拾，入坑自学研究至今（虽然WEB开发从来不是我的工作内容）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二、总结&lt;/strong&gt;
  最初学习WEB开发是从JAVA开始，《Think In Java》，然后开始Spring、Struts、Hibernate三大框架，以及Dreamweaver这种网页编辑器。但因为没有服务器，也不是本职工作，只能看看别人写的源码，自己没法上手，所以始终不得要领。
  直到15年开始做云计算，16年开始用Go，突然发现以前百思不得其解的东西，如今变得非常简单。最初是用Go开始写WEB服务端，顺便在Go里面加了一些HTML代码，然后发现自己原来已经写出了一个简单的网站。接着在Git上找了套Go的框架Beego（因为有中文）和前端框架Layui，很轻松的就搭出了一个管理平台。恰逢阿里云打折，又买了台云主机，在自己的虚机上部署了应用，就算是发布了。
    (￣▽￣)/
&lt;img src=&#34;https://i.imgur.com/6DEkrP8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;第一步踏出之后，发现后面的路就变得好走了，一方面继续学习，一方面自己思考。第二个WEB是自己写股票分析WEB。后端还是Beego+Mariadb，前端改成了Amaze UI（因为Layui不支持Echarts，或者说是我没搞起来，另一方面因为Amaze UI的实例多）。由于时间关系（毕竟只是空余时间自己学着玩的），很多功能还没搞起来，只做了自动同步数据（网易的API接口，爬出来写数据库），界面展示，股票查询这些。过程中知道了MVC(Model View Controller，是模型(model)－视图(view)－控制器(controller))，知道了网页动静分离，知道了大名鼎鼎的Ajax。因为都是自己在捣鼓，所以后端的开发工作也占用了比较多的时间，比如用Docker容器做了WEB服务和数据库的分离，Mariadb集群（实际上这P大点的东西搞个本地映射就完了，数据丢了从网易全部爬一遍也要不了多少时间），顺便把Docker镜像都传到自己的阿里云仓库了（不收费，真大气）。
&lt;img src=&#34;https://i.imgur.com/oerBiK9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;后面的路该怎么走？继续边走边琢磨吧，还有好多东西没玩过，比如说Vue最近很火；比如说Bootstrap虽然不如小鲜肉火，但也曾是业界标杆；比如说nodejs可以完美解决前后端分离；比如说MVC已经过气了，现在火的是MVP、MVVM。还可以再研究一下caddy，毕竟是go里面排第一的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三、思考&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;为什么用Go？ Java很牛逼，常年霸占开发语言榜首 &lt;a href=&#34;https://www.tiobe.com/tiobe-index/&#34;&gt;https://www.tiobe.com/tiobe-index/&lt;/a&gt; 。但就我个人而言，工作中用不着Java，只能看，不能摸，咋玩？Java体系太庞大，不适合我这样的匆匆过客。Python也很牛逼，工作中也用，但怎么说呢，性能不高，对第三方库依赖也太重，我自己用起来都觉得麻烦（Go编完了随便往一个容器里面一放就能跑，Python还得装一堆依赖）。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;什么是MVC，它为什么会存在，又为什么被淘汰了？先声明一点，这个话题很大，而且我也不是圈内人士，我只能说点我自己的观念。MVC首先是个老古董，最初并没有流行开（我也不知道它是什么时候火起来的），我觉得人们最初的想法其实很简单，就是让网页的速度更快，而为了达到这个目的，出现了网页动静分离这样一个概念。MVC恰好又符合这一思想，model、view、controller各自做好自己的事情（View负责页面，Controller负责路由，Model负责逻辑和数据库），降低互相间的耦合程度，把一部分工作前移交给浏览器去做，静态页面由浏览器去缓存，动态页面需要的时候再去加载。那为什么现在它又被淘汰了？因为它有了两种演进方向：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MVP（Model-View-Presenter），Presenter功能和Controller类似，但MVP与MVC有着一个重大的区别：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter，所有的交互都发生在Presenter内部，而在MVC中View会直接从Model中读取数据而不是通过Controller。题外话：这两个一个是上世纪80年代的东东，一个上上世纪90年代的东东，完美的区分这两者有意义么，我觉得差不多理解其思想就行了，有兴趣的可以去看看一位Google Manager的文章&lt;a href=&#34;https://addyosmani.com/blog/understanding-mvc-and-mvp-for-javascript-and-backbone-developers/&#34;&gt;https://addyosmani.com/blog/understanding-mvc-and-mvp-for-javascript-and-backbone-developers/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MVVM（Model-View-ViewModel），其实和MVC关系已经不大了，只是为了便于理解把他们放在了一起。ViewModel大致上就是MVP的Presenter和MVC的Controller了，而View和ViewModel间没有了MVP的界面接口，而是直接交互，用数据“绑定”的形式让数据更新的事件不需要开发人员手动去编写特殊用例，而是自动地双向同步，用一种统一的集中的方式实现频繁需要被实现的数据更新问题。例如用于股票这种数据需要被实时更新的场景。简单的总结一下就是，以前用过的Layui和Amaze UI属于MVC(MVP)，还没用过的Vue是MVVM(ElementUI还是iView容我再纠结一下)。Vue还是AngularJS？来张图：
&lt;img src=&#34;https://i.imgur.com/Qnl91oD.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/TYTRYSg.png&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;数据库优化，这也是一个大的命题。做一个网站，撇开内容、美工之外，其他无非就是速度，并发、稳定性。其中数据库在这三个方面都有涉及，为何？速度，不管是都还是写，都和数据库的响应速度有关；并发，大量并发的场景下用户Session的存放，总不能都放内存里吧；稳定性，大量并发的情况下如何保持数据库不锁死。我个人觉得需要想明白的事情包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;先搞清楚网站的读写比例，再决定设计方向；&lt;/li&gt;
&lt;li&gt;降低数据库的计算功能，让其把资源都放在存储上；&lt;/li&gt;
&lt;li&gt;数据库进行读写分离；&lt;/li&gt;
&lt;li&gt;数据库之间的数据同步；&lt;/li&gt;
&lt;li&gt;引入缓存系统和搜索技术；&lt;/li&gt;
&lt;li&gt;数据库拆分（垂直拆分&amp;ndash;&amp;gt;水平拆分）;&lt;/li&gt;
&lt;li&gt;分布式事务&lt;/li&gt;
&lt;li&gt;使用NoSql数据库,采用Key/Value这种简单的数据结构&lt;/li&gt;
&lt;li&gt;剩下的就是多读读书，比如看看阿里是怎么做的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;其它：CDN技术、反向代理、SOA、RAM Caching、Http压缩、Http加速等等。不会的还有很多，Mark一下，慢慢来。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>第一篇Blog，顺便吐槽一下segmentfault</title>
      <link>https://zhanggq.github.io/post/zgq-ui-segmentfault/</link>
      <pubDate>Tue, 03 Apr 2018 15:43:48 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-ui-segmentfault/</guid>
      
        <description>&lt;p&gt;第一篇Blog，顺便吐槽一下segmentfault，之前虽然觉得segmentfault之类的虽然low，但一直怕麻烦，没有自己搞个Blog。没想到，还没写几篇文章，就各种审核不通过。各种商业小白文倒是火得很。无语无奈之下，自己动手丰衣足食吧。&lt;/p&gt;

&lt;p&gt;截止到目前，只是搭了一个架子出来，顺便学学Markdown怎么写。后面有空再把评论功能加上，以及去&lt;a href=&#34;https://themes.gohugo.io/找找其它顺眼的主题。Hugo确实强大，可以去学习一下源码。&#34;&gt;https://themes.gohugo.io/找找其它顺眼的主题。Hugo确实强大，可以去学习一下源码。&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
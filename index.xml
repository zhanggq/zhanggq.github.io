<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zhanggq</title>
    <link>https://zhanggq.github.io/</link>
    <description>Recent content on Zhanggq</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 02 Apr 2021 09:03:09 +0800</lastBuildDate>
    
        <atom:link href="https://zhanggq.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>关于Go的空指针检查</title>
      <link>https://zhanggq.github.io/post/zgq-go-nil-pointer/</link>
      <pubDate>Fri, 02 Apr 2021 09:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-go-nil-pointer/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;最近开发过程中遇到挺多空指针引发的Coredump，想在CI过程中集成一下Go的代码检查工具，但实际发现这些工具的效果都不行……&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-测试代码&#34;&gt;一、测试代码&lt;/h2&gt;

&lt;p&gt;简单写了一些空指针代码，如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-go&#34;&gt;package main

import (
    &amp;quot;fmt&amp;quot;
    &amp;quot;reflect&amp;quot;
    &amp;quot;testGolint/context&amp;quot; // 加载这个库时，就会调用其init()，所以其内部打印在main()之前
    &amp;quot;time&amp;quot;
)

type Address struct {
    Home  string
    Email string
}

type User struct {
    Name    string
    Address *Address
}

func testCase0() {
    fmt.Println(&amp;quot;Test Case 0 Begin..&amp;quot;)
    var a = User{}

    address := a.Address
    if address == nil {
        fmt.Println(*address) // nil dereference
    }

    fmt.Printf(&amp;quot;Email Address = [%s] \n&amp;quot;, address.Email) // 典型的空指针，查不出来

    fmt.Println(&amp;quot;Test Case 0 Finish..&amp;quot;)
}

func testCase1() {
    fmt.Println(&amp;quot;Test Case 1 Begin..&amp;quot;)
    var a = &amp;amp;context.Context{}
    var user = a.UserAllocate()
    fmt.Printf(&amp;quot;User Name %s \n&amp;quot;, user.Name)

    var company = user.WorkExps[0]
    fmt.Printf(&amp;quot;User Company Name %s \n&amp;quot;, company.CompanyName) // 典型的空指针，查不出来

    fmt.Println(&amp;quot;Test Case 1 Finish..&amp;quot;)
}

func testCase2() {
    fmt.Println(&amp;quot;Test Case 2 Begin..&amp;quot;)
    var a *context.Context

    go func() {
        fmt.Println(&amp;quot;Before a.&amp;quot;)
        a = &amp;amp;context.Context{}
        fmt.Println(&amp;quot;After a&amp;quot;)
    }()
    //time.Sleep(1 * time.Second) // 加上这句就不会dump

    go func() {
        fmt.Println(&amp;quot;Before UserInfo.&amp;quot;)
        a.UserInfo() // 这行很可能运行在a = &amp;amp;context.Context{}之前，会触发空指针dump
        fmt.Println(&amp;quot;After UserInfo.&amp;quot;)
    }()

    fmt.Println(&amp;quot;Test Case 2 Finish..&amp;quot;)
    time.Sleep(3 * time.Second)
}

func IsNil(i interface{}) bool {
    vi := reflect.ValueOf(i)
    if vi.Kind() == reflect.Ptr {
        return vi.IsNil()
    }
    return false
}

type Worker interface {
    String() string
}

type Person struct {
    Age  uint8
    Name string
    Sex  string
}

type Employee struct {
    Person
}

type Employer struct {
    Title string
    Person
}

func (p *Person) String() string {
    return fmt.Sprintf(&amp;quot;Name: %s, Sex: %s, Age: %d&amp;quot;, p.Name, p.Sex, p.Age)
}

func (er *Employer) String() string {
    return fmt.Sprintf(&amp;quot;%s, Title: %s&amp;quot;, er.Person.String(), er.Title)
}

func testCase3() {
    var (
        w          Worker
        emptyPoint *Employee
    )

    w = &amp;amp;Employer{
        Title: &amp;quot;Title&amp;quot;,
        Person: Person{
            Name: &amp;quot;Tom&amp;quot;,
            Age:  50,
            Sex:  &amp;quot;male&amp;quot;,
        },
    }

    if IsNil(w) {
        fmt.Printf(&amp;quot;interface w is nil&amp;quot;)
        return
    }

    // **bad** 是类型断言问题
    e := w.(*Employee)
    fmt.Println(e.String())

    // ok
    if e, ok := w.(*Employee); ok {
        fmt.Printf(&amp;quot;It&#39;s Employee, %s\n&amp;quot;, e.String())
    } else if e, ok := w.(*Employer); ok {
        fmt.Printf(&amp;quot;It&#39;s Employer, %s\n&amp;quot;, e.String())
    }

    // **bad** 在嵌入式结构上定义方法时在nil指针上调用方法
    fmt.Println(emptyPoint.String())
}

func main() {
    fmt.Println(&amp;quot;Test Begin..&amp;quot;)

    testCase0()
    testCase1()
    testCase2()
    testCase3()

    fmt.Println(&amp;quot;Test Finish..&amp;quot;)

}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;开测！&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;二-golangci-lint&#34;&gt;二、Golangci-lint&lt;/h2&gt;

&lt;p&gt;名气最大的一个工具&lt;a href=&#34;https://github.com/golangci/golangci-lint&#34;&gt;Golangci-lint&lt;/a&gt;。修改&lt;a href=&#34;https://github.com/golangci/golangci-lint/blob/master/.golangci.yml&#34;&gt;.golangci.yml&lt;/a&gt;，放开所有的限制，运行后发现核心的问题没查出来，只有一些格式问题：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/04/02/Q5ZXA6PakRypINc.png&#34; alt=&#34;golangci-lint.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;三-nilness&#34;&gt;三、Nilness&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://pkg.go.dev/golang.org/x/tools&#34;&gt;Nilness&lt;/a&gt;是官方的一个专门检查空指针的工具，但运行后发现只能查几种简单的空指针场景：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/04/02/GyCdwZcb1sXhxBE.png&#34; alt=&#34;nilness.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section4&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;四-staticcheck&#34;&gt;四、Staticcheck&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://staticcheck.io/docs/&#34;&gt;Staticcheck&lt;/a&gt;，依然不行：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/04/02/ML6botcvKZ8gT2X.png&#34; alt=&#34;staticcheck.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section5&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;五-gocritic&#34;&gt;五、Gocritic&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://go-critic.github.io/&#34;&gt;Gocritic&lt;/a&gt;，不行：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/04/02/7gT1CVRzsfhvKiY.png&#34; alt=&#34;gocritic1.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/04/02/a2fTJWFdbzmC57t.png&#34; alt=&#34;gocritic2.png&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>VPP如何使用Mellanox网卡</title>
      <link>https://zhanggq.github.io/post/zgq-dpdk-vpp-mellanox/</link>
      <pubDate>Wed, 17 Mar 2021 09:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-dpdk-vpp-mellanox/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;最近在用VPP做用户面报文的转发，发现Mellanox网卡挺难用，这里记录一下整个操作过程。整个过程大致有以下几步：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;更新Mellanox网卡驱动；&lt;/li&gt;
&lt;li&gt;安装libmnl.so库等环境依赖；&lt;/li&gt;
&lt;li&gt;编译DPDK时放开MLX5；&lt;/li&gt;
&lt;li&gt;编译VPP时放开MLX5；&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-vpp绑定mellanox网卡时遇到的问题&#34;&gt;一、VPP绑定Mellanox网卡时遇到的问题&lt;/h2&gt;

&lt;p&gt;本人用的是Centos7.7环境，VPP是20.05版本，服务器上插了2张Mellanox MCX4121A-ACAT网卡，如下所示：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root@localhost dpdk-20.02]# usertools/dpdk-devbind.py --status

Network devices using kernel driver
===================================
0000:18:00.0 &#39;MT27710 Family [ConnectX-4 Lx] 1015&#39; if=enp24s0f0 drv=mlx5_core unused=igb_uio,vfio-pci,uio_pci_generic 
0000:18:00.1 &#39;MT27710 Family [ConnectX-4 Lx] 1015&#39; if=enp24s0f1 drv=mlx5_core unused=igb_uio,vfio-pci,uio_pci_generic 
0000:3e:00.2 &#39;Ethernet Connection X722 for 1GbE 37d1&#39; if=enp62s0f2 drv=i40e unused=igb_uio,vfio-pci,uio_pci_generic *Active*
0000:3e:00.3 &#39;Ethernet Connection X722 for 1GbE 37d1&#39; if=enp62s0f3 drv=i40e unused=igb_uio,vfio-pci,uio_pci_generic 
0000:af:00.0 &#39;MT27710 Family [ConnectX-4 Lx] 1015&#39; if=enp175s0f0 drv=mlx5_core unused=igb_uio,vfio-pci,uio_pci_generic *Active*
0000:af:00.1 &#39;MT27710 Family [ConnectX-4 Lx] 1015&#39; if=enp175s0f1 drv=mlx5_core unused=igb_uio,vfio-pci,uio_pci_generic 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;购买网卡之前做过简单的调研，该网卡型号是在DPDK的支持列表中的，加上Intel的xxv710断货，所以就买了这种型号的网卡。结果VPP起来后发现网卡识别不到，简单查了一下，发现VPP的代码src\plugins\dpdk\device\init.c中有如下代码，我淦 ……&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;static void dpdk_bind_devices_to_uio (dpdk_config_main_t * conf)
{
    ……
    /* Mellanox CX3, CX3VF */
    else if (d-&amp;gt;vendor_id == 0x15b3 &amp;amp;&amp;amp; d-&amp;gt;device_id &amp;gt;= 0x1003 &amp;amp;&amp;amp; d-&amp;gt;device_id &amp;lt;= 0x1004)
      {
        continue;
      }
    /* Mellanox CX4, CX4VF, CX4LX, CX4LXVF, CX5, CX5VF, CX5EX, CX5EXVF */
    else if (d-&amp;gt;vendor_id == 0x15b3 &amp;amp;&amp;amp; d-&amp;gt;device_id &amp;gt;= 0x1013 &amp;amp;&amp;amp; d-&amp;gt;device_id &amp;lt;= 0x101a)
      {
        continue;
      }
    /* Mellanox CX6, CX6VF, CX6DX, CX6DXVF */
    else if (d-&amp;gt;vendor_id == 0x15b3 &amp;amp;&amp;amp; d-&amp;gt;device_id &amp;gt;= 0x101b &amp;amp;&amp;amp; d-&amp;gt;device_id &amp;lt;= 0x101e)
      {
        continue;
      }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;将这部分代码改掉，重编DPDK插件后再跑，从打印看，是DPDK不识别，在rte_eth_dev_count_avail()返回的结果是0，我再淦 ……&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;2021-03-11 19:03:59.814914 ERROR  [VPP]: dpdk_bind_devices_to_uio:875: PCI device 0x15b3:0x1015 at PCI address 0000:18:00.0
2021-03-11 19:03:59.815055 ERROR  [VPP]: dpdk_bind_devices_to_uio:1009: PCI device 0x15b3:0x1015 bind to uio
2021-03-11 19:03:59.818461 ERROR  [VPP]: dpdk_bind_devices_to_uio:875: PCI device 0x15b3:0x1015 at PCI address 0000:18:00.1
2021-03-11 19:03:59.818591 ERROR  [VPP]: dpdk_bind_devices_to_uio:1009: PCI device 0x15b3:0x1015 bind to uio
……
2021-03-11 19:03:59.843570 ERROR  [VPP]: dpdk_config:1522: EAL init args: -c 1f -n 4 --in-memory --file-prefix vpp -w 0000:18:00.0 -w 0000:18:00.1 --master-lcore 0 
2021-03-11 19:04:00.110849 DEBUG  [VPP]: dpdk_lib_init:247: DPDK drivers found no Ethernet devices...

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;直接拿出DPDK的Example跑了一下，发现确实是DPDK不支持，于VPP无关，得，从DPDK开始找办法吧。&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;二-更新mellanox网卡驱动&#34;&gt;二、更新Mellanox网卡驱动&lt;/h2&gt;

&lt;p&gt;具体过程参考DPDK官网的&lt;a href=&#34;https://doc.dpdk.org/guides/nics/mlx5.html#quick-start-guide-on-ofed-en&#34;&gt;Quick Start Guide on OFED&lt;/a&gt;。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;从&lt;a href=&#34;https://cn.mellanox.com/products/infiniband-drivers/linux/mlnx_ofed&#34;&gt;Nvidia官网&lt;/a&gt;下载Mellanox OFED驱动，我用的版本是MLNX_OFED_LINUX-5.2-2.2.0.0-rhel7.7-x86_64.tgz&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;上传服务器，解压，然后安装驱动；&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;   [root@localhost MLNX_OFED_LINUX-5.2-2.2.0.0-rhel7.7-x86_64]# ./mlnxofedinstall --force --dpdk --upstream-libs
   Logs dir: /tmp/MLNX_OFED_LINUX.16363.logs
   General log file: /tmp/MLNX_OFED_LINUX.16363.logs/general.log
   Verifying KMP rpms compatibility with target kernel...
   ……
   Initializing...
   Attempting to perform Firmware update...
   Querying Mellanox devices firmware ...
   
   Device #1:
   ----------
   
     Device Type:      ConnectX4LX
     Part Number:      MCX4121A-ACA_Ax
     Description:      ConnectX-4 Lx EN network interface card; 25GbE dual-port SFP28; PCIe3.0 x8; ROHS R6
     PSID:             MT_2420110034
     PCI Device Name:  18:00.0
     Base MAC:         1c34da523394
     Versions:         Current        Available     
        FW             14.26.1040     14.29.2002    
        PXE            3.5.0803       3.6.0204      
        UEFI           14.19.0014     14.22.0016    
   
     Status:           Update required
   
   ---------
   Found 1 device(s) requiring firmware update...
   
   Device #1: Updating FW ...     
   Querying Mellanox devices firmware ...
   
   Device #1:
   ----------
   
     Device Type:      ConnectX4LX
     Part Number:      MCX4121A-ACA_Ax
     Description:      ConnectX-4 Lx EN network interface card; 25GbE dual-port SFP28; PCIe3.0 x8; ROHS R6
     PSID:             MT_2420110034
     PCI Device Name:  af:00.0
     Base MAC:         0c42a15965b0
     Versions:         Current        Available     
        FW             14.25.1020     14.29.2002    
        PXE            3.5.0701       3.6.0204      
        UEFI           14.18.0019     14.22.0016    
   
     Status:           Update required
   
   ---------
   Found 1 device(s) requiring firmware update...
   ……
   Device #1: Updating FW ...     
   FSMST_INITIALIZE -   OK          
   FSMST_INITIALIZE -   OK          0%
   Writing Boot image component -   OK          
   Writing Boot image component - Done
   
   Restart needed for updates to take effect.
   Log File: /tmp/JsCZVuDAV5
   Writing Boot image component -   OK          
   Done
   
   Restart needed for updates to take effect.
   Log File: /tmp/WXZUWDPNT8
   Real log file: /tmp/MLNX_OFED_LINUX.16363.logs/fw_update.log
   To load the new driver, run:
   /etc/init.d/openibd restart
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;手工执行一下命令，确认驱动正常；&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;   [root@localhost dpdk-20.02]# /etc/init.d/openibd restart
   Unloading HCA driver:                                      [  OK  ]
   Loading HCA driver and Access Layer:                       [  OK  ]
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;看一下ibverb的版本；&lt;/li&gt;
&lt;/ol&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;   [root@localhost dpdk-20.02]# rpm -qa | grep ibverb
   libibverbs-utils-52mlnx1-1.52220.x86_64
   libibverbs-52mlnx1-1.52220.x86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;三-dpdk编译&#34;&gt;三、DPDK编译&lt;/h2&gt;

&lt;p&gt;理论上这一步并不需要，编译VPP时会将DPDK一起编译。但为了验证，还是单独重编一下DPDK。首先要修改编译宏：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root@localhost dpdk-20.02]# vi config/common_base
#
# Compile burst-oriented Mellanox ConnectX-4, ConnectX-5,
# ConnectX-6 &amp;amp; BlueField (MLX5) PMD
#
CONFIG_RTE_LIBRTE_MLX5_PMD=y
CONFIG_RTE_LIBRTE_MLX5_DEBUG=y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;编完内核及App之后，用testpmd验证一下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root@localhost dpdk-20.02]# cd ./build/build/app/test-pmd/
[root@localhost test-pmd]# 
[root@localhost test-pmd]# ./testpmd -l 8-15 -n 4 -w 0000:18:00.0 -w 0000:18:00.1 -w 0000:af:00.0 -w 0000:af:00.1 -- --rxq=2 --txq=2 -i
EAL: Detected 32 lcore(s)
EAL: Detected 2 NUMA nodes
EAL: Multi-process socket /var/run/dpdk/rte/mp_socket
EAL: Selected IOVA mode &#39;VA&#39;
EAL: No available hugepages reported in hugepages-1048576kB
EAL: Probing VFIO support...
EAL: VFIO support initialized
EAL: PCI device 0000:18:00.0 on NUMA socket 0
EAL:   probe driver: 15b3:1015 net_mlx5
net_mlx5: mlx5.c:3054: mlx5_pci_probe(): checking device &amp;quot;mlx5_3&amp;quot;
net_mlx5: mlx5.c:3054: mlx5_pci_probe(): checking device &amp;quot;mlx5_2&amp;quot;
net_mlx5: mlx5.c:3054: mlx5_pci_probe(): checking device &amp;quot;mlx5_1&amp;quot;
net_mlx5: mlx5.c:3054: mlx5_pci_probe(): checking device &amp;quot;mlx5_0&amp;quot;
net_mlx5: mlx5.c:3089: mlx5_pci_probe(): PCI information matches for device &amp;quot;mlx5_0&amp;quot;
net_mlx5: mlx5.c:2480: mlx5_dev_spawn(): DV flow is not supported
EAL: PCI device 0000:18:00.1 on NUMA socket 0
EAL:   probe driver: 15b3:1015 net_mlx5
net_mlx5: mlx5.c:3054: mlx5_pci_probe(): checking device &amp;quot;mlx5_3&amp;quot;
net_mlx5: mlx5.c:3054: mlx5_pci_probe(): checking device &amp;quot;mlx5_2&amp;quot;
net_mlx5: mlx5.c:3054: mlx5_pci_probe(): checking device &amp;quot;mlx5_1&amp;quot;
net_mlx5: mlx5.c:3089: mlx5_pci_probe(): PCI information matches for device &amp;quot;mlx5_1&amp;quot;
net_mlx5: mlx5.c:3054: mlx5_pci_probe(): checking device &amp;quot;mlx5_0&amp;quot;
net_mlx5: mlx5.c:2480: mlx5_dev_spawn(): DV flow is not supported
EAL: PCI device 0000:af:00.0 on NUMA socket 1
EAL:   probe driver: 15b3:1015 net_mlx5
net_mlx5: mlx5.c:3054: mlx5_pci_probe(): checking device &amp;quot;mlx5_3&amp;quot;
net_mlx5: mlx5.c:3054: mlx5_pci_probe(): checking device &amp;quot;mlx5_2&amp;quot;
net_mlx5: mlx5.c:3089: mlx5_pci_probe(): PCI information matches for device &amp;quot;mlx5_2&amp;quot;
net_mlx5: mlx5.c:3054: mlx5_pci_probe(): checking device &amp;quot;mlx5_1&amp;quot;
net_mlx5: mlx5.c:3054: mlx5_pci_probe(): checking device &amp;quot;mlx5_0&amp;quot;
net_mlx5: mlx5.c:2480: mlx5_dev_spawn(): DV flow is not supported
EAL: PCI device 0000:af:00.1 on NUMA socket 1
EAL:   probe driver: 15b3:1015 net_mlx5
net_mlx5: mlx5.c:3054: mlx5_pci_probe(): checking device &amp;quot;mlx5_3&amp;quot;
net_mlx5: mlx5.c:3089: mlx5_pci_probe(): PCI information matches for device &amp;quot;mlx5_3&amp;quot;
net_mlx5: mlx5.c:3054: mlx5_pci_probe(): checking device &amp;quot;mlx5_2&amp;quot;
net_mlx5: mlx5.c:3054: mlx5_pci_probe(): checking device &amp;quot;mlx5_1&amp;quot;
net_mlx5: mlx5.c:3054: mlx5_pci_probe(): checking device &amp;quot;mlx5_0&amp;quot;
net_mlx5: mlx5.c:2480: mlx5_dev_spawn(): DV flow is not supported
Interactive-mode selected
testpmd: create a new mbuf pool &amp;lt;mbuf_pool_socket_1&amp;gt;: n=203456, size=2176, socket=1
testpmd: preferred mempool ops selected: ring_mp_mc
testpmd: create a new mbuf pool &amp;lt;mbuf_pool_socket_0&amp;gt;: n=203456, size=2176, socket=0
testpmd: preferred mempool ops selected: ring_mp_mc
Configuring Port 0 (socket 0)
Port 0: 1C:34:DA:52:33:94
Configuring Port 1 (socket 0)
Port 1: 1C:34:DA:52:33:95
Configuring Port 2 (socket 1)
Port 2: 0C:42:A1:59:65:B0
Configuring Port 3 (socket 1)
Port 3: 0C:42:A1:59:65:B1
Checking link statuses...
Done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;此时再看网卡，还在内核中：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root@localhost dpdk-20.02]# usertools/dpdk-devbind.py --status

Network devices using kernel driver
===================================
0000:18:00.0 &#39;MT27710 Family [ConnectX-4 Lx] 1015&#39; if=enp24s0f0 drv=mlx5_core unused=igb_uio,vfio-pci,uio_pci_generic 
0000:18:00.1 &#39;MT27710 Family [ConnectX-4 Lx] 1015&#39; if=enp24s0f1 drv=mlx5_core unused=igb_uio,vfio-pci,uio_pci_generic 
0000:3e:00.2 &#39;Ethernet Connection X722 for 1GbE 37d1&#39; if=enp62s0f2 drv=i40e unused=igb_uio,vfio-pci,uio_pci_generic *Active*
0000:3e:00.3 &#39;Ethernet Connection X722 for 1GbE 37d1&#39; if=enp62s0f3 drv=i40e unused=igb_uio,vfio-pci,uio_pci_generic 
0000:af:00.0 &#39;MT27710 Family [ConnectX-4 Lx] 1015&#39; if=enp175s0f0 drv=mlx5_core unused=igb_uio,vfio-pci,uio_pci_generic *Active*
0000:af:00.1 &#39;MT27710 Family [ConnectX-4 Lx] 1015&#39; if=enp175s0f1 drv=mlx5_core unused=igb_uio,vfio-pci,uio_pci_generic 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从&lt;a href=&#34;https://community.mellanox.com/s/article/mellanox-dpdk&#34;&gt;Mellanox官网&lt;/a&gt;中可以看到它的驱动设计就是这样：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Mellanox PMD directly accesses HW for fast data-path processing while control-path still goes through kernel modules. Unlike other PMDs, Mellanox PMD does not rely on UIO/VFIO driver for control-path. Instead, control-path is built on top of libibverbs using the Raw Ethernet Accelerated Verbs API. Thus, the PCIe device is not required to be unbound from kernel network stack and standard Linux commands (e.g ethtool/ifconfig) can be run on the kernel device to query/update MTU and flow control parameters or to monitor statistics. This allows the PMD to coexist with kernel driver interface which still remains functional. Ports that are not being used by DPDK can send and receive traffic through the kernel network stack.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;section4&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;四-vpp编译&#34;&gt;四、VPP编译&lt;/h2&gt;

&lt;p&gt;在FD.io的主题帖上看到两个帖子，&lt;a href=&#34;https://lists.fd.io/g/vpp-dev/topic/14304652&#34;&gt;贴1&lt;/a&gt;，&lt;a href=&#34;https://lists.fd.io/g/vpp-dev/topic/32141457&#34;&gt;贴2&lt;/a&gt;。综上所述，VPP使用Mellanox有两种方式，一种还是原来的通过DPDK去连接Mellanox驱动，从而使用Mellanox网卡。另一种方式是使用&lt;a href=&#34;https://gerrit.fd.io/r/c/19364/3/src/plugins/rdma/rdma_doc.md&#34;&gt;RDMA驱动&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;先说原来的方式，第一步先安装依赖；&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root@localhost ~]# yum install -y libmnl-devel numactl-devel rdma-core-devel nasm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后重编VPP，编译时可以看一下DPDK plugin需要的依赖是否都有了；&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root@localhost ~]# make rebuild-release vpp_uses_dpdk_mlx5_pmd=yes DPDK_MLX5_PMD_DLOPEN_DEPS=y
……
-- dpdk plugin needs libdpdk.a library - found at /opt/vpp/external/x86_64/lib/libdpdk.a
-- Found DPDK 20.2.0 in /opt/vpp/external/x86_64/include/dpdk
-- dpdk plugin needs numa library - found at /usr/lib64/libnuma.so
-- dpdk plugin needs libIPSec_MB.a library - found at /opt/vpp/external/x86_64/lib/libIPSec_MB.a
-- dpdk plugin needs mnl library - found at /usr/lib64/libmnl.so
-- DPDK depends on libmnl (Mellanox PMD requirement)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;同时还可以检查编译dpdk_plugin.so所依赖的libdpdk.a里有没有mlx5相关的静态库；&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root@localhost dpdk-20.02]# vi /opt/vpp/external/x86_64/lib/libdpdk.a
GROUP ( librte_bus_fslmc.a librte_bus_pci.a librte_bus_vdev.a librte_bus_vmbus.a librte_cmdline.a librte_common_cpt.a librte_common_dpaax.a librte_common_iavf.a librte_common_mlx5.a librte_common_octeontx.a librte_common_octeontx2.a librte_compressdev.a librte_cryptodev.a librte_eal.a librte_ethdev.a librte_eventdev.a librte_fib.a librte_hash.a librte_ip_frag.a librte_ipsec.a librte_kvargs.a librte_mbuf.a librte_mempool.a librte_mempool_bucket.a librte_mempool_dpaa2.a librte_mempool_octeontx.a librte_mempool_octeontx2.a librte_mempool_ring.a librte_mempool_stack.a librte_meter.a librte_metrics.a librte_net.a librte_pci.a librte_pdump.a librte_pmd_aesni_gcm.a librte_pmd_aesni_mb.a librte_pmd_af_packet.a librte_pmd_ark.a librte_pmd_atlantic.a librte_pmd_avp.a librte_pmd_axgbe.a librte_pmd_bnxt.a librte_pmd_caam_jr.a librte_pmd_crypto_scheduler.a librte_pmd_cxgbe.a librte_pmd_dpaa2.a librte_pmd_dpaa2_event.a librte_pmd_dpaa2_sec.a librte_pmd_dsw_event.a librte_pmd_e1000.a librte_pmd_ena.a librte_pmd_enetc.a librte_pmd_enic.a librte_pmd_fm10k.a librte_pmd_hinic.a librte_pmd_hns3.a librte_pmd_i40e.a librte_pmd_iavf.a librte_pmd_ice.a librte_pmd_ifc.a librte_pmd_ionic.a librte_pmd_ixgbe.a librte_pmd_lio.a librte_pmd_memif.a librte_pmd_mlx5.a librte_pmd_netvsc.a librte_pmd_nfp.a librte_pmd_nitrox.a librte_pmd_null.a librte_pmd_null_crypto.a librte_pmd_octeontx.a librte_pmd_octeontx2.a librte_pmd_octeontx2_crypto.a librte_pmd_octeontx2_event.a librte_pmd_octeontx_crypto.a librte_pmd_octeontx_ssovf.a librte_pmd_octeontx_zip.a librte_pmd_opdl_event.a librte_pmd_qat.a librte_pmd_qede.a librte_pmd_ring.a librte_pmd_sfc_efx.a librte_pmd_skeleton_event.a librte_pmd_sw_event.a librte_pmd_thunderx_nicvf.a librte_pmd_vdev_netvsc.a librte_pmd_vhost.a librte_pmd_virtio.a librte_pmd_virtio_crypto.a librte_pmd_vmxnet3_uio.a librte_rcu.a librte_reorder.a librte_rib.a librte_ring.a librte_sched.a librte_security.a librte_stack.a librte_timer.a librte_vhost.a )
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完事后修改启动文件，加上需要的网卡，启动；&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root@localhost dpdk-20.02]# cat /etc/vpp/vpp_dpdk.conf
……
dpdk {
  dev 0000:18:00.0 {
    name n3
  }
  dev 0000:18:00.1 {
    name n6
  }
}
……
[root@localhost dpdk-20.02]# /home/C/vpp/build-root/build-vpp-native/vpp/bin/vpp -c /etc/vpp/vpp_dpdk.conf 
0: tls_init_ca_chain:609: Could not initialize TLS CA certificates
0: tls_mbedtls_init:644: failed to initialize TLS CA chain
0: tls_init_ca_chain:874: Could not initialize TLS CA certificates
0: tls_openssl_init:948: failed to initialize TLS CA chain
VPP# show interface 
              Name               Idx    State  MTU (L3/IP4/IP6/MPLS)     Counter          Count     
local0                            0     down          0/0/0/0       
n3                                1     down         9000/0/0/0     
n6                                2     down         9000/0/0/0     
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;另外一种使用RDMA插件；&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root@localhost dpdk-20.02]# cat /etc/vpp/vpp_rdma.conf
……
#dpdk {
#  dev 0000:18:00.0
#  dev 0000:18:00.1
#}
……
[root@localhost dpdk-20.02]# /home/C/vpp/build-root/build-vpp-native/vpp/bin/vpp -c /etc/vpp/vpp_rdma.conf
0: tls_init_ca_chain:609: Could not initialize TLS CA certificates
0: tls_mbedtls_init:644: failed to initialize TLS CA chain
0: tls_init_ca_chain:874: Could not initialize TLS CA certificates
0: tls_openssl_init:948: failed to initialize TLS CA chain
VPP# show interface 
              Name               Idx    State  MTU (L3/IP4/IP6/MPLS)     Counter          Count     
TwentyFiveGigabitEthernet18/0/0   1     down         9000/0/0/0     
TwentyFiveGigabitEthernet18/0/1   2     down         9000/0/0/0     
TwentyFiveGigabitEthernetaf/0/0   3     down         9000/0/0/0     
TwentyFiveGigabitEthernetaf/0/1   4     down         9000/0/0/0     
local0                            0     down          0/0/0/0       
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后可以看一下，多了一个rdma-input；&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;VPP# show vlib graph
           Name                      Next                    Previous   
……
rdma-input                 ip4-input-no-checksum [0]
                                 ip4-input [1]      
                                 ip6-input [2]      
                                mpls-input [3]      
                              ethernet-input [4]    
                                error-drop [5]           
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>关于图床的选择</title>
      <link>https://zhanggq.github.io/post/zgq-natter-smms/</link>
      <pubDate>Fri, 19 Feb 2021 09:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-natter-smms/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;好久没有更新帖子了。一个原因是懒，另一个原因是之前用的MarkdownPad2的图床，国内访问总是打不开图片，影响用户体验。本次试试换一个图床，看看效果。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-图床选择&#34;&gt;一、图床选择&lt;/h2&gt;

&lt;p&gt;参考这个帖子&lt;a href=&#34;https://www.jianshu.com/p/ea1eb11db63f&#34;&gt;Markdown图床&lt;/a&gt;。码云的嫌麻烦， 所以选择了&lt;a href=&#34;https://sm.ms/&#34;&gt;sm.ms&lt;/a&gt;，试着上传了一张图片，看看效果。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.loli.net/2021/02/18/SabeXHZTcyt4zhI.png&#34; alt=&#34;7层协议.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;二-markdown工具选择&#34;&gt;二、Markdown工具选择&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;MarkdownPad2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;之前用的MarkdownPad2，很久没用之后再次打开，发生HTML渲染组件出错，懒得解决了。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MarkPad&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;又试了MarkPad，问题是对中文输入法的支持非常的不友好。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Typora&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;然后又换了&lt;a href=&#34;https://www.typora.io/&#34;&gt;Typora&lt;/a&gt;，访问速度很慢，翻墙之后才下载成功，用起来觉得有点过于简单，但是勉强也能用用，先这样吧。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Vue Debug调试</title>
      <link>https://zhanggq.github.io/post/zgq-paas-vue-debug/</link>
      <pubDate>Tue, 21 May 2019 10:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-paas-vue-debug/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;差不多半年没碰Vue，回头再来看发现又差不多都忘了。Git hub上下载了最新的&lt;a href=&#34;https://github.com/PanJiaChen/vue-element-admin&#34;&gt;vue-element-admin&lt;/a&gt;，从头学起吧。学习的第一步就是Debug。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-自己的环境说明&#34;&gt;一、自己的环境说明&lt;/h2&gt;

&lt;p&gt;我所用的开发环境如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Windows系统（穷人买不起Mac）&lt;/li&gt;
&lt;li&gt;开发工具使用webstorm&lt;/li&gt;
&lt;li&gt;调试的代码是vue-element-admin v4.1.0&lt;/li&gt;
&lt;li&gt;Chrome浏览器&lt;/li&gt;
&lt;li&gt;能够翻墙&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;二-webstorm-debug配置&#34;&gt;二、Webstorm Debug配置&lt;/h2&gt;

&lt;p&gt;首先需要先将vue-element-admin工程跑起来（此处不详细描述），接着在webstorm新增一个Debug配置，如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/29ZMZXk.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;接着需要打开Chrome浏览器的应用商店（此处需要翻墙），并下载JetBrains IDE Support插件，如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/NkisazS.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;顺便需要说明，JetBrains IDE Support插件默认是通过63342端口与webstorm进行通信的，如果同时启动了JetBrains的其它工具（比如Pycharm），有可能63342端口就会被其它工具占用，此时需要检查webstorm当前所用的Debug端口及修改JetBrains IDE Support插件配置。如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/u4rb1He.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/yKxoguK.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;JetBrains IDE Support插件链接上webstorm之后，在webstorm上运行第一步新增的Debug（注意前提是vue-element-admin工程已经跑起来），此时webstorm会自动打开chrome浏览器，并进入相应的web界面。在浏览器中按F12，选择需要调试的源码，打断点，继续运行，直到代码被断住，此时就可以看见对应webstorm中也被断在了对应的代码上：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/AlneTpR.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/VSvDIQA.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/PNlvdsi.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;三-进一步配置&#34;&gt;三、进一步配置&lt;/h2&gt;

&lt;p&gt;按照上一步操作，理论上已经可以debug代码了，但实际真正要调式Vue代码时，确发现看不到真正的Vue源码：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/bpJo1e1.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;所以此时还需要进一步配置vue-devtools。首先上chrome应用商店下载插件：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/3jtXRnc.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;接着修改webstorm配置&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/3lCYLU2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;重启Debug后，在chrome上就能看到所需要的vue源码：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/L4wykPa.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Django框架学习</title>
      <link>https://zhanggq.github.io/post/zgq-paas-python-django/</link>
      <pubDate>Sun, 28 Apr 2019 10:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-paas-python-django/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;最新需要搞一套Python的股市趋势分析，朋友提供核心算法，我负责搭建整个架子。数据部分以前有写过现成的东西（Go写的），重新拿过来改成了Python版本。之后发现虽然数据可以成功分析，但只能通过敲命令行及看log方式进行分析，没有展示界面不太好分享，所以想到了用Django来搭一套Web平台练练手。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-mysql&#34;&gt;一、Mysql&lt;/h2&gt;

&lt;p&gt;之前的一篇帖子中写过，现在最简单的部分就是Mysql。通过下面的命令把我的Mysql容器起来就行，其他容器可以通过-h 127.0.0.1 -P13306访问。&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;二-django&#34;&gt;二、Django&lt;/h2&gt;

&lt;p&gt;Django部分的源码都已经提交&lt;a href=&#34;https://github.com/zhanggq/analize_sys&#34;&gt;Github&lt;/a&gt;（其实也没多少代码），所以这里只讲心得体会。这次开发之前买了本书&amp;ndash;《Django企业开发实战》，主要是时间关系，看了前3章就开始动手了。后来发现有些地方书中并没有讲清楚，导致我在admin和view关系上被误导了很久。&lt;/p&gt;

&lt;p&gt;起初我以为admin只是用来搭建架子，所有的request消息都会经过view+form处理。但实际上不管我怎么修改view的代码，打断点，加日志，request消息都没法走到view。后来发现因为我的url.py里面的url(r&amp;rsquo;^admin/&amp;lsquo;, admin.site.urls)是指所有&lt;a href=&#34;http://xxxx/admin/的请求都会走到admin中，而只有http://xxxx/这样的请求才会经过url(r&#39;^$&#39;&#34;&gt;http://xxxx/admin/的请求都会走到admin中，而只有http://xxxx/这样的请求才会经过url(r&#39;^$&#39;&lt;/a&gt;, IndexView.as_view(), name=&amp;lsquo;index&amp;rsquo;)走到view中，这两个是完全独立的，经过view的请求如果想长得和admin展示出来的一样，就得自己画界面。而《Django企业开发实战》很大一个问题就是没有给出截图，导致我理解错误。&lt;/p&gt;

&lt;p&gt;这里展示一下我目前的django结构（和我Github上代码目录结构有一丢丢区别，问题不大）。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/vRARi13.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;三-docker封装&#34;&gt;三、Docker封装&lt;/h2&gt;

&lt;p&gt;同上面的Github。因为在Linux环境上操作，python包的管理会很麻烦，我也不习惯用virtualenv创建虚拟环境，所以就直接用Docker进行了封装。整个工程如图所示：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/edWv8EJ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;build.sh是一个简单的打包脚本，把django代码打了一个压缩包，以及管理一下镜像的名字；&lt;/li&gt;
&lt;li&gt;requirements.txt是python的依赖，没啥好说的；&lt;/li&gt;
&lt;li&gt;Dockerfile是打镜像的脚本，首先会从网上pull一个python:3.6.0镜像，在其基础上加载了analize.sys.tar.gz代码包，并安装requirements.txt中的python依赖；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;如果是第一次启动容器，则使用下面这个命令，进去后再执行建表等操作：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --privileged -tid -e &amp;quot;container=docker&amp;quot; --restart=always -h analize --name=analize --net=host --stop-signal=RTMIN+3 analize-sys:latest
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;python ./analize_sys/manage.py makemigrations
python ./analize_sys/manage.py migrate
python ./analize_sys/manage.py createsuperuser
python ./analize_sys/manage.py runserver 0.0.0.0:8000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;或者建表完成后直接用这个命令启动容器&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --privileged -tid -e &amp;quot;container=docker&amp;quot; --restart=always -h analize --name=analize --net=host --stop-signal=RTMIN+3 analize-sys:latest python ./analize_sys/manage.py runserver 0.0.0.0:8000
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;section4&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;四-项目展示&#34;&gt;四、项目展示&lt;/h2&gt;

&lt;p&gt;首页进去后会看到一个“分析任务”和“分析结果”。在“分析任务”添加想要分析的股票代码或者选择已经做过处理的.csv表格数据，然后该任务会被置为“待分析”状态。“分析结果”列表中会看到经过算法处理后的结果，在某个时间段内，预测了多少次，其中多少次预测正确什么的。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Q74OvDi.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/LUyWmoH.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/tXtGkll.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;当然，这个项目我不会把算法等核心代码提交，Github上只能看到页面相关的代码（所以一开始就说了没多少代码）。如何获取数据以及如何分析数据的代码是不会展示的。&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section5&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;五-django项目演进&#34;&gt;五、Django项目演进&lt;/h2&gt;

&lt;p&gt;我目前所写的Django代码如果不是前面走了弯路，差不多一天时间就能写出来。当然这只是一个非常雏形的或者说原始的东西。如果要对这个项目进行改造，继续在admin.py上改肯定是不现实或者没有学习意义的。所以思考了一下该项目的演进方向：&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;从默认的admin演进到xadmin（&lt;a href=&#34;https://github.com/sshwsfc/xadmin/tree/django2&#34;&gt;Django2.0版本&lt;/a&gt;）。xadmin是一个很强大的框架，在admin基础上做了很多改进，但该框架的核心还是MVC架构，另外就是xadmin及xadmin2已经停止维护了，目前对Django2的支持也不是很好，所以虽然该方案改造成本最低，但其生命周期非常有限。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;从默认的admin演进到&lt;a href=&#34;https://github.com/sshwsfc/xadmin&#34;&gt;xadmin3.0&lt;/a&gt;。xadmin3.0使用React和Redux套餐，其核心思想已经变成了前后端分离，所以后端django部分需要django-rest-framework生成RESTful API用于对接xadmin。但该项目似乎还在孵化阶段，另一个问题是React和Vue一样，需要学习成本，然后也自己画前端。&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;从默认的admin演进到vue。和上面的一样，需要django-rest-framework，需要学习vue，需要自己找vue前端框架，需要自己画前端。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Openstack GPU Passthrough</title>
      <link>https://zhanggq.github.io/post/zgq-paas-openstack-gpu-pass/</link>
      <pubDate>Thu, 27 Dec 2018 10:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-paas-openstack-gpu-pass/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;随着人工智能概念的火热，越来越多的云平台客户开始对Gpu透传表现出浓厚的兴趣（对比之下，最开始研究GPU透传的老外们大多是为了能在自己的服务器上玩游戏）。这里将介绍一下我配置GPU透传的过程。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-万恶的nvidia&#34;&gt;一、万恶的Nvidia&lt;/h2&gt;

&lt;p&gt;思来想去，还是把这段话放在最前面，以表示我对Nvidia的痛恨。要是用AMD显卡，这项工作我至少能省两天的工作量。在显卡行业处于垄断地位的Nvidia，不知是出于何种目的，在它的驱动中会禁止显卡在Kvm虚机中工作，所以Gpu Passthrough的很大一项工作就是寻找办法将Nvidia骗过去。顺便套用老外写的一句话，我自己花钱买的显卡，怎么用是我自己的事情，为毛不让我在Kvm虚机中使用？&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;二-显卡型号&#34;&gt;二、显卡型号&lt;/h2&gt;

&lt;p&gt;不是所有的显卡都支持GPU透传，截至到2018年，Nvidia官方文档中，支持Gpu透传的显卡如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/H7Kb12H.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;除此之外，还需要考虑服务器能否支持这些类型的显卡。我这边测试使用的是M2000显卡，仅在浪潮NF5280M4和Dell R730上支持。另外还得注意显卡是全高还是半高。M2000是全高显卡，所以只能插在横向PCI扩展槽位上。&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;三-物理机配置&#34;&gt;三、物理机配置&lt;/h2&gt;

&lt;p&gt;如果显卡和服务器能匹配上，那么在服务器上通过lspci命令可以直接看到显卡（不需要安装驱动）。如果看不到，恭喜你，那就是服务器主板不支持该显卡。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/rNMcuVq.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;之后要做的事情：开启iommu，加载vfio内核，解绑nouveau驱动。至于VT-d什么的，都2018年了，服务器应该都默认开启了吧。网上的参考资料很多，我主要参考了这篇帖子&lt;a href=&#34;https://blog.csdn.net/u010845350/article/details/80599984&#34;&gt;OpenStack Pike版本+KVM+Passthrough+NVIDIA显卡1060透传&lt;/a&gt;。稍微有点不一样的地方在于，考虑到服务器重启后虚机要自动重新绑定显卡，所以得加上开机启动脚本，将显卡解绑的操作在开机后自动做掉。另外一个区别是我用的docker容器，有一些文件夹得做目录映射。这是一个见招拆招的过程，这里不再详述。&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section4&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;四-openstack配置&#34;&gt;四、Openstack配置&lt;/h2&gt;

&lt;p&gt;首先尽量使用P版本，我测试时使用的是M版本，有很多配置不支持，得手工从P版本反合M版本。&lt;/p&gt;

&lt;p&gt;修改Controller的Nova配置如下：
&lt;img src=&#34;https://i.imgur.com/JrQu626.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;修改Compute的Nova配置如下：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Wi69WCI.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;尽量使用高版本的qemu，我测试时用的2.6.0和2.10.0。Libvirt版本是2.0.0。&lt;/p&gt;

&lt;p&gt;Compute安装OVMF
这里有个很傻的地方在于，最新的OVMF包安装之后，引导文件生成于/usr/share/edk2.git/ovmf-x64/目录。而M版本的Nova没有去调用libvirt的配置文件，而是写死了去读取/usr/share/OVMF/目录。所以得手工把文件拷贝到/usr/share/OVMF/目录下。&lt;/p&gt;

&lt;p&gt;设置flavor&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;openstack flavor set m1.large --property &amp;quot;pci_passthrough:alias&amp;quot;=&amp;quot;M2000:1&amp;quot;
openstack flavor set m1.large --property &amp;quot;capabilities:boot_mode&amp;quot;=&amp;quot;uefi&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;镜像打上标签：
img_hide_hypervisor_id=true
hw_firmware_type=uefi&lt;/p&gt;

&lt;p&gt;UEFI镜像制作参考&lt;a href=&#34;http://ju.outofmemory.cn/entry/226516&#34;&gt;KVM 开启UEFI支持&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section5&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;五-虚机安装驱动&#34;&gt;五、虚机安装驱动&lt;/h2&gt;

&lt;p&gt;虚机正确的打开方式如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/0LBaLpl.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后这个设备就是我们透传进去的显卡&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/WxDUkLE.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;安装驱动后跑分结果&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/T25LyWv.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section6&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;六-虚机安装驱动&#34;&gt;六、虚机安装驱动&lt;/h2&gt;

&lt;p&gt;展示一下高端的卡，一个月工资都买不起一块，桑心&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/CCtNpwZ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;动态Attach，Detach都是可以的&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ZaGQFAy.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Win10里的效果（这卡一般不是Windows用的，所以没装驱动）&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/9cCjh3x.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section7&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;七-过程中遇到的坑&#34;&gt;七、过程中遇到的坑&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;服务器不支持GPU卡&lt;/li&gt;
&lt;li&gt;内核不支持GPU卡&lt;/li&gt;
&lt;li&gt;Openstack版本低&lt;/li&gt;
&lt;li&gt;Windows镜像驱动装不上&lt;/li&gt;
&lt;li&gt;Centos镜像引导不起来&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>重新梳理一下我自己的两个web工程</title>
      <link>https://zhanggq.github.io/post/zgq-paas-vue-springboot2/</link>
      <pubDate>Mon, 26 Nov 2018 10:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-paas-vue-springboot2/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;起因是自己的阿里云过期了，之前乱七八糟好多工程拷回本地后，打算梳理一下自己写过Demo工程。这里主要记录一下其中两个web工程。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-mysql&#34;&gt;一、Mysql&lt;/h2&gt;

&lt;p&gt;Mysql是我很多工程的起点，所以这里先讲一下我自己的Mysql。我习惯用自己打的Mysql Docker镜像来启动，镜像的Git路径。基于ubuntu，改了时区之类的，通过Supervisor启动Mysql。之后通过下面的命令启动容器，mysql端口映射到本地的13306端口，也就是其他容器可以通过-h 127.0.0.1 -P13306访问。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --privileged -tid -e &amp;quot;container=docker&amp;quot; -h mysql --name=mysql --restart=always -v /home/zgq/lib/mysql:/var/lib/mysql -p 13306:3306 --stop-signal=RTMIN+3 mariadb.amaze:v10.1 /usr/bin/supervisord
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;二-amaze-go&#34;&gt;二、Amaze + Go&lt;/h2&gt;

&lt;p&gt;之前的帖子中提到过，自己写着玩的一个Web工程，前端是Amaze UI，后端是Go，前后端通过Ajax交互。后端通过定时任务（凌晨执行）从网易抓出各支股票收盘的数据，并写入Mysql，写入完成后自动备份Mysql库。整个前后端放入了Docker容器内，通过-h 127.0.0.1 -P13306访问本机上的Mysql容器。目前还缺个Python的回测程序，待开发 ……&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/T7nqP6c.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;三-vue-srping-boot&#34;&gt;三、Vue + Srping boot&lt;/h2&gt;

&lt;p&gt;公司一个项目需要，做了一下调研，并写了个Demo。前端是iview，后端是Spring boot，前后端分离。部署的时候花了不少时间，后端很简单，java -jar跑起来就行。而前端有点麻烦，因为涉及到反向代理配置。先后尝试了三种静态页面的部署工具，Caddy、Apache、Nginx，最后发现还是Nginx好使。最后同上，也是打了Docker镜像。顺便提一下，这个镜像属于偷懒性质，正确的做法应该是From Nginx镜像去打前端的镜像，From JDK镜像去打后端的镜像。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/rxhpKco.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Openstack Horizon二次开发</title>
      <link>https://zhanggq.github.io/post/zgq-paas-openstack-dashboard/</link>
      <pubDate>Tue, 06 Nov 2018 10:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-paas-openstack-dashboard/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;最近碰到个项目，需要在Horizon基础上开发增加一些小功能，这里将简单介绍一下Horizon的开发过程。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-horizon介绍&#34;&gt;一、Horizon介绍&lt;/h2&gt;

&lt;p&gt;Horizon是基于django webframework开发的标准的Python wsgi程序，django的设计专注于代码的高度可重用，信奉DRY原则，一切面向对象，而Horizon可以说高度match了django的设计风格。网站程序基本有三部分组成，业务逻辑代码(Python)，静态文件(js/css)，模板(Python中的jinja,mako,nodejs中有jade)， 用户向webserver发起请求之后，server程序找到当前url对应的模板，填充模板变量(输出成字符串形式的html源码),返回给浏览器，浏览器渲染页面。一般模板语言都有继承(extend),插入(include)等特性，来提高页面的复用率。&lt;/p&gt;

&lt;p&gt;Horizon做得就更彻底一些，它将页面上所有元素模块化，网页中一些常见元素，表单，表格，标签页，全部封装成Python类，每个组件有自己对应的一小块html模板(templates)。当渲染整个页面的时候,Horizon先找到当前页面有多少组件，将各个组件分别进行渲染变成一段html片段，最后拼装成一 个完整的html页面，返回浏览器。&lt;/p&gt;

&lt;p&gt;一个Dashboard（在django里称为app）通常情况下由四个组件组成，分别为panel、tab、table和view。其中，panel、tab和table用于导航的，真正展示数据的在view里面。它们之间的关系是panel包含tab，tab包含table，view包含table或者tab。&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;二-研发环境搭建&#34;&gt;二、研发环境搭建&lt;/h2&gt;

&lt;p&gt;可以在已经部署好的openstack环境中直接修改/usr/lib/python2.7/site-packages/openstack_dashboard/目录下的代码，之后重启httpd服务调试，也可以通过&lt;a href=&#34;https://docs.openstack.org/horizon/latest/contributor/quickstart.html&#34;&gt;官网Quick start&lt;/a&gt;中的方式，将源码下载到本地，然后通过tox工具进行调试。这里将描述一下第二种方式的操作过程：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@vultr ~]# yum -y install epel-release
[root@vultr ~]# yum install gcc git-core python-devel python-virtualenv openssl-devel libffi-devel which
[root@vultr ~]# yum -y install python-pip
[root@vultr ~]# pip install django
[root@vultr ~]# pip install tox
[root@vultr ~]# mkdir /root/python; cd /root/python;
[root@vultr python]# git clone https://github.com/openstack/horizon.git
[root@vultr python]# cd horizon
[root@vultr horizon]# git branch -r
  origin/HEAD -&amp;gt; origin/master
  origin/master
  origin/stable/ocata
  origin/stable/pike
  origin/stable/queens
  origin/stable/rocky
[root@vultr horizon]# git checkout -b origin/stable/pike
[root@vultr horizon]# cp openstack_dashboard/local/local_settings.py.example openstack_dashboard/local/local_settings.py
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后修改local_settings.py文件的下列参数，其中ALLOWED_HOSTS参数是为了能访问Dashboard而设置成*，其它4个参数目的是对接已有环境的Keystone，否则无法正常登入Dashboard。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ALLOWED_HOSTS = [&#39;*&#39;]
SECRET_KEY=&#39;atUWYfUG0GOELk0aNS2a5fjQxVC3Rc8z7Qdl8LJc&#39;
OPENSTACK_HOST = &amp;quot;172.16.170.129&amp;quot;
OPENSTACK_KEYSTONE_URL = &amp;quot;http://%s:15000/v2.0&amp;quot; % OPENSTACK_HOST
OPENSTACK_ENDPOINT_TYPE = &amp;quot;internalURL&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后通过tox启动Dashboard，期间会有较长的pip install过程，根据网络状况不同，安装时间也会不同，国内用户等待的时间会比较漫长。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@hcs1 horizon]# tox -e runserver -- 172.16.33.1:8000
runserver create: /home/zgq/python/horizon/.tox/runserver
runserver installdeps: -r/home/zgq/python/horizon/requirements.txt, -r/home/zgq/python/horizon/test-requirements.txt 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动完成之后可以通过浏览器登入Dashboard&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/9dDwR6P.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;三-创建自己的panel&#34;&gt;三、创建自己的Panel&lt;/h2&gt;

&lt;p&gt;参考&lt;a href=&#34;https://docs.openstack.org/horizon/latest/contributor/tutorials/dashboard.html&#34;&gt;官网&lt;/a&gt;教程&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@hcs1 horizon]# cd /home/zgq/python/horizon
[root@hcs1 horizon]# mkdir -p openstack_dashboard/dashboards/mydashboard/mypanel
[root@hcs1 horizon]# tox -e manage -- startdash mydashboard \
  --target openstack_dashboard/dashboards/mydashboard
[root@hcs1 horizon]# tox -e manage -- startpanel mypanel \
  --dashboard=openstack_dashboard.dashboards.mydashboard \
  --target=openstack_dashboard/dashboards/mydashboard/mypanel
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后删掉暂时用不上的，只留下需要的文件，目录结构如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/h2lZHw7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;修改dashboard.py文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/i8996jn.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;修改mypanel/panel.py文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/V4BZ0lF.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;修改mypanel/tables.py文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/4E0yu7M.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;修改mypanel/tabs.py文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/j9RN3fk.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;修改mypanel/views.py文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/VXuO5C2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;修改mypanel/urls.py文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/TlmsZ2G.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;修改mypanel/templates/mypanel/index.html文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/oHimiJy.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最后创建并修改/home/zgq/python/horizon/openstack_dashboard/enabled/_50_mydashboard.py文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/3FrUeVB.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;之后重启tox后再次登入dashboard，新增的界面已经加上了&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/QhsVgX0.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section4&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;四-创建一个复杂的动作&#34;&gt;四、创建一个复杂的动作&lt;/h2&gt;

&lt;p&gt;参考&lt;a href=&#34;https://docs.openstack.org/horizon/latest/contributor/tutorials/table_actions.html&#34;&gt;官网&lt;/a&gt;教程&lt;/p&gt;

&lt;p&gt;因为是在上一步新增的界面上增加Action，所以不需要修改dashboard.py和panel.py文件。新增form.py文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/2UjtGvZ.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;之后修改table.py文件，增加Action&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/C3QRjv2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;修改views.py文件，为Action创建views视图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/p0wk9VY.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;修改url.py文件，添加url链接&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/kqb07PK.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最近添加Action所用的html&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/RIvZtFB.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最后运行界面如图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/gDpnaIM.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Ujq6Yix.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以上&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>mysql高可用集群搭建（上篇）</title>
      <link>https://zhanggq.github.io/post/zgq-paas-mysql/</link>
      <pubDate>Mon, 05 Nov 2018 10:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-paas-mysql/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;众所周知，Mysql Galera Cluster为数据库提供了高一致性高可用的方案。但从实际商用的角度来看，仅仅依靠Galera插件并不能算是一个完整的Mysql高可用方案。一个完整的高可用方案还要考虑VIP、备份、灾难恢复等。这里将介绍我自己搭建的Mysql+Haproxy+Keepalived+Zookeeper+contrail cmon的方案。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-前置准备&#34;&gt;一、前置准备&lt;/h2&gt;

&lt;p&gt;首先准备一个mysql的docker容器（或者裸金属服务器上直接安装），并且在容器中安装了Haproxy、Keepalived、Zookeeper、contrail cmon等服务。另外还需要单独挂载硬盘给mysql的/var/lib/mysql目录使用。&lt;/p&gt;

&lt;p&gt;其它前置条件
1. 安装docker
2. 下载好容器镜像
3. 关闭防火墙等&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl stop firewalld &amp;amp;&amp;amp; systemctl disable firewalld
setenforce 0
sed -i &amp;quot;s/^SELINUX=enforcing/SELINUX=disabled/g&amp;quot; /etc/sysconfig/selinux 
sed -i &amp;quot;s/^SELINUX=enforcing/SELINUX=disabled/g&amp;quot; /etc/selinux/config 
sed -i &amp;quot;s/^SELINUX=permissive/SELINUX=disabled/g&amp;quot; /etc/sysconfig/selinux 
sed -i &amp;quot;s/^SELINUX=permissive/SELINUX=disabled/g&amp;quot; /etc/selinux/config
&lt;/code&gt;&lt;/pre&gt;

&lt;ol&gt;
&lt;li&gt;&lt;p&gt;相关内核
自己的内核加载脚本&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./ebtables.modules 
./iptables.modules 
./ip6tables.modules
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/KUKztx4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;三容器节点互信&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;容器启动命令&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;docker run --privileged -tid -e &amp;quot;container=docker&amp;quot; -h mysql1 --name=mysql --restart=always --net=host -p 10022:22 --stop-signal=RTMIN+3 docker-registry:5000/library/mysql:v1.3 /usr/sbin/init
docker run --privileged -tid -e &amp;quot;container=docker&amp;quot; -h mysql2 --name=mysql --restart=always --net=host -p 10022:22 --stop-signal=RTMIN+3 docker-registry:5000/library/mysql:v1.3 /usr/sbin/init
docker run --privileged -tid -e &amp;quot;container=docker&amp;quot; -h mysql3 --name=mysql --restart=always --net=host -p 10022:22 --stop-signal=RTMIN+3 docker-registry:5000/library/mysql:v1.3 /usr/sbin/init

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;二-配置mysql&#34;&gt;二、配置mysql&lt;/h2&gt;

&lt;p&gt;三台节点配置mysql.cnf&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/3afy8Y6.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/Y19vjpp.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;三-配置zookeeper&#34;&gt;三、配置zookeeper&lt;/h2&gt;

&lt;p&gt;三台Server节点配置zookeeper&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/STqgWv4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section4&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;四-配置keepalived&#34;&gt;四、配置keepalived&lt;/h2&gt;

&lt;p&gt;三台Server节点配置keepalived&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/XkRdhe9.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/F8j7kTq.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section5&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;五-配置haproxy&#34;&gt;五、配置Haproxy&lt;/h2&gt;

&lt;p&gt;三台Server节点配置Haproxy&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/vHMK73D.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/yokHP8d.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section6&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;六-服务启动&#34;&gt;六、服务启动&lt;/h2&gt;

&lt;p&gt;第一个节点启动&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;service mysql start --wsrep-new-cluster
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;其它两个节点启动及集群检查&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;service mysql start
mysql -uroot -p123456 -e &#39;show status like &amp;quot;wsrep%&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动zookeeper&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;service zookeeper start
service zookeeper status
/sbin/chkconfig zookeeper on
chkconfig --list
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动haproxy&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl start haproxy 
systemctl status haproxy 
systemctl enable haproxy 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动keepalived&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl start keepalived 
systemctl status keepalived 
systemctl enable keepalived 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;检查vip是否有效&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql -uroot -p123456 -h 172.16.165.180 -P3306
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;section7&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;七-配置cmon服务&#34;&gt;七、配置cmon服务&lt;/h2&gt;

&lt;p&gt;mysql集群启动正常之后，开始配置cmon。contrail-cmon作用是在重启后，通过contrail-cmon-monitor.sh和contrail-bootstrap-galera.sh脚本将mysql集群恢复。其过程首先是用“service mysql start &amp;ndash;wsrep_recover”启动mysql，找出gitd最大的，也就是数据最新的mysql节点，启动。再依次拉起其它两个节点。&lt;/p&gt;

&lt;p&gt;首先创建cmon用户&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mysql -uroot -p123456  -e &amp;quot;create database cmon character set utf8 collate utf8_bin;&amp;quot;
mysql -uroot -p123456  -e &amp;quot;CREATE SCHEMA IF NOT EXISTS cmon;&amp;quot;
mysql -uroot -p123456  -e &amp;quot;grant all privileges on *.* to cmon@localhost identified by &#39;cmon&#39; with grant option;&amp;quot;
mysql -uroot -p123456  -e &amp;quot;grant all privileges on *.* to &#39;cmon&#39;@&#39;%&#39; identified by &#39;cmon&#39; with grant option;&amp;quot;
mysql -uroot -p123456  -e &amp;quot;flush privileges;&amp;quot;
mysql -uroot -p123456 &amp;lt; /usr/share/cmon/cmon_db.sql
mysql -uroot -p123456 &amp;lt; /usr/share/cmon/cmon_data.sql
mysql -uroot -p123456 -e &amp;quot;use cmon; insert into cluster(type) VALUES (&#39;galera&#39;)&amp;quot;
mysql -ucmon -pcmon -h 172.16.165.180  cmon
mysql -ucmon -pcmon -h 172.16.165.162 -p 3306 cmon
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;配置cmon&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/IryLvyJ.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/jAWkgnv.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;配置完成后手工修改一下contrail-cmon-monitor.sh和contrail-bootstrap-galera.sh脚本，由于篇幅问题，整理不再详述。之后启动cmon，观察日志。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl status contrail-hamon.service
systemctl restart contrail-hamon.service
systemctl enable contrail-hamon.service
systemctl stop contrail-hamon.service
/opt/contrail/bin                                 (cmon 启动脚本)
tail -f /var/log/contrail/ha/cmon-monitor.log     (cmon 日志)
tail -f /var/log/galera-bootstrap.log             (cmon 启动mysql 日志)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;section8&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;八-数据库备份&#34;&gt;八、数据库备份&lt;/h2&gt;

&lt;p&gt;可以采用cron定时任务方式，定时执行dump脚本，并且通过目录映射方式，将备份的sql压缩文件存放在物理服务器上。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/rqm7Txb.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Consul的不专业用法介绍</title>
      <link>https://zhanggq.github.io/post/zgq-paas-consul/</link>
      <pubDate>Mon, 22 Oct 2018 10:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-paas-consul/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;Consul，一个做服务发现的框架，目前听说常用于微服务架构中的服务发现，而本文主要用它的Health Checking功能来做一个简单的网卡检测。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-consul&#34;&gt;一、Consul&lt;/h2&gt;

&lt;p&gt;什么是Consul，&lt;a href=&#34;https://www.consul.io/intro/index.html&#34;&gt;官网&lt;/a&gt;中介绍到，它是一个全功能的控制面，主要提供了以下几个功能：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Service Discovery 服务发现 – Consul通过DNS或者HTTP接口提供服务注册功能；&lt;/li&gt;
&lt;li&gt;Health Checking 健康检查 – Consul可以通过配置制定监控检查规则；&lt;/li&gt;
&lt;li&gt;KV Store key/value存储 – 上层应用可以将Consul的KV存储用于不同的使用场景，动态配置、特征标记等等；&lt;/li&gt;
&lt;li&gt;Secure Service Communication 服务通信安全 – Consul可以生成和分发TLS证书，以建立相互的TLS连接，控制是否允许通信，用于代替复杂的防火墙策略；&lt;/li&gt;
&lt;li&gt;Multi Datacenter 多数据中心 – Consul支持多数据中心，无需复杂的配置，即可支持任意数量的区域。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;这里，本文只介绍Consul一个偏门的用法，用它的Health Checking功能来做一个简单的网卡检测。&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;二-环境&#34;&gt;二、环境&lt;/h2&gt;

&lt;p&gt;本次模拟环境共五台服务机，服务器集群如下图所示，本次测试的目的是通过三个Consul集群来监控所有服务器的三个网卡状态。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/toMarEh.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;另外，为了防止各种意外问题，先把防火墙之类的都停掉&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl stop firewalld &amp;amp;&amp;amp; systemctl disable firewalld
setenforce 0
sed -i &amp;quot;s/^SELINUX=enforcing/SELINUX=disabled/g&amp;quot; /etc/sysconfig/selinux 
sed -i &amp;quot;s/^SELINUX=enforcing/SELINUX=disabled/g&amp;quot; /etc/selinux/config 
sed -i &amp;quot;s/^SELINUX=permissive/SELINUX=disabled/g&amp;quot; /etc/sysconfig/selinux 
sed -i &amp;quot;s/^SELINUX=permissive/SELINUX=disabled/g&amp;quot; /etc/selinux/config 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;三-eth0集群配置&#34;&gt;三、eth0集群配置&lt;/h2&gt;

&lt;p&gt;三台Server节点首先增加如下服务配置文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/RXJPPxg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;接着在/etc/consul.d/目录下增加如下配置文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/e4KjVZI.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;三个节点配置完成后，启动consul-mgmt.service服务，之后检查集群状态，看到状态都是alive，且选举出来了Leader，那就说明集群正常了&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/LLxnPnl.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;登入&lt;a href=&#34;http://172.16.54.148:8500/ui/mgmt/nodes检查&#34;&gt;http://172.16.54.148:8500/ui/mgmt/nodes检查&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/pa7gsgb.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section4&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;四-其它两个集群配置&#34;&gt;四、其它两个集群配置&lt;/h2&gt;

&lt;p&gt;同理，三台Server节点增加如下服务配置文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/kRHYyVF.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;在/etc/consul.d/目录下增加如下配置文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Ns7K8hF.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/JITYctb.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;三个节点配置完成后，启动consul-data.service，consul-storage.service服务，之后检查集群状态&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/4leZL66.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/wC2YT3p.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/2S5e3Lh.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section5&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;五-agent配置&#34;&gt;五、Agent配置&lt;/h2&gt;

&lt;p&gt;在Agent增加如下配置，将Agent加入节点&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/xyVrIgf.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/zrSwArN.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section6&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;六-down机测试&#34;&gt;六、Down机测试&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Down掉Server节点后如图
&lt;img src=&#34;https://i.imgur.com/LPqqvWd.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Down掉Agent节点后如图
&lt;img src=&#34;https://i.imgur.com/blXpdqg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;section7&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;七-配合zabbix监控&#34;&gt;七、配合Zabbix监控&lt;/h2&gt;

&lt;p&gt;Consul监控集群搭建完成后，如何将具体的告警展现出来呢？ 这里使用zabbix配合进行监控告警。具体zabbix集群搭建过程这里省略，简单讲一下zabbix监控项配置。&lt;/p&gt;

&lt;p&gt;先创建discovery，用于检查consul的配置项，也就是说用来发现监控了那些网卡/IP&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/OlJ6dZ8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;再创建三个Item prototypes，用于接收、存放Agent反馈回来的网卡信息&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Jls1byz.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/AlcYeuK.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;再创建三个Item，存放每个网卡的检查结果&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/e1EayZB.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/zqaHdcx.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;监控结果如图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/8jk3s3P.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>来聊聊云/平台/微服务吧</title>
      <link>https://zhanggq.github.io/post/zgq-paas-cloud-microservice/</link>
      <pubDate>Mon, 02 Jul 2018 10:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-paas-cloud-microservice/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;嗯~ o(&lt;em&gt;￣▽￣&lt;/em&gt;)o，上一篇帖子中我还在写我想研究Spring Cloud，当写这个贴子的时候我就已经想抛弃它了，那么在抛弃之前先来聊聊吧。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-云&#34;&gt;一、云&lt;/h2&gt;

&lt;p&gt;什么是云，我的理解云就是通过虚拟化的方式，把所有的资源整合起来统一管理调度使用。根据权威人士定义，云有三种服务模式：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SaaS 【software as a service】 软件即服务 – 用户通过网络租用基于Web的软件使用。（虚拟桌面，在线游戏等）&lt;/li&gt;
&lt;li&gt;PaaS 【platform as a service】 平台即服务 – 指将软件研发的平台作为一种服务。(数据库，开发工具，web服务器，软件运行环境等)&lt;/li&gt;
&lt;li&gt;IaaS 【infrastructure as a service】 基础架构即服务 – 用户通过网络直接访问底层的计算、存储和网络资源。(虚拟机，服务器，存储空间，网络带宽等)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;SaaS不熟，剩下两个可以举个例子，Openstack和SDN都属于IaaS，因为它们既能提供虚拟机，也能提供虚拟防火墙等；而Kubernets则属于PaaS，只提供容器化的虚机，不太关注网络服务。&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;二-平台&#34;&gt;二、平台&lt;/h2&gt;

&lt;p&gt;接着来聊平台。从广义上来说，能提供服务的就是平台，比如我们可以说Openstack平台，k8s平台这样的。但平台与平台之前肯定是有区别的，或者说提供的服务的目标不太一样。Openstack/SDN这样的平台，其主要目的是为了给客户提供虚拟化的机器/虚拟化的网络设备等等，相比之下它们更加全面，也更加传统。所以可以作为企业/运营商的一种整体解决方案，代替专线、防火墙、负载均衡、交换机等硬件设备。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/KfQHigj.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/BbyxX9Z.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;k8s的基础是Docker，Docker这种虚拟化技术由于内核不是独立的，所以在Linux服务器上无法运行windows容器（Windows服务器上可以运行Linux容器和Windows容器）。而它的优势则是更加轻量，更快，可以当成一个单纯的服务来使用。容器化代表了“高强度工作负载&amp;rdquo;、”卓越的性能”、”原生的、一致的体验“等等，裸金属+容器也是目前的趋势，更加倾向于互联网等高新技术公司。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/cBsDVsm.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;三-微服务&#34;&gt;三、微服务&lt;/h2&gt;

&lt;p&gt;然后继续聊微服务。其实对传统公司来说，只需要云服务，有或者没有微服务，影响都不大。但容器化还是需要的，毕竟容器化之后在服务升级/扩展方面会有很大提升，所以甚至出现了k8s上再搭建Openstack/SDN这样的组合，既有容器化的优势，又有全面的虚拟化解决方案。而对于互联网公司来说，微服务的好处和前后端分离一样，就是能够提升开发/运维效率。&lt;/p&gt;

&lt;p&gt;目前主流的三个微服务框架：Spring Cloud，Dubbo，Istio，前者是Java的，而Istio目前是基于K8s的。假象一下，如果单纯使用Spring Cloud，在某台服务器上部署应用，然后自动发现/自动路由/自动化运维/插件式管理等等，看上去很美好，但有个问题就是部署还是传统的方式：登上服务器，部署启动。按照微服务的设计，一般情况下需要启动的服务会有很多，这时候部署就成了一件很痛苦的时候。如果要解决这个问题，那么就又回到了容器化之路上来了，而走到了容器化之路上，不好意思，这里是k8s的地盘 …… 。所以，似乎还是一上来就与k8s绑定的Istio要强一丢丢。当然了，如果用k8s + 自己写compose来管理容器，这样也是可以的，毕竟据说Spring Cloud在纯java项目上，服务间的交换效率还是要比Istio高一些的。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Vue &#43; Springboot开发过程中遇到的坑</title>
      <link>https://zhanggq.github.io/post/zgq-web-vue-springboot/</link>
      <pubDate>Fri, 29 Jun 2018 10:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-web-vue-springboot/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;最近在学习Vue+Springboot，目的是做一个数据处理工具，并且为将来学习Spring Cloud打个基础。这里记录一下开发过程中遇到的坑，持续更新中 ……&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-开发环境&#34;&gt;一、开发环境&lt;/h2&gt;

&lt;p&gt;开发环境或者说架构如图。首先Vue和Springboot是放在两个不同的工程里研发的，传说中的前后端分离。调试时可以分开调试，前端用Chrome调试，在Vue的data return里造好数据就行；而后端通过Postman调试Api接口及数据库。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/prLjdEh.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;二-跨域问题&#34;&gt;二、跨域问题&lt;/h2&gt;

&lt;p&gt;上述架构中遇到的第一个问题就是前后端分离的问题，在上面的图中很清楚的看到，Vue在8080端口，而Springboot在8082端口，所以当Vue发送Rest消息给服务端时，会发生跨域。跨域问题有很多解决方面，我用过两种方式：&lt;/p&gt;

&lt;p&gt;第一种，Vue的config/prod.env.js和dev.env.js中配置如下，还是从8080端口将消息发往8082端口，如图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/oibRZ2b.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后在服务端增加以下代码：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/xxw2OW7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;尝试登入界面，发现Login消息的交互已经正常了&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/7H3OQMc.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;但这种方法得修改服务端代码，而且每个接口都得改，所以比较繁琐，所以推荐第二张方式。&lt;/p&gt;

&lt;p&gt;第二种，通过Vue的转发来解决跨域。先删除服务端增加的代码，同时将prod.env.js和dev.env.js的API_ROOT参数去掉，并在conf/index.js中增加转发配置&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/9GWb3ry.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;尝试登入界面，发现Login消息的交互和之前不一样，发送接口变成了8080，所以也就没有跨域问题了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/B3RBrre.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;三-accessdeniedhandler无法被调用&#34;&gt;三、AccessDeniedHandler无法被调用&lt;/h2&gt;

&lt;p&gt;碰到的第二个问题是AccessDeniedHandler无法被调用，这个问题的来源于重启后端服务后，发现在前端点击任意连接，都会重定向到localhost:8082/login_p。之后尝试在AccessDecisionManager中抛出AccessDeniedException异常，并在AccessDeniedHandler加入Response消息中加上错误原因，但AccessDeniedHandler一直无法捕获到AccessDeniedException异常，在这篇文章&lt;a href=&#34;https://blog.csdn.net/jmppok/article/details/44828829&#34;&gt;Spring security AccessDeniedHandler 不被调用&lt;/a&gt;&lt;/a&gt;中大概明白了原因，总之如果authentication是anonymous的场景，在ExceptionTranslationFilter会被直接重定向到login。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/G7XaeEr.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/d26YGSe.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;所以当前的做法是在Vue的res中判断，如果是401错误，则打印错误，并清掉Cookies，最后router push到/login页面。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>【纯水贴】大数据分析应用于股票交易的尝试</title>
      <link>https://zhanggq.github.io/post/zgq-finance-tushare/</link>
      <pubDate>Wed, 13 Jun 2018 10:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-finance-tushare/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;前不久写了一个大数据股票分析模型，筛了一些股票出来，然后挑了一个卖相好的，没想到中奖了，特此来水一贴&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-第一轮测试&#34;&gt;一、第一轮测试&lt;/h2&gt;

&lt;p&gt;于5月24日买入，于6月12日卖出。首先这一段时间创业板的走势是这样的&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/67f0KWX.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;我的买入点和卖出&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/s4TRp0C.jpg&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/THlcM4V.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;从结果上看，这波操作还是很不错的，心满意足的退场了。 等有时间再搞第二轮测试吧。&lt;/p&gt;

&lt;p&gt;PS. 今天是6月19日，后怕啊，所以不能贪，达到预定的点后立即撤&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/uCC8rVr.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>kubernetes对接Ceph</title>
      <link>https://zhanggq.github.io/post/zgq-paas-k8s-ceph/</link>
      <pubDate>Fri, 25 May 2018 10:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-paas-k8s-ceph/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;总结一下kubernetes对接Ceph过程中遇到的问题，持续更新中 ……&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-环境准备&#34;&gt;一、环境准备&lt;/h2&gt;

&lt;p&gt;实验环境有点特殊，先部署了一套超融合环境，openstack(M版)+ceph(L版)，且全部容器化。之后在openstack平台上起了3台Centos7.1虚机，并在这3台虚机上部署了kubernete 1.9.3版本。
&lt;img src=&#34;https://i.imgur.com/3yThBfx.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/kduoW6T.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;二-手工创建image&#34;&gt;二、手工创建Image&lt;/h2&gt;

&lt;p&gt;找了一些资料，讲的都不是很全，所以这里先讲一下我的理解。这一步操作的目的是在ceph上创建一个块存储，然后通过内核将这个块存储映射给k8s所在的虚机，最后k8s将Pod建在这个块存储上。&lt;/p&gt;

&lt;p&gt;所以第一步得把块存储创建出来，在ceph上执行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rbd create foo2 --size 1024
rbd feature disable foo exclusive-lock, object-map, fast-diff, deep-flatten
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后在物理机上加载内核（Pod将起在的那台物理机上，注意是物理机，不是Node，不是kvm，也不是docker）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo modprobe rbd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;进入Pod将起的Node（或者说kvm虚机），然后把ceph任意一个osd的/etc/ceph目录拷过来，并安装ceph（yum install ceph或其它方式），最后执行map映射&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rbd map foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;检查一下结果&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ndGhzdF.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;之后执行一下格式化&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mkfs.ext4 -m0 /dev/rbd0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;三-创建pod&#34;&gt;三、创建Pod&lt;/h2&gt;

&lt;p&gt;上一步结束之后，等于已经在ceph上挂了一块盘给了k8s的某个Node节点，这一步就是要在该节点上创建Pod并mount这个盘。&lt;/p&gt;

&lt;p&gt;先给这个Node打个tag&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl label nodes k8s2 zone=k8s2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从github上下载官方测试用例&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/kubernetes/examples.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改 xxxx/cephJoint/examples/staging/volumes/rbd/rbd.yaml文件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apiVersion: v1 
kind: Pod 
metadata: 
  name: busybox
  namespace: default
spec:
  nodeSelector:
    zone: k8s2
  containers:
  - name: busybox
    image: registry.cn-hangzhou.aliyuncs.com/yanfulei/busybox:latest
    volumeMounts:
      - name: rbdpd
        mountPath: /mnt/rbd
    command:
      - sleep
      - &amp;quot;3600&amp;quot;
    imagePullPolicy: IfNotPresent
  restartPolicy: Always
  volumes:
    - name: rbdpd
      rbd:
        monitors:
        - &#39;172.16.170.130:6789&#39;
        - &#39;172.16.170.131:6789&#39;
        - &#39;172.16.170.132:6789&#39;
        pool: rbd
        image: foo
        fsType: ext4
        readOnly: true
        user: admin
        keyring: /etc/ceph/ceph.client.admin.keyring
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动Pod&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl create -f rbd.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;检查一下启动结果，大概要2分钟左右吧，取决于你前面创建的ceph块有多大，k8s会将这块盘格式化一遍，需要一些时间。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/cQVlhso.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section4&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;四-问题与思考&#34;&gt;四、问题与思考&lt;/h2&gt;

&lt;p&gt;上述的挂载方式还存在一个很大的问题，简单来试一下，新创建了一个centos的pod如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/HjKyh02.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/m1j3MRx.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后再通过kubectl delete 删掉之后，我们检查一下设备，就会发现挂载到k8s2这个node上的盘已经被回收了。再次用相同的命令启动，会发现挂载失败的错误。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/mK0107Y.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;所以说这种对接场景下，Ceph RBD存储的生命周期和Pod是一致的，Pod被删了，数据也没了。所以在生产环境中需要有持久化的对接方式。&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section5&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;五-使用pv和pvc挂载pod&#34;&gt;五、使用PV和PVC挂载Pod&lt;/h2&gt;

&lt;p&gt;具体过程不想发了，yaml到处都是，大致过程就是建一个PV，建一个PVC，最后Pod建在PVC上面。当Pod删掉之后，PV和PVC都在。重建Pod之后，容器里挂的盘依然不变，甚至容器从Centos换成ubuntu等，盘还是那个盘，盘里的东西还是原来的东西。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/wodmRYR.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section6&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;六-使用kubernetes-storageclass&#34;&gt;六、使用Kubernetes StorageClass&lt;/h2&gt;

&lt;p&gt;解决了持久化问题之后，又有一个新的需要思考的问题，生产环境中不可能手工先在ceph上建一个RBD块，再通过内核mount给Node吧，那该怎么让k8s自动调度分配存储空间？这时候就需要使用k8s的StorageClass功能了。&lt;/p&gt;

&lt;p&gt;先创建一个StorageClass&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@k8s1 rbd]# cat rbd-storage-class.yaml
kind: StorageClass
apiVersion: storage.k8s.io/v1
metadata:
  name: rbd
provisioner: kubernetes.io/rbd
parameters:
  monitors: 172.16.170.130:6789
  adminId: admin
  adminSecretName: ceph-secret
  adminSecretNamespace: default
  pool: rbd
  userId: admin
  userSecretName: ceph-secret
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再创建一个PV&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@k8s1 rbd]# cat rbd-dyn-pv-claim.yaml
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: ceph-rbd-dyn-pv-claim
spec:
  accessModes:
    - ReadWriteOnce
  storageClassName: rbd
  resources:
    requests:
      storage: 1Gi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最后创建一个Pod&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@k8s1 rbd]# cat rbd-dyn-pvc-pod1.yaml
apiVersion: v1
kind: Pod
metadata:
  labels:
    test: rbd-dyn-pvc-pod
  name: ceph-rbd-dyn-pv-pod1
spec:
  containers:
  - name: ceph-rbd-dyn-pv-busybox1
    image: registry.cn-hangzhou.aliyuncs.com/yanfulei/busybox
    command: [&amp;quot;sleep&amp;quot;, &amp;quot;60000&amp;quot;]
    volumeMounts:
    - name: ceph-dyn-rbd-vol1
      mountPath: /mnt/ceph-dyn-rbd-pvc/busybox
      readOnly: false
  volumes:
  - name: ceph-dyn-rbd-vol1
    persistentVolumeClaim:
      claimName: ceph-rbd-dyn-pv-claim
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;这时候就不再依赖nodeSelector调度了，通过kubectl describe看到Pod已经被调度到了k8s3上&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/7omvLeD.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;之后登入k8s3节点看一下容器磁盘，发现已经成功挂了一块1G的盘给Pod&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Lzz6s95.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Interllij IDEA使用教程</title>
      <link>https://zhanggq.github.io/post/zgq-web-idea/</link>
      <pubDate>Tue, 08 May 2018 10:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-web-idea/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;总结一下自己的Interllij IDEA使用过程中遇到的各种场景和问题，持续更新中 ……&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-配置maven&#34;&gt;一、配置maven&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;官方下载maven包，解压至D:\java\apache-maven-3.5.3\conf&lt;/li&gt;
&lt;li&gt;新建maven包存放路径D:\java\m2\repository&lt;/li&gt;
&lt;li&gt;修改配置D:\java\apache-maven-3.5.3\conf\settings.xml&lt;/li&gt;
&lt;li&gt;增加环境变量

&lt;ul&gt;
&lt;li&gt;M2_HOME D:\java\apache-maven-3.5.3&lt;/li&gt;
&lt;li&gt;Path D:\java\apache-maven-3.5.3\bin&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Interllij IDEA的Maven配置&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/iLWAn0R.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;二-导入maven工程&#34;&gt;二、导入Maven工程&lt;/h2&gt;

&lt;p&gt;选择Import工程&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/wVCookl.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;选择Maven&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/6YP2CSG.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;注意确认一下Maven的配置是否正确&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/CixDLXO.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;其它的都是下一步即可&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;三-启动工程&#34;&gt;三、启动工程&lt;/h2&gt;

&lt;p&gt;增加一个Spring Boot的Run config，配置好Main class即可&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/x2Q6yjo.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>VS code使用教程</title>
      <link>https://zhanggq.github.io/post/zgq-web-vscode/</link>
      <pubDate>Wed, 25 Apr 2018 10:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-web-vscode/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;总结一下自己的VS code使用过程中遇到的各种场景和问题，持续更新中 ……&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-安装各种扩展&#34;&gt;一、安装各种扩展&lt;/h2&gt;

&lt;p&gt;VS Code支持各种插件扩展，点击&amp;rdquo;查看&amp;rdquo; -&amp;gt; &amp;ldquo;扩展&amp;rdquo;进入，在商店中查找自己想要的扩展并安装&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/KTVxyEc.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;二-debug&#34;&gt;二、Debug&lt;/h2&gt;

&lt;p&gt;进入调试界面，点击&amp;rdquo;添加配置 XXX&amp;rdquo;，之后选择&amp;rdquo;Chrome&amp;rdquo;，生成一个launch.json文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/geTs8vG.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/qZgMmp2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后在launch.json增加配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;version&amp;quot;: &amp;quot;0.2.0&amp;quot;,
&amp;quot;configurations&amp;quot;: [
    {
        &amp;quot;name&amp;quot;: &amp;quot;启动 Chrome 并打开 localhost&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;chrome&amp;quot;,
        &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
        &amp;quot;file&amp;quot;: &amp;quot;${workspaceFolder}/index.html&amp;quot;,
        //&amp;quot;url&amp;quot;:&amp;quot;http://localhost:8080&amp;quot;,
        //&amp;quot;runtimeExecutable&amp;quot;: &amp;quot;C:\\Users\\ZGQ\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe&amp;quot;,
        &amp;quot;sourceMaps&amp;quot;: true,
        &amp;quot;webRoot&amp;quot;: &amp;quot;${workspaceFolder}&amp;quot;,
        //&amp;quot;preLaunchTask&amp;quot;: &amp;quot;build&amp;quot;,
        //&amp;quot;userDataDir&amp;quot;: &amp;quot;${tmpdir}&amp;quot;,
        &amp;quot;port&amp;quot;: 9222
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后在代码中打好断点，就可以开始调试了&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;三-工作区&#34;&gt;三、工作区&lt;/h2&gt;

&lt;p&gt;打开任意一个文件夹，然后在任意空白处，选择将文件夹添加到工作区，此时再选择另一个想加入该工作区的文件夹，确定之后就形成了一个包含两个JS工程的工作区。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/qIMz8vl.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/WcVjHYv.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最后选择&amp;rdquo;文件&amp;rdquo; -&amp;gt; &amp;ldquo;将工作区另存为&amp;rdquo;，给工作区起一个名字并保存。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/WRmnqJm.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section4&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;四-推荐插件&#34;&gt;四、推荐插件&lt;/h2&gt;

&lt;p&gt;网上看到的，加上我个人的分类：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;代码规范

&lt;ul&gt;
&lt;li&gt;ESlint&lt;/li&gt;
&lt;li&gt;HTMLHint&lt;/li&gt;
&lt;li&gt;beautify&lt;/li&gt;
&lt;li&gt;vetur&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;编码帮助

&lt;ul&gt;
&lt;li&gt;HTML Snippets&lt;/li&gt;
&lt;li&gt;HTML CSS Support&lt;/li&gt;
&lt;li&gt;jQuery Code Snippets&lt;/li&gt;
&lt;li&gt;Bootstrap 3 Sinnpet&lt;/li&gt;
&lt;li&gt;Path Intellisense&lt;/li&gt;
&lt;li&gt;Npm Intellisense&lt;/li&gt;
&lt;li&gt;Document this&lt;/li&gt;
&lt;li&gt;Atuo Rename Tag&lt;/li&gt;
&lt;li&gt;fileheader&lt;/li&gt;
&lt;li&gt;filesize&lt;/li&gt;
&lt;li&gt;VueHelper&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;调试帮助

&lt;ul&gt;
&lt;li&gt;Debugger for Chrome&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;界面优化

&lt;ul&gt;
&lt;li&gt;vscode-icon&lt;/li&gt;
&lt;li&gt;各种主题&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Window10安装tensorflow</title>
      <link>https://zhanggq.github.io/post/zgq-ai-tensorflow/</link>
      <pubDate>Tue, 24 Apr 2018 16:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-ai-tensorflow/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;总结一下自己的Window10安装tensorflow过程。包括jupyter-notebook最简单用法和一个简单tensorflow例子&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-安装python&#34;&gt;一、安装Python&lt;/h2&gt;

&lt;p&gt;先上&lt;a href=&#34;https://pypi.org/project/tensorflow/#files检查一下支持的Python版本。到目前位置是支持到了3.6，所以从[Python官网](https://www.python.org/downloads/)下载了Python&#34;&gt;https://pypi.org/project/tensorflow/#files检查一下支持的Python版本。到目前位置是支持到了3.6，所以从[Python官网](https://www.python.org/downloads/)下载了Python&lt;/a&gt; 3.6.5版本
安装Python时，手工选择一下安装目录，如C:\Python36。之后把该路径加到环境变量Path中&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/cMPcY8z.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以管理员身份打开cmd，进入到C:\Python36，先升级python.exe -m pip install &amp;ndash;upgrade pip&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/xCMHsDA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;二-安装jupyter-notebook&#34;&gt;二、安装jupyter-notebook&lt;/h2&gt;

&lt;p&gt;以管理员身份打开cmd，进入到C:\Python36\Scripts，执行pip install jupyter安装&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/rDrgpaF.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后继续在C:\Python36\Scripts，执行jupyter notebook启动Jupyter Notebook&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/aE24AAi.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;执行初始化配置jupyter notebook &amp;ndash;generate-config，按提示会生成一个默认配置文件在C:\Users\ZGQ.jupyter目录下&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/wJWrhWE.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;修改jupyter_notebook_config.py的工作目录c.NotebookApp.notebook_dir = &amp;rsquo;D:\jupyter&amp;rsquo;，然后再次启动Jupyter Notebook，这时的根路径已经是刚刚修改的工作路径了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/zolca8N.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;顺便再安装一个matplotlib，执行pip install matplotlibr安装，然后在Jupyter Notebook上写一个python测试一下&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/rtAokDK.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;三-安装tensorflow&#34;&gt;三、安装tensorflow&lt;/h2&gt;

&lt;p&gt;执行pip install tensorflow安装
&lt;img src=&#34;https://i.imgur.com/6LXEGV4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/0k9BM6s.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;执行一个TensorFlow最简单的矩阵乘法
&lt;img src=&#34;https://i.imgur.com/ZWKu1yf.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section4&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;四-anaconda&#34;&gt;四、Anaconda&lt;/h2&gt;

&lt;p&gt;安装tensorflow和jupyter-notebook可以通过&lt;a href=&#34;https://www.anaconda.com/download/&#34;&gt;Anaconda&lt;/a&gt;来界面化安装。基于Python 3.6.5的是Anaconda3-5.1.0-Windows-x86_64.exe，下载后下一步下一步就可以装上了，建议一开始选择单用户，安装目录为C:\Anaconda3，之后通过Anaconda安装的执行程序都位于其Scripts目录下。最后一步选择自动配置环境变量，这里不再详细描述。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>一步一步创建Google虚机</title>
      <link>https://zhanggq.github.io/post/zgq-web-google-vm/</link>
      <pubDate>Mon, 09 Apr 2018 10:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-web-google-vm/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;财大气粗的Google，申请一个账号就可以免费使用一年它的虚机，正好最近缺一个Centos的虚机，Vultr的虚机是Ubuntu的，所以尝试创建了一台Centos 7.1虚机。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-申请google账号&#34;&gt;1.申请Google账号&lt;/h2&gt;

&lt;p&gt;参考&lt;a id=&#34;ref01&#34;&gt;&lt;a href=&#34;https://www.zhihu.com/question/36368291&#34;&gt;注册谷歌账户时最后一步验证账户输入手机号说此电话号码无法用于进行验证，如何解决？&lt;/a&gt;&lt;/a&gt;
操作其实很简单，就是申请一个Gmail账号，填写一下个人信息，绑定国内的手机号，验证一下手机就行。但前提是你要先翻出去，否则上不了Gmail。&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-创建google虚机&#34;&gt;2. 创建Google虚机&lt;/h2&gt;

&lt;p&gt;同理，你得先翻出去，否则登不上Google。打开Chrome浏览器，输入www.google.com，右上角登入刚刚注册的Google账号。
&lt;img src=&#34;https://i.imgur.com/hR7G9Nq.png&#34; alt=&#34;&#34; /&gt;
登入之后在地址栏输入&lt;a href=&#34;https://console.cloud.google.com/&#34;&gt;https://console.cloud.google.com/&lt;/a&gt; 进入Google云控制台。选择申请试用，配置过程如图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/AhJyDZO.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/T0fYedw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;申请过程中需要绑定自己的信用卡。信用卡不支持银联。绑定成功后会先扣款1美金，扣款成功验证信用卡有效后才能绑定成功。成功之后会将1美金的扣款撤销，所以不用担心。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/JwJvIzv.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;之后开始选择虚机操作系统类型，系统配置等等。需要注意的是，Google赠送是300美金，而虚机根据你创建的规格不同，价格也不同。像我这台虚机，光配置就是52美金一个月，且Google往国内的流量是需要另外付费的，所以这种规格的虚机连半年都不够。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ehdNZ8k.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/ndcLkGa.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/eopmexb.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/lLa48aq.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/tDQ3DVX.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/CB4S2Ix.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-虚机配置-centos7&#34;&gt;3. 虚机配置（Centos7）&lt;/h2&gt;

&lt;p&gt;勾选自己刚刚创建的虚机，然后选择在浏览器打开控制台。此时的弹出窗会被浏览器给禁掉，手工允许一下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Fwm39vk.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;使用sudo passwd改密码，如图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/CuEgPuL.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后su切到root账号，vi /etc/ssh/sshd_config 修改sshd配置的PermitRootLogin和PasswordAuthentication两个配置项，如图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/6r238yJ.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/FN9hLNg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;修改完成后通过命令service sshd restart重启sshd服务。之后就可以通过各种工具ssh远程你的虚机了。后面的事情请参考&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;ref03&#34;&gt;&lt;a href=&#34;https://teddysun.com/489.html&#34;&gt;一键安装最新内核并开启 BBR 脚本&lt;/a&gt;&lt;/a&gt;
&lt;a id=&#34;ref03&#34;&gt;&lt;a href=&#34;https://teddysun.com/486.html&#34;&gt;Shadowsocks 一键安装脚本（四合一）&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Kubeadm、Kubespray在Centos7上自动部署kubernetes 1.9.3</title>
      <link>https://zhanggq.github.io/post/zgq-paas-k8s-kubespray-1.9.3/</link>
      <pubDate>Wed, 04 Apr 2018 16:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-paas-k8s-kubespray-1.9.3/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;2015年第一次接触k8s，当时的搭建过程没那么复杂，yum装装，手工配配，没有证书，没有Dashboard，也没有墙…… 。过了3年没碰k8s，如今再来看，发现变化太大了，有了各式的自动部署工具，有了容器，也有了墙…… 。按照新的方式重新搭建了一遍，参考的帖子放在前面，因为别人写的比我好多了，所以这里只总结经验。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-手工搭建&#34;&gt;1.手工搭建&lt;/h2&gt;

&lt;p&gt;参考&lt;a id=&#34;ref01&#34;&gt;&lt;a href=&#34;https://www.kubernetes.org.cn/3096.html&#34;&gt;Kubernetes 1.8.x 全手动安装教程&lt;/a&gt;&lt;/a&gt;
这篇帖子写的很细，一步一步做证书，修改各个配置文件，纯手工部署。但这不是主流的部署方式，适合新手通过手工搭建去深入理解k8s各个组件。&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-kubeadm&#34;&gt;2. Kubeadm&lt;/h2&gt;

&lt;p&gt;参考&lt;a id=&#34;ref02&#34;&gt;&lt;a href=&#34;https://www.kubernetes.org.cn/3536.html&#34;&gt;Kubeadm 1.9 HA 高可用 集群 本地离线镜像部署&lt;/a&gt;&lt;/a&gt;
Kubeadm和kubespray的优劣我没仔细研究过。可能是因为玩kolla时用过ansible，所以对kubespray感觉比较亲切，而对Kubeadm就没那么多兴趣了，所以观念可能会有点片面。Kubeadm的优势是，它是官方提供的。所以最新的kubernetes版本发布后，Kubeadm就立马可以支持，而kubespray相对会落后一些，比如现在kubernetes已经发布到v1.10.0，而kubespray只支持到v1.9.5。而Kubeadm的劣势是安装部署还是比kubespray麻烦一点，有一些手工操作，比如安装rpm，生成证书之类的。另外还有一点就是Kubeadm不是真正的微服务架构，比如etcd就不是容器化的。&lt;/p&gt;

&lt;p&gt;言归正传，该帖子的详细程度一般般，虽然是18年写的，但内容有点老。搭建的麻烦之处就是去搞kubeadm等rpm包和pause-amd64等镜像。我通过google虚机去搞到了相关的东东，但总的来说还是非常麻烦。尝试了一次，没搞定，就没再仔细研究。&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-kubespray&#34;&gt;3. Kubespray&lt;/h2&gt;

&lt;p&gt;参考资料&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a id=&#34;ref03&#34;&gt;&lt;a href=&#34;https://www.jianshu.com/p/68925cb902e7&#34;&gt;ubuntu 国内环境部署 kubernetes 1.9.x 集群&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;ref04&#34;&gt;&lt;a href=&#34;https://www.cnblogs.com/iiiiher/p/8128184.html&#34;&gt;kubespray(ansible)自动化安装k8s集群&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Kubespray的部署帖子写的比较全一些，镜像都被作者放到了阿里云仓库上，下载镜像也很方便。主要的镜像在roles/download/defaults/main.yml里面，插件在roles/kubernetes-apps/ansible/defaults/main.yml里面，对照着tag去&lt;a href=&#34;https://dev.aliyun.com/search.html&#34;&gt;阿里云仓库&lt;/a&gt;查找下载 。和帖子不太一样的地方是我装的docker-ce版本有点高，docker-ce-17.12.1.ce-1.el7.centos，而作者提供的kubespray里面要校验docker-engine-selinux（在docker-ce-17.12.1版本中已经没了）。所以改了kubespray/roles/docker/vars/redhat.yml配置文件，去掉了docker_selinux校验。其它的参考帖子，改改Ip什么的。总的来说搭建过程很顺利，从新建虚机装系统到部署完成，大概3个小时左右吧。&lt;/p&gt;

&lt;p&gt;最后上个图，mark一下
&lt;img src=&#34;https://i.imgur.com/t0R93ah.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Ovs流表分析</title>
      <link>https://zhanggq.github.io/post/zgq-sdn-ovs-flow/</link>
      <pubDate>Wed, 04 Apr 2018 13:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-sdn-ovs-flow/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;学习Ovs过程中的笔记，主要目的是看懂Ovs的流表处理过程。网上有很多关于OVS流表的文章，但大多数将的是br-int和br-tun，本文结合实际分析一下br-ex的流，即外部访问的包是怎么一步步经过流表间的跳转最后发送给虚机的，以及虚机的回包处理过程。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-neutron底层网络模型&#34;&gt;一、Neutron底层网络模型&lt;/h2&gt;

&lt;p&gt;Neutron中底层网络的实现千差万别：有的agent本地是真正处理数据流的网络设备（OVS，Router，LoadBalancer等），而有的agent本地是SDN控制器（如ODL、ONOS、OpenContrail、NSX等）。上述Neutron底层网络的两种模型示意如下
&lt;img src=&#34;https://i.imgur.com/3JEtVZf.png&#34; alt=&#34;&#34; /&gt;
第一种模型中Neutron相当于SDN控制器，plugin与agent间的通信机制（如rpc）就相当于简单的南向协议。第二种模型中Neutron作为SDN应用，将业务需求告知SDN控制器，SDN控制器再通过五花八门的南向协议远程控制网络设备。当然，第二种模型中也可以把Neutron看做超级控制器或者网络编排器，去完成OpenStack中网络业务的集中分发。&lt;/p&gt;

&lt;p&gt;以下我们讲的是第一种模型中OVS处理数据流的工作机制。后一种模型中，SDN控制器也可以通过OpenFlow或者OVSDB来控制OVS处理数据流，对此暂时不进行讨论。&lt;/p&gt;

&lt;p&gt;VXLAN组网下，虚机到公网的网络模型如下图所示：
&lt;img src=&#34;https://i.imgur.com/XE57PBE.png&#34; alt=&#34;&#34; /&gt;
在本文的实际组网中，采用的是微服务架构，Controller节点和Compute节点合一，直接使用了Host网络，所以如上图中的红框所示，br-int和br-tun实际均只有一个。虚机与外网的通信只涉及br-int和br-ex，不涉及br-tun。PS：br-int负责在节点本地的网段内通信，br-tun则负责节点间的网段内通信（vxlan），br-ex负责与外网通信(flat)。&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;二-ovs基本命令分类&#34;&gt;二、OVS基本命令分类&lt;/h2&gt;

&lt;p&gt;Open vSwitch中有多个命令，分别有不同的作用，大致如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ovs-vsctl用于控制ovs db&lt;/li&gt;
&lt;li&gt;ovs-ofctl用于管理OpenFlow switch 的 flow&lt;/li&gt;
&lt;li&gt;ovs-dpctl用于管理ovs的datapath&lt;/li&gt;
&lt;li&gt;ovs-appctl用于查询和管理ovs daemon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;需要了解详细命令，可以通过执行ovs-vsctl &amp;ndash;help查看命令帮助&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;三-初始状态ovs流表分析&#34;&gt;三、初始状态OVS流表分析&lt;/h2&gt;

&lt;p&gt;假设从外网过来一个报文，先从br-ex开始看起&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root]# ovs-ofctl show br-ex（ovs-ofctl dump-ports-desc br-ex）
OFPT_FEATURES_REPLY (xid=0x2): dpid:00000cc47ab12f79
n_tables:254, n_buffers:256
capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP
actions: OUTPUT SET_VLAN_VID SET_VLAN_PCP STRIP_VLAN SET_DL_SRC SET_DL_DST SET_NW_SRC SET_NW_DST SET_NW_TOS SET_TP_SRC SET_TP_DST ENQUEUE
1(enp4s0f1): addr:0c:c4:7a:b1:2f:79
config: 0
state: 0
current: 1GB-FD COPPER AUTO_NEG
advertised: 10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-FD COPPER AUTO_NEG AUTO_PAUSE
supported: 10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-FD COPPER AUTO_NEG AUTO_PAUSE
speed: 1000 Mbps now, 1000 Mbps max
2(phy-br-ex): addr:e6:54:8a:f2:2e:b5
config: 0
state: 0
speed: 0 Mbps now, 0 Mbps max
LOCAL(br-ex): addr:0c:c4:7a:b1:2f:79
config: 0
state: 0
speed: 0 Mbps now, 0 Mbps max
OFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0
[root]# ovs-ofctl dump-flows br-ex
NXST_FLOW reply (xid=0x4):
cookie=0xbeb308002c7a72ac, duration=513183.493s, table=0, n_packets=772182, n_bytes=124865242, idle_age=0, hard_age=65534, priority=1 actions=resubmit(,3)
cookie=0xbeb308002c7a72ac, duration=513184.183s, table=0, n_packets=1, n_bytes=60, idle_age=65534, hard_age=65534, priority=0 actions=NORMAL
cookie=0xbeb308002c7a72ac, duration=174989.748s, table=0, n_packets=95, n_bytes=4378, idle_age=87, hard_age=65534, priority=4,in_port=2,dl_vlan=2 actions=strip_vlan,NORMAL
cookie=0xbeb308002c7a72ac, duration=513183.509s, table=0, n_packets=39, n_bytes=3322, idle_age=65534, hard_age=65534, priority=2,in_port=2 actions=resubmit(,1)
cookie=0xbeb308002c7a72ac, duration=513183.478s, table=1, n_packets=39, n_bytes=3322, idle_age=65534, hard_age=65534, priority=0 actions=resubmit(,2)
cookie=0xbeb308002c7a72ac, duration=513183.462s, table=2, n_packets=39, n_bytes=3322, idle_age=65534, hard_age=65534, priority=2,in_port=2 actions=drop
cookie=0xbeb308002c7a72ac, duration=513183.447s, table=3, n_packets=772182, n_bytes=124865242, idle_age=0, hard_age=65534, priority=1 actions=NORMAL
cookie=0xbeb308002c7a72ac, duration=513182.518s, table=3, n_packets=0, n_bytes=0, idle_age=65534, hard_age=65534, priority=2,dl_src=fa:16:3f:58:ba:cf actions=output:2
cookie=0xbeb308002c7a72ac, duration=513182.455s, table=3, n_packets=0, n_bytes=0, idle_age=65534, hard_age=65534, priority=2,dl_src=fa:16:3f:29:19:ab actions=output:2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;根据上面的流表规则报文从table=0入口&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cookie=0xbeb308002c7a72ac, duration=513183.493s, table=0, n_packets=772182, n_bytes=124865242, idle_age=0, hard_age=65534, priority=1 actions=resubmit(,3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后源MAC不可能是fa:16:3f:58:ba:cf或fa:16:3f:29:19:ab（从虚机出来的包才是），所以匹配到&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cookie=0xbeb308002c7a72ac, duration=513183.447s, table=3, n_packets=772182, n_bytes=124865242, idle_age=0, hard_age=65534, priority=1 actions=NORMAL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后正常转发&lt;/p&gt;

&lt;p&gt;接着看 ovs-vsctl show，发现phy-br-ex有个peer=int-br-ex，说明流继续往br-int走（后面继续说）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root]# ovs-vsctl show
c499917e-fe06-4d6d-a5d3-ca0bbaaefdff
Bridge br-tun
fail_mode: secure
Port &amp;quot;vxlan-ac10aa82&amp;quot;
Interface &amp;quot;vxlan-ac10aa82&amp;quot;
type: vxlan
options: {df_default=&amp;quot;true&amp;quot;, in_key=flow, local_ip=&amp;quot;172.16.170.131&amp;quot;, out_key=flow, remote_ip=&amp;quot;172.16.170.130&amp;quot;}
Port patch-int
Interface patch-int
type: patch
options: {peer=patch-tun}
Port br-tun
Interface br-tun
type: internal
Port &amp;quot;vxlan-ac10aa84&amp;quot;
Interface &amp;quot;vxlan-ac10aa84&amp;quot;
type: vxlan
options: {df_default=&amp;quot;true&amp;quot;, in_key=flow, local_ip=&amp;quot;172.16.170.131&amp;quot;, out_key=flow, remote_ip=&amp;quot;172.16.170.132&amp;quot;}
Bridge br-int
fail_mode: secure
Port &amp;quot;tap293c4a9f-81&amp;quot;
tag: 2
Interface &amp;quot;tap293c4a9f-81&amp;quot;
type: internal
Port &amp;quot;tap8e0ffc9b-fb&amp;quot;
tag: 1
Interface &amp;quot;tap8e0ffc9b-fb&amp;quot;
type: internal
Port patch-tun
Interface patch-tun
type: patch
options: {peer=patch-int}
Port br-int
Interface br-int
type: internal
Port &amp;quot;qr-62bd4b1d-38&amp;quot;
tag: 1
Interface &amp;quot;qr-62bd4b1d-38&amp;quot;
type: internal
Port &amp;quot;sg-133ac380-bc&amp;quot;
tag: 1
Interface &amp;quot;sg-133ac380-bc&amp;quot;
type: internal
Port &amp;quot;qg-9a365846-0d&amp;quot;
tag: 2
Interface &amp;quot;qg-9a365846-0d&amp;quot;
type: internal
Port int-br-ex
Interface int-br-ex
type: patch
options: {peer=phy-br-ex}
Bridge br-ex
Port br-ex
Interface br-ex
type: internal
Port &amp;quot;enp4s0f1&amp;quot;
Interface &amp;quot;enp4s0f1&amp;quot;
Port phy-br-ex
Interface phy-br-ex
type: patch
options: {peer=int-br-ex}
ovs_version: &amp;quot;2.3.2&amp;quot;
[root]# ovs-ofctl show br-int （ovs-ofctl dump-ports-desc br-int）
OFPT_FEATURES_REPLY (xid=0x2): dpid:00005a91ad84984d
n_tables:254, n_buffers:256
capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP
actions: OUTPUT SET_VLAN_VID SET_VLAN_PCP STRIP_VLAN SET_DL_SRC SET_DL_DST SET_NW_SRC SET_NW_DST SET_NW_TOS SET_TP_SRC SET_TP_DST ENQUEUE
1(int-br-ex): addr:fe:b7:c6:2f:41:07
config: 0
state: 0
speed: 0 Mbps now, 0 Mbps max
2(patch-tun): addr:0a:a0:b1:1d:b3:4e
config: 0
state: 0
speed: 0 Mbps now, 0 Mbps max
3(tap8e0ffc9b-fb): addr:00:00:00:00:00:00
config: PORT_DOWN
state: LINK_DOWN
speed: 0 Mbps now, 0 Mbps max
4(tap293c4a9f-81): addr:00:00:00:00:00:00
config: PORT_DOWN
state: LINK_DOWN
speed: 0 Mbps now, 0 Mbps max
5(qg-9a365846-0d): addr:00:00:00:00:00:00
config: PORT_DOWN
state: LINK_DOWN
speed: 0 Mbps now, 0 Mbps max
6(qr-62bd4b1d-38): addr:00:00:00:00:00:00
config: PORT_DOWN
state: LINK_DOWN
speed: 0 Mbps now, 0 Mbps max
7(sg-133ac380-bc): addr:00:00:00:00:00:00
config: PORT_DOWN
state: LINK_DOWN
speed: 0 Mbps now, 0 Mbps max
LOCAL(br-int): addr:5a:91:ad:84:98:4d
config: 0
state: 0
speed: 0 Mbps now, 0 Mbps max
OFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0
[root]# ovs-ofctl dump-flows br-int
NXST_FLOW reply (xid=0x4):
cookie=0xaf14bb29ca551fa7, duration=513383.693s, table=0, n_packets=0, n_bytes=0, idle_age=65534, hard_age=65534, priority=4,in_port=1,dl_src=fa:16:3f:29:19:ab actions=resubmit(,2)
cookie=0xaf14bb29ca551fa7, duration=513383.726s, table=0, n_packets=4, n_bytes=440, idle_age=65534, hard_age=65534, priority=2,in_port=2,dl_src=fa:16:3f:58:ba:cf actions=resubmit(,1)
cookie=0xaf14bb29ca551fa7, duration=513383.663s, table=0, n_packets=1, n_bytes=130, idle_age=65534, hard_age=65534, priority=2,in_port=2,dl_src=fa:16:3f:29:19:ab actions=resubmit(,1)
cookie=0xaf14bb29ca551fa7, duration=513383.767s, table=0, n_packets=0, n_bytes=0, idle_age=65534, hard_age=65534, priority=4,in_port=1,dl_src=fa:16:3f:58:ba:cf actions=resubmit(,2)
cookie=0xaf14bb29ca551fa7, duration=513384.808s, table=0, n_packets=134, n_bytes=7700, idle_age=289, hard_age=65534, priority=1 actions=NORMAL
cookie=0xaf14bb29ca551fa7, duration=513385.542s, table=0, n_packets=0, n_bytes=0, idle_age=65534, hard_age=65534, priority=0 actions=NORMAL
cookie=0xaf14bb29ca551fa7, duration=513384.793s, table=0, n_packets=329269, n_bytes=56743305, idle_age=65534, hard_age=65534, priority=2,in_port=1 actions=drop
cookie=0xaf14bb29ca551fa7, duration=175190.953s, table=0, n_packets=170292, n_bytes=29327670, idle_age=2, hard_age=65534, priority=3,in_port=1,vlan_tci=0x0000 actions=mod_vlan_vid:2,NORMAL
cookie=0xaf14bb29ca551fa7, duration=513384.840s, table=1, n_packets=5, n_bytes=570, idle_age=65534, hard_age=65534, priority=1 actions=drop
cookie=0xaf14bb29ca551fa7, duration=175158.855s, table=1, n_packets=0, n_bytes=0, idle_age=65534, hard_age=65534, priority=4,dl_vlan=1,dl_dst=fa:16:3e:4c:16:fa actions=strip_vlan,mod_dl_src:fa:16:3e:4e:0e:58,output:3
cookie=0xaf14bb29ca551fa7, duration=175155.033s, table=1, n_packets=0, n_bytes=0, idle_age=65534, hard_age=65534, priority=4,dl_vlan=1,dl_dst=fa:16:3e:81:7e:ea actions=strip_vlan,mod_dl_src:fa:16:3e:4e:0e:58,output:7
cookie=0xaf14bb29ca551fa7, duration=513384.824s, table=2, n_packets=0, n_bytes=0, idle_age=65534, hard_age=65534, priority=1 actions=drop
cookie=0xaf14bb29ca551fa7, duration=513384.856s, table=23, n_packets=0, n_bytes=0, idle_age=65534, hard_age=65534, priority=0 actions=drop
cookie=0xaf14bb29ca551fa7, duration=513385.512s, table=24, n_packets=0, n_bytes=0, idle_age=65534, hard_age=65534, priority=0 actions=drop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;依然是继续正常转发&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cookie=0xaf14bb29ca551fa7, duration=182323.183s, table=0, n_packets=174858, n_bytes=30441746, idle_age=2, hard_age=65534, priority=3,in_port=1,vlan_tci=0x0000 actions=mod_vlan_vid:2,NORMAL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;section4&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;四-创建虚机后ovs流表分析&#34;&gt;四、创建虚机后OVS流表分析&lt;/h2&gt;

&lt;p&gt;接着在Compute上创建了一台虚机（flat网络），然后br-ex流表无变化，br-int流表有更新，br-int的port也有更新&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root]# ovs-ofctl dump-ports-desc br-int
…………
8(qvod745905f-4b): addr:fe:c3:39:da:cf:98
config: 0
state: 0
current: 10GB-FD COPPER
speed: 10000 Mbps now, 0 Mbps max
[root]# ovs-ofctl dump-flows br-int（多出来的）
cookie=0xaf14bb29ca551fa7, duration=9.133s, table=0, n_packets=2, n_bytes=140, idle_age=1, priority=9,in_port=8 actions=resubmit(,25)
cookie=0xaf14bb29ca551fa7, duration=9.069s, table=0, n_packets=0, n_bytes=0, idle_age=9, priority=10,arp,in_port=8 actions=resubmit(,24)
cookie=0xaf14bb29ca551fa7, duration=9.100s, table=0, n_packets=0, n_bytes=0, idle_age=9, priority=10,icmp6,in_port=8,icmp_type=136 actions=resubmit(,24)
cookie=0xaf14bb29ca551fa7, duration=304.180s, table=24, n_packets=3, n_bytes=126, idle_age=279, priority=2,arp,in_port=8,arp_spa=172.16.54.196 actions=resubmit(,25)
cookie=0xaf14bb29ca551fa7, duration=304.211s, table=24, n_packets=0, n_bytes=0, idle_age=304, priority=2,icmp6,in_port=8,icmp_type=136,nd_target=fe80::f816:3eff:fe2d:e7c actions=NORMAL
cookie=0xaf14bb29ca551fa7, duration=304.259s, table=25, n_packets=241, n_bytes=23025, idle_age=278, priority=2,in_port=8,dl_src=fa:16:3e:2d:0e:7c actions=NORMAL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;测试从外网ping包，物理网卡抓包如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;17:43:07.941669 54:39:df:2b:56:ba (oui Unknown) &amp;gt; fa:16:3e:2d:0e:7c (oui Unknown), ethertype IPv4 (0x0800), length 74: 172.16.16.136 &amp;gt; 172.16.54.196: ICMP echo request, id 1, seq 1533, length 40
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;目的MAC是fa:16:3e:2d:0e:7c，虚机的MAC
br-ex处理同上，转发时看br-ex的MAC（br-ex可以理解为一台switch，我们现在看的是switch记录的MAC）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root]# ovs-appctl fdb/show br-ex
port VLAN MAC Age
1 0 6c:92:bf:0c:26:08 248
1 0 fa:16:3e:2e:00:f1 117
2 0 fa:16:3e:2d:0e:7c 68
1 0 54:39:df:2b:56:ba 68
1 0 6c:92:bf:0c:27:aa 15
1 0 6c:92:bf:0c:26:0a 8
1 0 0c:c4:7a:18:f5:c7 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以br-ex把包往port2（phy-br-ex）上丢，之后br-int也同上（转发时从ovs-appctl fdb/show br-int看，往port8丢）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root]# ovs-appctl fdb/show br-int  #br上的MAC表
port VLAN MAC Age
1 2 6c:92:bf:0c:26:08 219
1 2 fa:16:3e:2e:00:f1 88
1 2 0c:c4:7a:18:f5:c7 45
8 2 fa:16:3e:2d:0e:7c 39
1 2 54:39:df:2b:56:ba 39
1 2 6c:92:bf:0c:27:aa 15
1 2 6c:92:bf:0c:26:0a 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着包的顺序应该是从顺序是Switch(qvod745905f-4b) -&amp;gt; (qvbd745905f-4b) -&amp;gt; Bridge（qbrd745905f-4b），经过安全组的iptables，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root]# iptables -t filter -S   #安全组里面没有规则
-P INPUT ACCEPT
-P FORWARD ACCEPT
-P OUTPUT ACCEPT
-N CATTLE_FORWARD
-N DOCKER
-N DOCKER-ISOLATION
-N neutron-filter-top
-N neutron-openvswi-FORWARD
-N neutron-openvswi-INPUT
-N neutron-openvswi-OUTPUT
-N neutron-openvswi-id745905f-4
-N neutron-openvswi-local
-N neutron-openvswi-od745905f-4
-N neutron-openvswi-scope
-N neutron-openvswi-sd745905f-4
-N neutron-openvswi-sg-chain
-N neutron-openvswi-sg-fallback
-N nova-api-FORWARD
-N nova-api-INPUT
-N nova-api-OUTPUT
-N nova-api-local
-N nova-filter-top
-A INPUT -j neutron-openvswi-INPUT
-A INPUT -j nova-api-INPUT
-A INPUT -p tcp -m tcp --dport 37032 -j ACCEPT
-A INPUT -p tcp -m tcp --dport 37031 -j ACCEPT
-A INPUT -p tcp -m multiport --dports 10050,10051 -m comment --comment &amp;quot;$commment&amp;quot; -j ACCEPT
-A FORWARD -j neutron-filter-top
-A FORWARD -j neutron-openvswi-FORWARD
-A FORWARD -j nova-filter-top
-A FORWARD -j nova-api-FORWARD
-A FORWARD -j CATTLE_FORWARD
-A FORWARD -j DOCKER-ISOLATION
-A FORWARD -o docker0 -j DOCKER
-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -i docker0 ! -o docker0 -j ACCEPT
-A FORWARD -i docker0 -o docker0 -j ACCEPT
-A FORWARD -o server0 -j DOCKER
-A FORWARD -o server0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -i server0 ! -o server0 -j ACCEPT
-A FORWARD -i server0 -o server0 -j ACCEPT
-A OUTPUT -j neutron-filter-top
-A OUTPUT -j neutron-openvswi-OUTPUT
-A OUTPUT -j nova-filter-top
-A OUTPUT -j nova-api-OUTPUT
-A CATTLE_FORWARD -m mark --mark 0x1068 -j ACCEPT
-A CATTLE_FORWARD -m mark --mark 0x4000 -j ACCEPT
-A DOCKER -d 172.17.0.3/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 9418 -j ACCEPT
-A DOCKER -d 172.17.0.4/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 9418 -j ACCEPT
-A DOCKER -d 172.17.0.2/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 5000 -j ACCEPT
-A DOCKER -d 10.45.1.2/32 ! -i server0 -o server0 -p tcp -m tcp --dport 8080 -j ACCEPT
-A DOCKER -d 10.45.1.2/32 ! -i server0 -o server0 -p tcp -m tcp --dport 3306 -j ACCEPT
-A DOCKER-ISOLATION -i server0 -o docker0 -j DROP
-A DOCKER-ISOLATION -i docker0 -o server0 -j DROP
-A DOCKER-ISOLATION -j RETURN
-A neutron-filter-top -j neutron-openvswi-local
-A neutron-openvswi-FORWARD -j neutron-openvswi-scope
-A neutron-openvswi-FORWARD -m physdev --physdev-out tapd745905f-4b --physdev-is-bridged -m comment --comment &amp;quot;Direct traffic from the VM interface to the security group chain.&amp;quot; -j neutron-openvswi-sg-chain
-A neutron-openvswi-FORWARD -m physdev --physdev-in tapd745905f-4b --physdev-is-bridged -m comment --comment &amp;quot;Direct traffic from the VM interface to the security group chain.&amp;quot; -j neutron-openvswi-sg-chain
-A neutron-openvswi-INPUT -m physdev --physdev-in tapd745905f-4b --physdev-is-bridged -m comment --comment &amp;quot;Direct incoming traffic from VM to the security group chain.&amp;quot; -j neutron-openvswi-od745905f-4
-A neutron-openvswi-id745905f-4 -m state --state RELATED,ESTABLISHED -m comment --comment &amp;quot;Direct packets associated with a known session to the RETURN chain.&amp;quot; -j RETURN
-A neutron-openvswi-id745905f-4 -s 172.16.54.194/32 -p udp -m udp --sport 67 -m udp --dport 68 -j RETURN
-A neutron-openvswi-id745905f-4 -s 172.16.54.193/32 -p udp -m udp --sport 67 -m udp --dport 68 -j RETURN
-A neutron-openvswi-id745905f-4 -m state --state INVALID -m comment --comment &amp;quot;Drop packets that appear related to an existing connection (e.g. TCP ACK/FIN) but do not have an entry in conntrack.&amp;quot; -j DROP
-A neutron-openvswi-id745905f-4 -m comment --comment &amp;quot;Send unmatched traffic to the fallback chain.&amp;quot; -j neutron-openvswi-sg-fallback
-A neutron-openvswi-od745905f-4 -s 0.0.0.0/32 -d 255.255.255.255/32 -p udp -m udp --sport 68 --dport 67 -m comment --comment &amp;quot;Allow DHCP client traffic.&amp;quot; -j RETURN
-A neutron-openvswi-od745905f-4 -j neutron-openvswi-sd745905f-4
-A neutron-openvswi-od745905f-4 -p udp -m udp --sport 68 --dport 67 -m comment --comment &amp;quot;Allow DHCP client traffic.&amp;quot; -j RETURN
-A neutron-openvswi-od745905f-4 -p udp -m udp --sport 67 -m udp --dport 68 -m comment --comment &amp;quot;Prevent DHCP Spoofing by VM.&amp;quot; -j DROP
-A neutron-openvswi-od745905f-4 -m state --state RELATED,ESTABLISHED -m comment --comment &amp;quot;Direct packets associated with a known session to the RETURN chain.&amp;quot; -j RETURN
-A neutron-openvswi-od745905f-4 -m state --state INVALID -m comment --comment &amp;quot;Drop packets that appear related to an existing connection (e.g. TCP ACK/FIN) but do not have an entry in conntrack.&amp;quot; -j DROP
-A neutron-openvswi-od745905f-4 -m comment --comment &amp;quot;Send unmatched traffic to the fallback chain.&amp;quot; -j neutron-openvswi-sg-fallback
-A neutron-openvswi-sd745905f-4 -s 172.16.54.196/32 -m mac --mac-source FA:16:3E:2D:0E:7C -m comment --comment &amp;quot;Allow traffic from defined IP/MAC pairs.&amp;quot; -j RETURN
-A neutron-openvswi-sd745905f-4 -m comment --comment &amp;quot;Drop traffic without an IP/MAC allow rule.&amp;quot; -j DROP
-A neutron-openvswi-sg-chain -m physdev --physdev-out tapd745905f-4b --physdev-is-bridged -m comment --comment &amp;quot;Jump to the VM specific chain.&amp;quot; -j neutron-openvswi-id745905f-4
-A neutron-openvswi-sg-chain -m physdev --physdev-in tapd745905f-4b --physdev-is-bridged -m comment --comment &amp;quot;Jump to the VM specific chain.&amp;quot; -j neutron-openvswi-od745905f-4
-A neutron-openvswi-sg-chain -j ACCEPT
-A neutron-openvswi-sg-fallback -m comment --comment &amp;quot;Default drop rule for unmatched traffic.&amp;quot; -j DROP
-A nova-api-INPUT -d 172.16.170.131/32 -p tcp -m tcp --dport 8775 -j ACCEPT
-A nova-filter-top -j nova-api-local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;找不到允许规则，被丢弃
修改安全组规则，把默认安全组改成了ICMP全部允许，br-ex流表不变，br-int流表也不变
安全组多了2条规则&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;-A neutron-openvswi-id745905f-4 -p icmp -j RETURN
-A neutron-openvswi-od745905f-4 -p icmp -j RETURN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后包就可以从Bridge（qbrd745905f-4b）发给虚机的网卡（tapd745905f-4b）&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section5&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;五-虚机发包ovs流表分析&#34;&gt;五、虚机发包OVS流表分析&lt;/h2&gt;

&lt;p&gt;分析从虚机发出的icmp包。先看ovs-ofctl dump-ports-desc br-int，上面多出来的port（qvod745905f-4b），可以理解为openvswitch这台交换机上面8号口新插了根网线，网线的标签是qvod745905f-4b，那么这个网线其他接口也有745905f类似的标签。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root]# ifconfig | grep 745
qbrd745905f-4b: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500
qvbd745905f-4b: flags=4419&amp;lt;UP,BROADCAST,RUNNING,PROMISC,MULTICAST&amp;gt; mtu 1500
qvod745905f-4b: flags=4419&amp;lt;UP,BROADCAST,RUNNING,PROMISC,MULTICAST&amp;gt; mtu 1500
tapd745905f-4b: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;顺序是虚机（tapd745905f-4b）-&amp;gt; Bridge（qbrd745905f-4b）-&amp;gt; (qvbd745905f-4b)-&amp;gt; Switch(qvod745905f-4b)
之后Switch的处理（br-int）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cookie=0xaf14bb29ca551fa7, duration=2971.648s, table=0, n_packets=1047, n_bytes=102125, idle_age=46, priority=9,in_port=8 actions=resubmit(,25)
cookie=0xaf14bb29ca551fa7, duration=2971.679s, table=25, n_packets=1050, n_bytes=102195, idle_age=46, priority=2,in_port=8,dl_src=fa:16:3e:2d:0e:7c actions=NORMAL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;抓包看源mac是fa:16:3e:2d:0e:7c，没错。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root]# tcpdump -i enp4s0f1 icmp -e 
15:54:54.639046 fa:16:3e:2d:0e:7c (oui Unknown) &amp;gt; 54:39:df:2b:56:ba (oui Unknown), ethertype IPv4 (0x0800), length 98: 172.16.54.196 &amp;gt; 172.16.33.1: ICMP echo request, id 2381, seq 287, length 64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;虚机发3个包之后，n_packets=1050 变成了n_packets=1053 确认是从这个规则出去的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cookie=0xaf14bb29ca551fa7, duration=2980.176s, table=0, n_packets=1050, n_bytes=102419, idle_age=3, priority=9,in_port=8 actions=resubmit(,25)
cookie=0xaf14bb29ca551fa7, duration=2980.207s, table=25, n_packets=1053, n_bytes=102489, idle_age=3, priority=2,in_port=8,dl_src=fa:16:3e:2d:0e:7c actions=NORMAL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再观察br-ex ，直接从table=0，剥掉vlan tag后转发出去了（测试了4个包）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cookie=0xbeb308002c7a72ac, duration=178829.516s, table=0, n_packets=968, n_bytes=90561, idle_age=171, hard_age=65534, priority=4,in_port=2,dl_vlan=2 actions=strip_vlan,NORMAL
cookie=0xbeb308002c7a72ac, duration=178843.780s, table=0, n_packets=972, n_bytes=90953, idle_age=6, hard_age=65534, priority=4,in_port=2,dl_vlan=2 actions=strip_vlan,NORMAL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;section12&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a id=&#34;ref01&#34;&gt;&lt;a href=&#34;https://www.sdnlab.com/16414.html&#34;&gt;OVS流表分析&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;ref02&#34;&gt;&lt;a href=&#34;http://www.aboutyun.com/thread-13027-1-1.html&#34;&gt;深入理解 Neutron&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Markdown Cases Preview</title>
      <link>https://zhanggq.github.io/post/even-preview/</link>
      <pubDate>Wed, 04 Apr 2018 10:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/even-preview/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;综合展示一下Markdown各种语法的实例，算是自己以后写Blog的模板吧。
目前这个只能算是初级模板，还有其它很多高级的用法不在展示的范围内。
PS.我用的是Markdownpad2，别人推荐用slackedit。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这篇文章集中说明主题所支持的 Markdown 语法和 Hugo Shortcodes 插件，你也可以在这里预览到他们的样子。如果你不喜欢某些样式，可以去修改 css/ 文件夹下的 .scss 文件。&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section0&#34;&gt;&lt;font color=blue&gt;摘要&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section1&#34;&gt;&lt;font color=red&gt;标题&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section2&#34;&gt;&lt;font color=green&gt;段落&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section3&#34;&gt;&lt;font color=yellow&gt;列表&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section4&#34;&gt;&lt;font color=pink&gt;引用&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section5&#34;&gt;&lt;font color=orange&gt;代码&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section6&#34;&gt;&lt;font color=purple&gt;分割线&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section7&#34;&gt;&lt;font color=brown&gt;图片&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section8&#34;&gt;&lt;font color=grey&gt;表格&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section9&#34;&gt;&lt;font color=powderblue&gt;公式&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section10&#34;&gt;&lt;font color=khaki&gt;音乐&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section11&#34;&gt;&lt;font color=rubine&gt;视频&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section12&#34;&gt;&lt;font color=peru&gt;参考资料&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-标题&#34;&gt;1.标题&lt;/h2&gt;

&lt;h1 id=&#34;h1&#34;&gt;H1&lt;/h1&gt;

&lt;h2 id=&#34;h2&#34;&gt;H2&lt;/h2&gt;

&lt;h3 id=&#34;h3&#34;&gt;H3&lt;/h3&gt;

&lt;h4 id=&#34;h4&#34;&gt;H4&lt;/h4&gt;

&lt;h5 id=&#34;h5&#34;&gt;H5&lt;/h5&gt;

&lt;h6 id=&#34;h6&#34;&gt;H6&lt;/h6&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-段落&#34;&gt;2. 段落&lt;/h2&gt;

&lt;p&gt;使用单引号 &lt;code&gt;*&lt;/code&gt; 或者单下划线 &lt;code&gt;_&lt;/code&gt; 标记 &lt;em&gt;斜体强调&lt;/em&gt; 或者 &lt;em&gt;斜体强调&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;使用两个引号 &lt;code&gt;**&lt;/code&gt; 或者两个下划线 &lt;code&gt;__&lt;/code&gt; 标记 &lt;strong&gt;加粗强调&lt;/strong&gt; 或者 &lt;strong&gt;加粗强调&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;引号和下划线可叠加使用 → &lt;strong&gt;只是加粗 &lt;em&gt;斜体并加粗&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用两个波浪线 &lt;code&gt;~~&lt;/code&gt; 标记 &lt;del&gt;已删除文字&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;插入文字暂无 &lt;code&gt;Markdown&lt;/code&gt; 标记，直接使用 &lt;code&gt;HTML&lt;/code&gt; 标签 &lt;code&gt;&amp;lt;ins&amp;gt;&lt;/code&gt; 标记 &lt;ins&gt;插入文字&lt;/ins&gt;&lt;/p&gt;

&lt;p&gt;行内代码使用反引号标记 → &lt;code&gt;print(&amp;quot;hello world&amp;quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;上标 X&lt;sup&gt;2&lt;/sup&gt; / 下标 X&lt;sub&gt;2&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;按键 &lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;/p&gt;

&lt;p&gt;外链 &lt;a href=&#34;https://chekun.me&#34;&gt;chekun&amp;rsquo;s blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;页面内段落 &lt;a href=&#34;#section-07&#34;&gt;图片&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;注意：你可以通过 &lt;code&gt;{#section-id}&lt;/code&gt; 方式自定义段落锚点&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;参考资料 &lt;sup&gt;&lt;a href=&#34;#ref01&#34;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;sup&gt;&lt;a href=&#34;#ref02&#34;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-列表&#34;&gt;3. 列表&lt;/h2&gt;

&lt;p&gt;以下的无序、有序和任务列表均支持二级嵌套，不建议使用二级以上嵌套。&lt;/p&gt;

&lt;h3 id=&#34;3-1-无序列表&#34;&gt;3.1 无序列表&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;无序列表

&lt;ul&gt;
&lt;li&gt;嵌套的无序列表&lt;/li&gt;
&lt;li&gt;嵌套的无序列表&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;无序列表

&lt;ol&gt;
&lt;li&gt;嵌套的有序列表&lt;/li&gt;
&lt;li&gt;嵌套的有序列表&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;无序列表&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-2-有序列表&#34;&gt;3.2 有序列表&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;有序列表

&lt;ol&gt;
&lt;li&gt;嵌套的有序列表&lt;/li&gt;
&lt;li&gt;嵌套的有序列表&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;有序列表

&lt;ul&gt;
&lt;li&gt;嵌套的无序列表&lt;/li&gt;
&lt;li&gt;嵌套的无序列表&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;有序列表&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;3-3-定义列表&#34;&gt;3.3 定义列表&lt;/h3&gt;

&lt;dl&gt;
&lt;dt&gt;CSS&lt;/dt&gt;
&lt;dd&gt;层叠样式表&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&#34;3-4-任务列表&#34;&gt;3.4 任务列表&lt;/h3&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Cmd Markdown 开发

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; 支持以 PDF 格式导出文稿&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 新增Todo列表功能 &lt;a href=&#34;https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments&#34;&gt;语法参考&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 改进 LaTex 功能&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 修复 LaTex 公式渲染问题&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 新增 LaTex 公式编号功能 &lt;a href=&#34;http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers&#34;&gt;语法参考&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; 七月旅行准备

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; 准备邮轮上需要携带的物品&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; 浏览日本免税店的物品&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 购买蓝宝石公主号七月一日的船票&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;section4&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-引用&#34;&gt;4. 引用&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;野火烧不尽，春风吹又生。&lt;/p&gt;

&lt;p&gt;&lt;cite&gt;&amp;ndash; 白居易《赋得古原草送别》&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section5&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;5-代码&#34;&gt;5. 代码&lt;/h2&gt;

&lt;p&gt;以本站的一段 &lt;code&gt;JavaScript&lt;/code&gt; 代码做演示。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Initialize video.js player
if (document.getElementById(&#39;my-player&#39;) !== null) {
  /* eslint-disable no-undef */
  videojs(&#39;#my-player&#39;, {
    aspectRatio: &#39;16:9&#39;,
    fluid: true,
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;section6&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;6-分割线&#34;&gt;6. 分割线&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;中间能写字的分割线，如果你修改了分割线中字的内容，请配合修改 &lt;code&gt;CSS&lt;/code&gt; 样式。&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section7&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;section-07&#34;&gt;7. 图片&lt;/h2&gt;

&lt;p&gt;不带标题的图片，如下图👇&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/olOwOlo/hugo-theme-even/master/images/showcase.png&#34; alt=&#34;hugo even showcase&#34; title=&#34;showcase.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;带标题的图片，如下图👇&lt;/p&gt;

&lt;figure class=&#34;center&#34;&gt;
    &lt;img src=&#34;https://raw.githubusercontent.com/olOwOlo/hugo-theme-even/master/images/showcase.png&#34;
         alt=&#34;hugo even showcase&#34;/&gt; &lt;figcaption&gt;
            &lt;h4&gt;showcase.png&lt;/h4&gt;
        &lt;/figcaption&gt;
&lt;/figure&gt;

&lt;p&gt;&lt;a name=&#34;section8&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;8-表格&#34;&gt;8. 表格&lt;/h2&gt;

&lt;p&gt;使用 &lt;code&gt;Markdown&lt;/code&gt; 画的表格，如下表👇&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Tables&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Are&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Cool&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;col 3 is&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;right-aligned&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$1600&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;col 2 is&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;centered&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;zebra stripes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;are neat&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a name=&#34;section9&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;9-数学公式&#34;&gt;9. 数学公式&lt;/h2&gt;

&lt;p&gt;主题使用了 &lt;a href=&#34;https://www.mathjax.org/&#34;&gt;MathJax&lt;/a&gt; 开源库来实现对数学公式的支持，使用 &lt;code&gt;$$&lt;/code&gt; 标记。&lt;/p&gt;

&lt;p&gt;$$ evidence_{i}=\sum_{j}W_{ij}x_{j}+b_{i} $$&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section10&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;10-网易云音乐&#34;&gt;10. 网易云音乐&lt;/h2&gt;

&lt;p&gt;主题文章中可以轻松插入 &lt;a href=&#34;https://music.163.com/&#34;&gt;网易云音乐&lt;/a&gt; 的指定音乐，你可以根据需要将音乐设置为自动播放，在主题目录 &lt;code&gt;layouts/shortcodes&lt;/code&gt; 文件夹下的 &lt;code&gt;music.html&lt;/code&gt; 对该标签进行定义。&lt;/p&gt;

&lt;p&gt;&lt;iframe style=&#34;max-width: 100%&#34;
      class=&#34;music163&#34;
      frameborder=&#34;no&#34;
      border=&#34;0&#34;
      marginwidth=&#34;0&#34;
      marginheight=&#34;0&#34;
      width=&#34;330&#34;
      height=&#34;86&#34;
      src=&#34;//music.163.com/outchain/player?type=2&amp;id=28196554&amp;auto=0&amp;height=66&#34;&gt;
    &lt;/iframe&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section11&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;11-youtube&#34;&gt;11. YouTube&lt;/h2&gt;

&lt;p&gt;由于不明原因可能无法播放。&lt;/p&gt;

&lt;div style=&#34;position: relative; padding-bottom: 56.25%; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/wC5pJm8RAu4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%; border:0;&#34; allowfullscreen title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
&lt;/div&gt;

&lt;p&gt;&lt;a name=&#34;section12&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a id=&#34;ref01&#34;&gt;&lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&#34;&gt;Markdown Cheatsheet&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;ref02&#34;&gt;&lt;a href=&#34;https://www.zybuluo.com/EncyKe/note/120103&#34;&gt;Markdown 语法手册&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>https://zhanggq.github.io/about/</link>
      <pubDate>Tue, 03 Apr 2018 19:38:52 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/about/</guid>
      
        <description>&lt;p&gt;Emmm &amp;hellip;.&lt;/p&gt;

&lt;p&gt;说啥咧，不知道说啥。&lt;/p&gt;

&lt;p&gt;IT男，喜欢捣鼓折腾，喜欢四处旅游，更喜欢偷懒，语言表达能力不高&lt;/p&gt;

&lt;p&gt;研究方向：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WEB全栈&lt;/li&gt;
&lt;li&gt;OPENSTACK SDN&lt;/li&gt;
&lt;li&gt;微服务 PaaS平台&lt;/li&gt;
&lt;li&gt;人工智能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;邮箱：zhang_gq@foxmail.com
穷游：&lt;a href=&#34;http://www.qyer.com/u/2230544&#34;&gt;http://www.qyer.com/u/2230544&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>浅谈Openstack、OpenContrail、OpenFlow、NFV</title>
      <link>https://zhanggq.github.io/post/zgq-sdn-openstack-opencontrail-openflow-nfv/</link>
      <pubDate>Tue, 03 Apr 2018 19:08:48 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-sdn-openstack-opencontrail-openflow-nfv/</guid>
      
        <description>&lt;p&gt;浅谈Openstack、OpenContrail、OpenFlow、NFV。属于我个人学习过程中的笔记杂谈。&lt;/p&gt;

&lt;p&gt;首先先从2个大的概念说起吧：SDN和NFV。它们都是网络虚拟化技术，即用软件来实现传统硬件的网络功能。其中名气最大的就是SDN（软件定义网络）和NFV（网络功能虚拟化）。起初、两者的初衷和架构并不相同，SDN起源于园区网，发展于数据中心，目的是将控制平面和转发平面分离，通过集中化的控制平面能够灵活定义网络行为；而NFV则由运营商联盟提出，为了加速部署新的网络服务，运营商倾向于放弃笨重昂贵的专用网络设备，转而使用标准的IT虚拟化技术来拆分网络功能模块，如DNS、NAT、Firewall等。于是一些运营商联合成立了欧洲通信标准协会ETSI（European Telecommunications Standards Institute），他的一个工作组（ETSI ISG NFV）负责开发制定电信网络的虚拟化架构，如NFV MANO。但随着互联网的发展，两者逐渐融合。有人认为，两者的侧重点不一样，NFV更偏向于网络功能虚拟化，而SDN是对网络本身的控制，两者可以结合使用，作为一种电信级的解决方案（2014年江苏电信的解决方案 &lt;a href=&#34;https://www.sdnlab.com/15751.html&#34;&gt;https://www.sdnlab.com/15751.html&lt;/a&gt; ）。&lt;/p&gt;

&lt;p&gt;接着说SDN的解决方案吧，知道几种OpenContrail，OpenFlow，OpenDayLight，OpenvSwitch。 说说我对他们的理解吧：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OpenFlow：准确的它是一种协议，并不完全是一种解决方案，其主要目的是觉着现在的协议太多太复杂了，所以推翻了以前的所有协议，重新定义了一种。但正好SDN是控制面和转发面分离，OpenFlow也是，所以它也被称作了一种SDN解决方案。但OpenFlow太学院派了，随着时间的发展，已经逐渐被淘汰（高潮是OpenFlow v1.3，v1.5之后好像就没版本了）。&lt;/li&gt;
&lt;li&gt;OpenContrail：与OpenFlow不同的是，OpenContrail是商业派的解决方案，由Juniper在2012年底收购Contrail之后将其SDN平台开源出来，这就是OpenContrail（现已经改名为Tungsten Fabric）。正如前面SDN定义的那样，OpenContrail也分成了控制面和转发面两部分。控制面主要由配置模块、控制模块、分析模块组成，转发面主要是vRouter&lt;/li&gt;
&lt;li&gt;OpenvSwitch：属于开源的SDN解决方案，被Openstack社区用来和Neutron项目配合使用。目前算是比较主流的SDN解决方案之一。小规模的云都喜欢用它，一般的协议都支持，也能支持DPDK。稳定性方面依赖Linux内核版本。以前在Centos 7的3.10.0内核下，是不是会出现Crash。后来升级到4.6.0之后，没有再出现过Crash的现象。&lt;/li&gt;
&lt;li&gt;OpenDayLight：它是由CISCO主导的一个基于Linux的SDN控制器，并不是一个完整的解决方案，一般会配合OpenvSwitch来做解决方案。它比Neutron要更专业一些，但要比OpenContrail轻一些，介于两者之间吧。前期被OpenContrail打压得不行，现在逐渐成熟起来。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前面说到过SDN+NFV的解决方案，另一种解决方案是Openstack/VMware + OpenContrail。这里讲讲Openstack + OpenContrail。一般大多数OpenStack部署使用OpenvSwitch和OpenStack Neutron进行对接，但是想要实现大规模生产部署需要更多的商业化的产品，这时候就可以选择OpenContrail与Openstack进行对接。OpenContrail提供neutron_plugin_contrail作为插件和Neuron对接，之后openstack就可以通过neutron下发配置给contrail的config模块。刚刚说过，一般情况下Openstack Neutron也就够了，vxlan、FW、LB什么的都支持，那么为啥要用OpenContrail？ 我个人认为，前者是社区的方案，OpenContrail是Juniper的，所以后者给客户的信心会大一点；另一方面OpenContrail确实要强一些，比如支持的协议多一点点（MPLS over GRE/UDP），比如OpenContrail的服务链功能。当然，最重要的还是稳定性和性能，可惜我没做过这方面的对比测试，网上也没找到资料，只知道2017年中国电信省级云资源池试商用SDN工程用的就是这个方案。&lt;/p&gt;

&lt;p&gt;这篇Blog就先写到这，等继续学习了OpenContrail之后再更新吧。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>关于Go----Golang的优秀组件整理</title>
      <link>https://zhanggq.github.io/post/zgq-web-golang-good-program/</link>
      <pubDate>Tue, 03 Apr 2018 18:53:48 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-web-golang-good-program/</guid>
      
        <description>&lt;p&gt;这里仅介绍我见过的，觉得不错的Golang优秀组件。算是个人笔记吧，只有介绍，没有使用说明。&lt;/p&gt;

&lt;p&gt;1.框架
Go的框架有很多很多，但至今还没有一款能和Spring媲美的神级框架出现。所以大神都是自己直接写，不用框架。这里介绍我用过的2个框架gin和beego，前者路由速度快，后者功能全。但还是我前面讲的那句话，两个都不能算是神级框架，所以仁者见仁，智者见智吧。
github.com/gin-gonic/gin
github.com/astaxie/beego&lt;/p&gt;

&lt;p&gt;2.WEB服务
caddy类似于Apache，Nginx，是一个高性能的HTTP/2和反向代理服务器，天然支持https。挺强。
github.com/mholt/caddy&lt;/p&gt;

&lt;p&gt;3.数据库操作
gorm或者beego的orm，但和前面的框架类似，用也可以，不用也可以。
github.com/jinzhu/gorm&lt;/p&gt;

&lt;p&gt;4.包管理工具
类似于Maven。目前我只用过govendor，其它的还有godep、glide。但有个不好的地方就是被墙的还是被墙，得翻墙出去找。
github.com/kardianos/govendor&lt;/p&gt;

&lt;p&gt;5.热重启
通过监听syscall信号量实现优雅重启。
github.com/fvbock/endless&lt;/p&gt;

&lt;p&gt;6.log记录
github.com/Sirupsen/logrus&lt;/p&gt;

&lt;p&gt;7.定时任务
github.com/robfig/cron&lt;/p&gt;

&lt;p&gt;8.帮助文档生成工具
自己的应用编好之后，自动给你生成帮助文档，执行xxxx -h或者xxxx help显示帮助文档
github.com/urfave/cli(以前叫github.com/codegangsta/cli)&lt;/p&gt;

&lt;p&gt;9.配置文件读取
github.com/spf13/viper&lt;/p&gt;

&lt;p&gt;10.内存管理
支持Redis内存存储
github.com/coocood/freecache&lt;/p&gt;

&lt;p&gt;11.redis依赖
github.com/garyburd/redigo&lt;/p&gt;

&lt;p&gt;12.静态网站生成器
我的Blog就是靠它生成的，挺好用
github.com/gohugoio/hugo&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Caddy初探</title>
      <link>https://zhanggq.github.io/post/zgq-web-caddy-test/</link>
      <pubDate>Tue, 03 Apr 2018 18:43:48 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-web-caddy-test/</guid>
      
        <description>&lt;p&gt;Caddy
类似于Apache，Nginx，是一个高性能的HTTP和反向代理服务器&lt;/p&gt;

&lt;p&gt;代码
&lt;a href=&#34;https://github.com/mholt/caddy&#34;&gt;https://github.com/mholt/caddy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用，先升级Go至1.9以上(&lt;a href=&#34;https://my.oschina.net/u/2601623/blog/1785798)，然后&#34;&gt;https://my.oschina.net/u/2601623/blog/1785798)，然后&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/mholt/caddy/caddy
go get github.com/caddyserver/builds
cd $GOPATH/src/github.com/mholt/caddy/caddy
go run build.go
./caddy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;初步尝试，在caddy同目录下创建Caddyfile文件，并写入配置，然后运行caddy&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cat Caddyfile
0.0.0.0:2015

push
browse
websocket /echo cat
ext    .html
log    /var/log/access.log
proxy  /api 127.0.0.1:7005
header /api Access-Control-Allow-Origin *
# 
# ./caddy
Activating privacy features... done.
http://0.0.0.0:2015
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果如图，运行了一个简单的文件服务器
&lt;img src=&#34;https://i.imgur.com/pZ8mOWy.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;开启https，需要加一行配置tls /root/ca.pem /root/ca-key.pem，如图：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cat Caddyfile
0.0.0.0:2015 {
    gzip
    tls /etc/ssl/caddy/ca.pem /etc/ssl/caddy/ca-key.pem
    #tls xxxx@qq.com {
    #    protocols tls1.0 tls1.2
    #}
    push
    browse
    websocket /echo cat
    ext    .html
    log    /var/log/access.log
    proxy  /api 127.0.0.1:7005
    header /api Access-Control-Allow-Origin *
}
# ./caddy
Activating privacy features... done.
https://0.0.0.0:2015
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/cW0B0lb.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;看到有很多帖子说Caddy可以自动申请证书，但我尝试了多次都没有成功。墙外的虚机也不行……&lt;/p&gt;

&lt;p&gt;反向代理，简单配置如下，给原来的web服务直接加了https，挺好。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0.0.0.0:2015 {
    gzip
    tls /root/ca.pem /root/ca-key.pem
    proxy / http://localhost:8080 {
        header_upstream Host {host}
        header_upstream X-Real-IP {remote}
        header_upstream X-Forwarded-For {remote}
        header_upstream X-Forwarded-Proto {scheme}
    }  
} 
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>我对网站开发的总结与思考</title>
      <link>https://zhanggq.github.io/post/zgq-ui-think/</link>
      <pubDate>Tue, 03 Apr 2018 16:43:48 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-ui-think/</guid>
      
        <description>&lt;p&gt;&lt;strong&gt;一、前言&lt;/strong&gt;
  2006年开始入坑至今，期间还进进出出几次，没怎么做过大项目，多是自学，自学和自学。有些时候回头想想，也算接触过不少东东，但没有形成一个完整的体系，所以在这里写点东西，写到哪算哪吧，是总结，也是思考。
  2006年做的是CSS，powerbuilder + weblogic + Oracle。后来也用powerbuilder + access写了些单机小程序玩。不知道PB算不算上古时代的前端技术(≖ ‿ ≖)✧。大概到了08年，第一次接触了BSS，惊为天人，感觉用WEB比PB那玩意高大上了好多，从此开始一发不可收拾，入坑自学研究至今（虽然WEB开发从来不是我的工作内容）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二、总结&lt;/strong&gt;
  最初学习WEB开发是从JAVA开始，《Think In Java》，然后开始Spring、Struts、Hibernate三大框架，以及Dreamweaver这种网页编辑器。但因为没有服务器，也不是本职工作，只能看看别人写的源码，自己没法上手，所以始终不得要领。
  直到15年开始做云计算，16年开始用Go，突然发现以前百思不得其解的东西，如今变得非常简单。最初是用Go开始写WEB服务端，顺便在Go里面加了一些HTML代码，然后发现自己原来已经写出了一个简单的网站。接着在Git上找了套Go的框架Beego（因为有中文）和前端框架Layui，很轻松的就搭出了一个管理平台。恰逢阿里云打折，又买了台云主机，在自己的虚机上部署了应用，就算是发布了。
    (￣▽￣)/
&lt;img src=&#34;https://i.imgur.com/6DEkrP8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;第一步踏出之后，发现后面的路就变得好走了，一方面继续学习，一方面自己思考。第二个WEB是自己写股票分析WEB。后端还是Beego+Mariadb，前端改成了Amaze UI（因为Layui不支持Echarts，或者说是我没搞起来，另一方面因为Amaze UI的实例多）。由于时间关系（毕竟只是空余时间自己学着玩的），很多功能还没搞起来，只做了自动同步数据（网易的API接口，爬出来写数据库），界面展示，股票查询这些。过程中知道了MVC(Model View Controller，是模型(model)－视图(view)－控制器(controller))，知道了网页动静分离，知道了大名鼎鼎的Ajax。因为都是自己在捣鼓，所以后端的开发工作也占用了比较多的时间，比如用Docker容器做了WEB服务和数据库的分离，Mariadb集群（实际上这P大点的东西搞个本地映射就完了，数据丢了从网易全部爬一遍也要不了多少时间），顺便把Docker镜像都传到自己的阿里云仓库了（不收费，真大气）。
&lt;img src=&#34;https://i.imgur.com/oerBiK9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;后面的路该怎么走？继续边走边琢磨吧，还有好多东西没玩过，比如说Vue最近很火；比如说Bootstrap虽然不如小鲜肉火，但也曾是业界标杆；比如说nodejs可以完美解决前后端分离；比如说MVC已经过气了，现在火的是MVP、MVVM。还可以再研究一下caddy，毕竟是go里面排第一的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三、思考&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;为什么用Go？ Java很牛逼，常年霸占开发语言榜首 &lt;a href=&#34;https://www.tiobe.com/tiobe-index/&#34;&gt;https://www.tiobe.com/tiobe-index/&lt;/a&gt; 。但就我个人而言，工作中用不着Java，只能看，不能摸，咋玩？Java体系太庞大，不适合我这样的匆匆过客。Python也很牛逼，工作中也用，但怎么说呢，性能不高，对第三方库依赖也太重，我自己用起来都觉得麻烦（Go编完了随便往一个容器里面一放就能跑，Python还得装一堆依赖）。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;什么是MVC，它为什么会存在，又为什么被淘汰了？先声明一点，这个话题很大，而且我也不是圈内人士，我只能说点我自己的观念。MVC首先是个老古董，最初并没有流行开（我也不知道它是什么时候火起来的），我觉得人们最初的想法其实很简单，就是让网页的速度更快，而为了达到这个目的，出现了网页动静分离这样一个概念。MVC恰好又符合这一思想，model、view、controller各自做好自己的事情（View负责页面，Controller负责路由，Model负责逻辑和数据库），降低互相间的耦合程度，把一部分工作前移交给浏览器去做，静态页面由浏览器去缓存，动态页面需要的时候再去加载。那为什么现在它又被淘汰了？因为它有了两种演进方向：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MVP（Model-View-Presenter），Presenter功能和Controller类似，但MVP与MVC有着一个重大的区别：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter，所有的交互都发生在Presenter内部，而在MVC中View会直接从Model中读取数据而不是通过Controller。题外话：这两个一个是上世纪80年代的东东，一个上上世纪90年代的东东，完美的区分这两者有意义么，我觉得差不多理解其思想就行了，有兴趣的可以去看看一位Google Manager的文章&lt;a href=&#34;https://addyosmani.com/blog/understanding-mvc-and-mvp-for-javascript-and-backbone-developers/&#34;&gt;https://addyosmani.com/blog/understanding-mvc-and-mvp-for-javascript-and-backbone-developers/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MVVM（Model-View-ViewModel），其实和MVC关系已经不大了，只是为了便于理解把他们放在了一起。ViewModel大致上就是MVP的Presenter和MVC的Controller了，而View和ViewModel间没有了MVP的界面接口，而是直接交互，用数据“绑定”的形式让数据更新的事件不需要开发人员手动去编写特殊用例，而是自动地双向同步，用一种统一的集中的方式实现频繁需要被实现的数据更新问题。例如用于股票这种数据需要被实时更新的场景。简单的总结一下就是，以前用过的Layui和Amaze UI属于MVC(MVP)，还没用过的Vue是MVVM(ElementUI还是iView容我再纠结一下)。Vue还是AngularJS？来张图：
&lt;img src=&#34;https://i.imgur.com/Qnl91oD.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/TYTRYSg.png&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;数据库优化，这也是一个大的命题。做一个网站，撇开内容、美工之外，其他无非就是速度，并发、稳定性。其中数据库在这三个方面都有涉及，为何？速度，不管是都还是写，都和数据库的响应速度有关；并发，大量并发的场景下用户Session的存放，总不能都放内存里吧；稳定性，大量并发的情况下如何保持数据库不锁死。我个人觉得需要想明白的事情包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;先搞清楚网站的读写比例，再决定设计方向；&lt;/li&gt;
&lt;li&gt;降低数据库的计算功能，让其把资源都放在存储上；&lt;/li&gt;
&lt;li&gt;数据库进行读写分离；&lt;/li&gt;
&lt;li&gt;数据库之间的数据同步；&lt;/li&gt;
&lt;li&gt;引入缓存系统和搜索技术；&lt;/li&gt;
&lt;li&gt;数据库拆分（垂直拆分&amp;ndash;&amp;gt;水平拆分）;&lt;/li&gt;
&lt;li&gt;分布式事务&lt;/li&gt;
&lt;li&gt;使用NoSql数据库,采用Key/Value这种简单的数据结构&lt;/li&gt;
&lt;li&gt;剩下的就是多读读书，比如看看阿里是怎么做的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;其它：CDN技术、反向代理、SOA、RAM Caching、Http压缩、Http加速等等。不会的还有很多，Mark一下，慢慢来。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>第一篇Blog，顺便吐槽一下segmentfault</title>
      <link>https://zhanggq.github.io/post/zgq-ui-segmentfault/</link>
      <pubDate>Tue, 03 Apr 2018 15:43:48 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-ui-segmentfault/</guid>
      
        <description>&lt;p&gt;第一篇Blog，顺便吐槽一下segmentfault，之前虽然觉得segmentfault之类的虽然low，但一直怕麻烦，没有自己搞个Blog。没想到，还没写几篇文章，就各种审核不通过。各种商业小白文倒是火得很。无语无奈之下，自己动手丰衣足食吧。&lt;/p&gt;

&lt;p&gt;截止到目前，只是搭了一个架子出来，顺便学学Markdown怎么写。后面有空再把评论功能加上，以及去&lt;a href=&#34;https://themes.gohugo.io/找找其它顺眼的主题。Hugo确实强大，可以去学习一下源码。&#34;&gt;https://themes.gohugo.io/找找其它顺眼的主题。Hugo确实强大，可以去学习一下源码。&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>
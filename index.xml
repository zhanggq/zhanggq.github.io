<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Zhanggq</title>
    <link>https://zhanggq.github.io/</link>
    <description>Recent content on Zhanggq</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-cn</language>
    <lastBuildDate>Fri, 25 May 2018 10:03:09 +0800</lastBuildDate>
    
        <atom:link href="https://zhanggq.github.io/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>kubernetes对接Ceph</title>
      <link>https://zhanggq.github.io/post/zgq-paas-k8s-ceph/</link>
      <pubDate>Fri, 25 May 2018 10:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-paas-k8s-ceph/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;总结一下kubernetes对接Ceph过程中遇到的问题，持续更新中 ……&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-环境准备&#34;&gt;一、环境准备&lt;/h2&gt;

&lt;p&gt;实验环境有点特殊，先部署了一套超融合环境，openstack(M版)+ceph(L版)，且全部容器化。之后在openstack平台上起了3台Centos7.1虚机，并在这3台虚机上部署了kubernete 1.9.3版本。
&lt;img src=&#34;https://i.imgur.com/3yThBfx.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/kduoW6T.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;二-手工创建image&#34;&gt;二、手工创建Image&lt;/h2&gt;

&lt;p&gt;找了一些资料，讲的都不是很全，所以这里先讲一下我的理解。这一步操作的目的是在ceph上创建一个块存储，然后通过内核将这个块存储映射给k8s所在的虚机，最后k8s将Pod建在这个块存储上。&lt;/p&gt;

&lt;p&gt;所以第一步得把块存储创建出来，在ceph上执行：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rbd create foo2 --size 1024
rbd feature disable foo exclusive-lock, object-map, fast-diff, deep-flatten
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后在物理机上加载内核（Pod将起在的那台物理机上，注意是物理机，不是Node，不是kvm，也不是docker）&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo modprobe rbd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;进入Pod将起的Node（或者说kvm虚机），然后把ceph任意一个osd的/etc/ceph目录拷过来，并安装ceph（yum install ceph或其它方式），最后执行map映射&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;rbd map foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;检查一下结果&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ndGhzdF.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;之后执行一下格式化&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mkfs.ext4 -m0 /dev/rbd0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;三-创建pod&#34;&gt;三、创建Pod&lt;/h2&gt;

&lt;p&gt;上一步结束之后，等于已经在ceph上挂了一块盘给了k8s的某个Node节点，这一步就是要在该节点上创建Pod并mount这个盘。&lt;/p&gt;

&lt;p&gt;先给这个Node打个tag&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl label nodes k8s2 zone=k8s2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从github上下载官方测试用例&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/kubernetes/examples.git
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;修改 xxxx/cephJoint/examples/staging/volumes/rbd/rbd.yaml文件如下：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apiVersion: v1 
kind: Pod 
metadata: 
  name: busybox
  namespace: default
spec:
  nodeSelector:
    zone: k8s2
  containers:
  - name: busybox
    image: registry.cn-hangzhou.aliyuncs.com/yanfulei/busybox:latest
    volumeMounts:
      - name: rbdpd
        mountPath: /mnt/rbd
    command:
      - sleep
      - &amp;quot;3600&amp;quot;
    imagePullPolicy: IfNotPresent
  restartPolicy: Always
  volumes:
    - name: rbdpd
      rbd:
        monitors:
        - &#39;172.16.170.130:6789&#39;
        - &#39;172.16.170.131:6789&#39;
        - &#39;172.16.170.132:6789&#39;
        pool: rbd
        image: foo
        fsType: ext4
        readOnly: true
        user: admin
        keyring: /etc/ceph/ceph.client.admin.keyring
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;启动Pod&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl create -f rbd.yaml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;检查一下启动结果，大概要2分钟左右吧，取决于你前面创建的ceph块有多大，k8s会将这块盘格式化一遍，需要一些时间。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/cQVlhso.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section4&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;四-问题与思考&#34;&gt;四、问题与思考&lt;/h2&gt;

&lt;p&gt;上述的挂载方式还存在一个很大的问题，简单来试一下，新创建了一个centos的pod如图：&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/HjKyh02.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/m1j3MRx.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后再通过kubectl delete 删掉之后，我们检查一下设备，就会发现挂载到k8s2这个node上的盘已经被回收了&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/mK0107Y.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;所以说这种对接场景下，Ceph RBD存储的生命周期和Pod是一致的，Pod被删了，数据也没了。所以在生产环境中需要有持久化的对接方式。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Interllij IDEA使用教程</title>
      <link>https://zhanggq.github.io/post/zgq-web-idea/</link>
      <pubDate>Tue, 08 May 2018 10:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-web-idea/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;总结一下自己的Interllij IDEA使用过程中遇到的各种场景和问题，持续更新中 ……&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-配置maven&#34;&gt;一、配置maven&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;官方下载maven包，解压至D:\java\apache-maven-3.5.3\conf&lt;/li&gt;
&lt;li&gt;新建maven包存放路径D:\java\m2\repository&lt;/li&gt;
&lt;li&gt;修改配置D:\java\apache-maven-3.5.3\conf\settings.xml&lt;/li&gt;
&lt;li&gt;增加环境变量

&lt;ul&gt;
&lt;li&gt;M2_HOME D:\java\apache-maven-3.5.3&lt;/li&gt;
&lt;li&gt;Path D:\java\apache-maven-3.5.3\bin&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;Interllij IDEA的Maven配置&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/iLWAn0R.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;二-导入maven工程&#34;&gt;二、导入Maven工程&lt;/h2&gt;

&lt;p&gt;选择Import工程&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/wVCookl.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;选择Maven&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/6YP2CSG.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;注意确认一下Maven的配置是否正确&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/CixDLXO.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;其它的都是下一步即可&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;三-启动工程&#34;&gt;三、启动工程&lt;/h2&gt;

&lt;p&gt;增加一个Spring Boot的Run config，配置好Main class即可&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/x2Q6yjo.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>VS code使用教程</title>
      <link>https://zhanggq.github.io/post/zgq-web-vscode/</link>
      <pubDate>Wed, 25 Apr 2018 10:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-web-vscode/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;总结一下自己的VS code使用过程中遇到的各种场景和问题，持续更新中 ……&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-安装各种扩展&#34;&gt;一、安装各种扩展&lt;/h2&gt;

&lt;p&gt;VS Code支持各种插件扩展，点击&amp;rdquo;查看&amp;rdquo; -&amp;gt; &amp;ldquo;扩展&amp;rdquo;进入，在商店中查找自己想要的扩展并安装&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/KTVxyEc.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;二-debug&#34;&gt;二、Debug&lt;/h2&gt;

&lt;p&gt;进入调试界面，点击&amp;rdquo;添加配置 XXX&amp;rdquo;，之后选择&amp;rdquo;Chrome&amp;rdquo;，生成一个launch.json文件&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/geTs8vG.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/qZgMmp2.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后在launch.json增加配置&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-json&#34;&gt;&amp;quot;version&amp;quot;: &amp;quot;0.2.0&amp;quot;,
&amp;quot;configurations&amp;quot;: [
    {
        &amp;quot;name&amp;quot;: &amp;quot;启动 Chrome 并打开 localhost&amp;quot;,
        &amp;quot;type&amp;quot;: &amp;quot;chrome&amp;quot;,
        &amp;quot;request&amp;quot;: &amp;quot;launch&amp;quot;,
        &amp;quot;file&amp;quot;: &amp;quot;${workspaceFolder}/index.html&amp;quot;,
        //&amp;quot;url&amp;quot;:&amp;quot;http://localhost:8080&amp;quot;,
        //&amp;quot;runtimeExecutable&amp;quot;: &amp;quot;C:\\Users\\ZGQ\\AppData\\Local\\Google\\Chrome\\Application\\chrome.exe&amp;quot;,
        &amp;quot;sourceMaps&amp;quot;: true,
        &amp;quot;webRoot&amp;quot;: &amp;quot;${workspaceFolder}&amp;quot;,
        //&amp;quot;preLaunchTask&amp;quot;: &amp;quot;build&amp;quot;,
        //&amp;quot;userDataDir&amp;quot;: &amp;quot;${tmpdir}&amp;quot;,
        &amp;quot;port&amp;quot;: 9222
    }
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后在代码中打好断点，就可以开始调试了&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;三-工作区&#34;&gt;三、工作区&lt;/h2&gt;

&lt;p&gt;打开任意一个文件夹，然后在任意空白处，选择将文件夹添加到工作区，此时再选择另一个想加入该工作区的文件夹，确定之后就形成了一个包含两个JS工程的工作区。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/qIMz8vl.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/WcVjHYv.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;最后选择&amp;rdquo;文件&amp;rdquo; -&amp;gt; &amp;ldquo;将工作区另存为&amp;rdquo;，给工作区起一个名字并保存。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/WRmnqJm.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section4&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;四-推荐插件&#34;&gt;四、推荐插件&lt;/h2&gt;

&lt;p&gt;网上看到的，加上我个人的分类：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;代码规范

&lt;ul&gt;
&lt;li&gt;ESlint&lt;/li&gt;
&lt;li&gt;HTMLHint&lt;/li&gt;
&lt;li&gt;beautify&lt;/li&gt;
&lt;li&gt;vetur&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;编码帮助

&lt;ul&gt;
&lt;li&gt;HTML Snippets&lt;/li&gt;
&lt;li&gt;HTML CSS Support&lt;/li&gt;
&lt;li&gt;jQuery Code Snippets&lt;/li&gt;
&lt;li&gt;Bootstrap 3 Sinnpet&lt;/li&gt;
&lt;li&gt;Path Intellisense&lt;/li&gt;
&lt;li&gt;Npm Intellisense&lt;/li&gt;
&lt;li&gt;Document this&lt;/li&gt;
&lt;li&gt;Atuo Rename Tag&lt;/li&gt;
&lt;li&gt;fileheader&lt;/li&gt;
&lt;li&gt;filesize&lt;/li&gt;
&lt;li&gt;VueHelper&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;调试帮助

&lt;ul&gt;
&lt;li&gt;Debugger for Chrome&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;界面优化

&lt;ul&gt;
&lt;li&gt;vscode-icon&lt;/li&gt;
&lt;li&gt;各种主题&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
      
    </item>
    
    <item>
      <title>Window10安装tensorflow</title>
      <link>https://zhanggq.github.io/post/zgq-ai-tensorflow/</link>
      <pubDate>Tue, 24 Apr 2018 16:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-ai-tensorflow/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;总结一下自己的Window10安装tensorflow过程。包括jupyter-notebook最简单用法和一个简单tensorflow例子&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-安装python&#34;&gt;一、安装Python&lt;/h2&gt;

&lt;p&gt;先上&lt;a href=&#34;https://pypi.org/project/tensorflow/#files检查一下支持的Python版本。到目前位置是支持到了3.6，所以从[Python官网](https://www.python.org/downloads/)下载了Python&#34;&gt;https://pypi.org/project/tensorflow/#files检查一下支持的Python版本。到目前位置是支持到了3.6，所以从[Python官网](https://www.python.org/downloads/)下载了Python&lt;/a&gt; 3.6.5版本
安装Python时，手工选择一下安装目录，如C:\Python36。之后把该路径加到环境变量Path中&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/cMPcY8z.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;以管理员身份打开cmd，进入到C:\Python36，先升级python.exe -m pip install &amp;ndash;upgrade pip&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/xCMHsDA.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;二-安装jupyter-notebook&#34;&gt;二、安装jupyter-notebook&lt;/h2&gt;

&lt;p&gt;以管理员身份打开cmd，进入到C:\Python36\Scripts，执行pip install jupyter安装&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/rDrgpaF.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后继续在C:\Python36\Scripts，执行jupyter notebook启动Jupyter Notebook&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/aE24AAi.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;执行初始化配置jupyter notebook &amp;ndash;generate-config，按提示会生成一个默认配置文件在C:\Users\ZGQ.jupyter目录下&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/wJWrhWE.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;修改jupyter_notebook_config.py的工作目录c.NotebookApp.notebook_dir = &amp;rsquo;D:\jupyter&amp;rsquo;，然后再次启动Jupyter Notebook，这时的根路径已经是刚刚修改的工作路径了。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/zolca8N.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;顺便再安装一个matplotlib，执行pip install matplotlibr安装，然后在Jupyter Notebook上写一个python测试一下&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/rtAokDK.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;三-安装tensorflow&#34;&gt;三、安装tensorflow&lt;/h2&gt;

&lt;p&gt;执行pip install tensorflow安装
&lt;img src=&#34;https://i.imgur.com/6LXEGV4.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/0k9BM6s.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;执行一个TensorFlow最简单的矩阵乘法
&lt;img src=&#34;https://i.imgur.com/ZWKu1yf.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section4&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;四-anaconda&#34;&gt;四、Anaconda&lt;/h2&gt;

&lt;p&gt;安装tensorflow和jupyter-notebook可以通过&lt;a href=&#34;https://www.anaconda.com/download/&#34;&gt;Anaconda&lt;/a&gt;来界面化安装。基于Python 3.6.5的是Anaconda3-5.1.0-Windows-x86_64.exe，下载后下一步下一步就可以装上了，建议一开始选择单用户，安装目录为C:\Anaconda3，之后通过Anaconda安装的执行程序都位于其Scripts目录下。最后一步选择自动配置环境变量，这里不再详细描述。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>一步一步创建Google虚机</title>
      <link>https://zhanggq.github.io/post/zgq-web-google-vm/</link>
      <pubDate>Mon, 09 Apr 2018 10:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-web-google-vm/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;财大气粗的Google，申请一个账号就可以免费使用一年它的虚机，正好最近缺一个Centos的虚机，Vultr的虚机是Ubuntu的，所以尝试创建了一台Centos 7.1虚机。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-申请google账号&#34;&gt;1.申请Google账号&lt;/h2&gt;

&lt;p&gt;参考&lt;a id=&#34;ref01&#34;&gt;&lt;a href=&#34;https://www.zhihu.com/question/36368291&#34;&gt;注册谷歌账户时最后一步验证账户输入手机号说此电话号码无法用于进行验证，如何解决？&lt;/a&gt;&lt;/a&gt;
操作其实很简单，就是申请一个Gmail账号，填写一下个人信息，绑定国内的手机号，验证一下手机就行。但前提是你要先翻出去，否则上不了Gmail。&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-创建google虚机&#34;&gt;2. 创建Google虚机&lt;/h2&gt;

&lt;p&gt;同理，你得先翻出去，否则登不上Google。打开Chrome浏览器，输入www.google.com，右上角登入刚刚注册的Google账号。
&lt;img src=&#34;https://i.imgur.com/hR7G9Nq.png&#34; alt=&#34;&#34; /&gt;
登入之后在地址栏输入&lt;a href=&#34;https://console.cloud.google.com/&#34;&gt;https://console.cloud.google.com/&lt;/a&gt; 进入Google云控制台。选择申请试用，配置过程如图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/AhJyDZO.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/T0fYedw.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;申请过程中需要绑定自己的信用卡。信用卡不支持银联。绑定成功后会先扣款1美金，扣款成功验证信用卡有效后才能绑定成功。成功之后会将1美金的扣款撤销，所以不用担心。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/JwJvIzv.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;之后开始选择虚机操作系统类型，系统配置等等。需要注意的是，Google赠送是300美金，而虚机根据你创建的规格不同，价格也不同。像我这台虚机，光配置就是52美金一个月，且Google往国内的流量是需要另外付费的，所以这种规格的虚机连半年都不够。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/ehdNZ8k.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/ndcLkGa.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/eopmexb.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/lLa48aq.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/tDQ3DVX.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/CB4S2Ix.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-虚机配置-centos7&#34;&gt;3. 虚机配置（Centos7）&lt;/h2&gt;

&lt;p&gt;勾选自己刚刚创建的虚机，然后选择在浏览器打开控制台。此时的弹出窗会被浏览器给禁掉，手工允许一下。&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/Fwm39vk.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;使用sudo passwd改密码，如图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/CuEgPuL.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;然后su切到root账号，vi /etc/ssh/sshd_config 修改sshd配置的PermitRootLogin和PasswordAuthentication两个配置项，如图&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/6r238yJ.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/FN9hLNg.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;修改完成后通过命令service sshd restart重启sshd服务。之后就可以通过各种工具ssh远程你的虚机了。后面的事情请参考&lt;/p&gt;

&lt;p&gt;&lt;a id=&#34;ref03&#34;&gt;&lt;a href=&#34;https://teddysun.com/489.html&#34;&gt;一键安装最新内核并开启 BBR 脚本&lt;/a&gt;&lt;/a&gt;
&lt;a id=&#34;ref03&#34;&gt;&lt;a href=&#34;https://teddysun.com/486.html&#34;&gt;Shadowsocks 一键安装脚本（四合一）&lt;/a&gt;&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Kubeadm、Kubespray在Centos7上自动部署kubernetes 1.9.3</title>
      <link>https://zhanggq.github.io/post/zgq-paas-k8s-kubespray-1.9.3/</link>
      <pubDate>Wed, 04 Apr 2018 16:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-paas-k8s-kubespray-1.9.3/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;2015年第一次接触k8s，当时的搭建过程没那么复杂，yum装装，手工配配，没有证书，没有Dashboard，也没有墙…… 。过了3年没碰k8s，如今再来看，发现变化太大了，有了各式的自动部署工具，有了容器，也有了墙…… 。按照新的方式重新搭建了一遍，参考的帖子放在前面，因为别人写的比我好多了，所以这里只总结经验。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-手工搭建&#34;&gt;1.手工搭建&lt;/h2&gt;

&lt;p&gt;参考&lt;a id=&#34;ref01&#34;&gt;&lt;a href=&#34;https://www.kubernetes.org.cn/3096.html&#34;&gt;Kubernetes 1.8.x 全手动安装教程&lt;/a&gt;&lt;/a&gt;
这篇帖子写的很细，一步一步做证书，修改各个配置文件，纯手工部署。但这不是主流的部署方式，适合新手通过手工搭建去深入理解k8s各个组件。&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-kubeadm&#34;&gt;2. Kubeadm&lt;/h2&gt;

&lt;p&gt;参考&lt;a id=&#34;ref02&#34;&gt;&lt;a href=&#34;https://www.kubernetes.org.cn/3536.html&#34;&gt;Kubeadm 1.9 HA 高可用 集群 本地离线镜像部署&lt;/a&gt;&lt;/a&gt;
Kubeadm和kubespray的优劣我没仔细研究过。可能是因为玩kolla时用过ansible，所以对kubespray感觉比较亲切，而对Kubeadm就没那么多兴趣了，所以观念可能会有点片面。Kubeadm的优势是，它是官方提供的。所以最新的kubernetes版本发布后，Kubeadm就立马可以支持，而kubespray相对会落后一些，比如现在kubernetes已经发布到v1.10.0，而kubespray只支持到v1.9.5。而Kubeadm的劣势是安装部署还是比kubespray麻烦一点，有一些手工操作，比如安装rpm，生成证书之类的。另外还有一点就是Kubeadm不是真正的微服务架构，比如etcd就不是容器化的。&lt;/p&gt;

&lt;p&gt;言归正传，该帖子的详细程度一般般，虽然是18年写的，但内容有点老。搭建的麻烦之处就是去搞kubeadm等rpm包和pause-amd64等镜像。我通过google虚机去搞到了相关的东东，但总的来说还是非常麻烦。尝试了一次，没搞定，就没再仔细研究。&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-kubespray&#34;&gt;3. Kubespray&lt;/h2&gt;

&lt;p&gt;参考资料&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a id=&#34;ref03&#34;&gt;&lt;a href=&#34;https://www.jianshu.com/p/68925cb902e7&#34;&gt;ubuntu 国内环境部署 kubernetes 1.9.x 集群&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;ref04&#34;&gt;&lt;a href=&#34;https://www.cnblogs.com/iiiiher/p/8128184.html&#34;&gt;kubespray(ansible)自动化安装k8s集群&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;Kubespray的部署帖子写的比较全一些，镜像都被作者放到了阿里云仓库上，下载镜像也很方便。主要的镜像在roles/download/defaults/main.yml里面，插件在roles/kubernetes-apps/ansible/defaults/main.yml里面，对照着tag去&lt;a href=&#34;https://dev.aliyun.com/search.html&#34;&gt;阿里云仓库&lt;/a&gt;查找下载 。和帖子不太一样的地方是我装的docker-ce版本有点高，docker-ce-17.12.1.ce-1.el7.centos，而作者提供的kubespray里面要校验docker-engine-selinux（在docker-ce-17.12.1版本中已经没了）。所以改了kubespray/roles/docker/vars/redhat.yml配置文件，去掉了docker_selinux校验。其它的参考帖子，改改Ip什么的。总的来说搭建过程很顺利，从新建虚机装系统到部署完成，大概3个小时左右吧。&lt;/p&gt;

&lt;p&gt;最后上个图，mark一下
&lt;img src=&#34;https://i.imgur.com/t0R93ah.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Ovs流表分析</title>
      <link>https://zhanggq.github.io/post/zgq-sdn-ovs-flow/</link>
      <pubDate>Wed, 04 Apr 2018 13:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-sdn-ovs-flow/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;前言&#34;&gt;前言&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;学习Ovs过程中的笔记，主要目的是看懂Ovs的流表处理过程。网上有很多关于OVS流表的文章，但大多数将的是br-int和br-tun，本文结合实际分析一下br-ex的流，即外部访问的包是怎么一步步经过流表间的跳转最后发送给虚机的，以及虚机的回包处理过程。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;一-neutron底层网络模型&#34;&gt;一、Neutron底层网络模型&lt;/h2&gt;

&lt;p&gt;Neutron中底层网络的实现千差万别：有的agent本地是真正处理数据流的网络设备（OVS，Router，LoadBalancer等），而有的agent本地是SDN控制器（如ODL、ONOS、OpenContrail、NSX等）。上述Neutron底层网络的两种模型示意如下
&lt;img src=&#34;https://i.imgur.com/3JEtVZf.png&#34; alt=&#34;&#34; /&gt;
第一种模型中Neutron相当于SDN控制器，plugin与agent间的通信机制（如rpc）就相当于简单的南向协议。第二种模型中Neutron作为SDN应用，将业务需求告知SDN控制器，SDN控制器再通过五花八门的南向协议远程控制网络设备。当然，第二种模型中也可以把Neutron看做超级控制器或者网络编排器，去完成OpenStack中网络业务的集中分发。&lt;/p&gt;

&lt;p&gt;以下我们讲的是第一种模型中OVS处理数据流的工作机制。后一种模型中，SDN控制器也可以通过OpenFlow或者OVSDB来控制OVS处理数据流，对此暂时不进行讨论。&lt;/p&gt;

&lt;p&gt;VXLAN组网下，虚机到公网的网络模型如下图所示：
&lt;img src=&#34;https://i.imgur.com/XE57PBE.png&#34; alt=&#34;&#34; /&gt;
在本文的实际组网中，采用的是微服务架构，Controller节点和Compute节点合一，直接使用了Host网络，所以如上图中的红框所示，br-int和br-tun实际均只有一个。虚机与外网的通信只涉及br-int和br-ex，不涉及br-tun。PS：br-int负责在节点本地的网段内通信，br-tun则负责节点间的网段内通信（vxlan），br-ex负责与外网通信(flat)。&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;二-ovs基本命令分类&#34;&gt;二、OVS基本命令分类&lt;/h2&gt;

&lt;p&gt;Open vSwitch中有多个命令，分别有不同的作用，大致如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ovs-vsctl用于控制ovs db&lt;/li&gt;
&lt;li&gt;ovs-ofctl用于管理OpenFlow switch 的 flow&lt;/li&gt;
&lt;li&gt;ovs-dpctl用于管理ovs的datapath&lt;/li&gt;
&lt;li&gt;ovs-appctl用于查询和管理ovs daemon&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;需要了解详细命令，可以通过执行ovs-vsctl &amp;ndash;help查看命令帮助&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;三-初始状态ovs流表分析&#34;&gt;三、初始状态OVS流表分析&lt;/h2&gt;

&lt;p&gt;假设从外网过来一个报文，先从br-ex开始看起&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root]# ovs-ofctl show br-ex（ovs-ofctl dump-ports-desc br-ex）
OFPT_FEATURES_REPLY (xid=0x2): dpid:00000cc47ab12f79
n_tables:254, n_buffers:256
capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP
actions: OUTPUT SET_VLAN_VID SET_VLAN_PCP STRIP_VLAN SET_DL_SRC SET_DL_DST SET_NW_SRC SET_NW_DST SET_NW_TOS SET_TP_SRC SET_TP_DST ENQUEUE
1(enp4s0f1): addr:0c:c4:7a:b1:2f:79
config: 0
state: 0
current: 1GB-FD COPPER AUTO_NEG
advertised: 10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-FD COPPER AUTO_NEG AUTO_PAUSE
supported: 10MB-HD 10MB-FD 100MB-HD 100MB-FD 1GB-FD COPPER AUTO_NEG AUTO_PAUSE
speed: 1000 Mbps now, 1000 Mbps max
2(phy-br-ex): addr:e6:54:8a:f2:2e:b5
config: 0
state: 0
speed: 0 Mbps now, 0 Mbps max
LOCAL(br-ex): addr:0c:c4:7a:b1:2f:79
config: 0
state: 0
speed: 0 Mbps now, 0 Mbps max
OFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0
[root]# ovs-ofctl dump-flows br-ex
NXST_FLOW reply (xid=0x4):
cookie=0xbeb308002c7a72ac, duration=513183.493s, table=0, n_packets=772182, n_bytes=124865242, idle_age=0, hard_age=65534, priority=1 actions=resubmit(,3)
cookie=0xbeb308002c7a72ac, duration=513184.183s, table=0, n_packets=1, n_bytes=60, idle_age=65534, hard_age=65534, priority=0 actions=NORMAL
cookie=0xbeb308002c7a72ac, duration=174989.748s, table=0, n_packets=95, n_bytes=4378, idle_age=87, hard_age=65534, priority=4,in_port=2,dl_vlan=2 actions=strip_vlan,NORMAL
cookie=0xbeb308002c7a72ac, duration=513183.509s, table=0, n_packets=39, n_bytes=3322, idle_age=65534, hard_age=65534, priority=2,in_port=2 actions=resubmit(,1)
cookie=0xbeb308002c7a72ac, duration=513183.478s, table=1, n_packets=39, n_bytes=3322, idle_age=65534, hard_age=65534, priority=0 actions=resubmit(,2)
cookie=0xbeb308002c7a72ac, duration=513183.462s, table=2, n_packets=39, n_bytes=3322, idle_age=65534, hard_age=65534, priority=2,in_port=2 actions=drop
cookie=0xbeb308002c7a72ac, duration=513183.447s, table=3, n_packets=772182, n_bytes=124865242, idle_age=0, hard_age=65534, priority=1 actions=NORMAL
cookie=0xbeb308002c7a72ac, duration=513182.518s, table=3, n_packets=0, n_bytes=0, idle_age=65534, hard_age=65534, priority=2,dl_src=fa:16:3f:58:ba:cf actions=output:2
cookie=0xbeb308002c7a72ac, duration=513182.455s, table=3, n_packets=0, n_bytes=0, idle_age=65534, hard_age=65534, priority=2,dl_src=fa:16:3f:29:19:ab actions=output:2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;根据上面的流表规则报文从table=0入口&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cookie=0xbeb308002c7a72ac, duration=513183.493s, table=0, n_packets=772182, n_bytes=124865242, idle_age=0, hard_age=65534, priority=1 actions=resubmit(,3)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;然后源MAC不可能是fa:16:3f:58:ba:cf或fa:16:3f:29:19:ab（从虚机出来的包才是），所以匹配到&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cookie=0xbeb308002c7a72ac, duration=513183.447s, table=3, n_packets=772182, n_bytes=124865242, idle_age=0, hard_age=65534, priority=1 actions=NORMAL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后正常转发&lt;/p&gt;

&lt;p&gt;接着看 ovs-vsctl show，发现phy-br-ex有个peer=int-br-ex，说明流继续往br-int走（后面继续说）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root]# ovs-vsctl show
c499917e-fe06-4d6d-a5d3-ca0bbaaefdff
Bridge br-tun
fail_mode: secure
Port &amp;quot;vxlan-ac10aa82&amp;quot;
Interface &amp;quot;vxlan-ac10aa82&amp;quot;
type: vxlan
options: {df_default=&amp;quot;true&amp;quot;, in_key=flow, local_ip=&amp;quot;172.16.170.131&amp;quot;, out_key=flow, remote_ip=&amp;quot;172.16.170.130&amp;quot;}
Port patch-int
Interface patch-int
type: patch
options: {peer=patch-tun}
Port br-tun
Interface br-tun
type: internal
Port &amp;quot;vxlan-ac10aa84&amp;quot;
Interface &amp;quot;vxlan-ac10aa84&amp;quot;
type: vxlan
options: {df_default=&amp;quot;true&amp;quot;, in_key=flow, local_ip=&amp;quot;172.16.170.131&amp;quot;, out_key=flow, remote_ip=&amp;quot;172.16.170.132&amp;quot;}
Bridge br-int
fail_mode: secure
Port &amp;quot;tap293c4a9f-81&amp;quot;
tag: 2
Interface &amp;quot;tap293c4a9f-81&amp;quot;
type: internal
Port &amp;quot;tap8e0ffc9b-fb&amp;quot;
tag: 1
Interface &amp;quot;tap8e0ffc9b-fb&amp;quot;
type: internal
Port patch-tun
Interface patch-tun
type: patch
options: {peer=patch-int}
Port br-int
Interface br-int
type: internal
Port &amp;quot;qr-62bd4b1d-38&amp;quot;
tag: 1
Interface &amp;quot;qr-62bd4b1d-38&amp;quot;
type: internal
Port &amp;quot;sg-133ac380-bc&amp;quot;
tag: 1
Interface &amp;quot;sg-133ac380-bc&amp;quot;
type: internal
Port &amp;quot;qg-9a365846-0d&amp;quot;
tag: 2
Interface &amp;quot;qg-9a365846-0d&amp;quot;
type: internal
Port int-br-ex
Interface int-br-ex
type: patch
options: {peer=phy-br-ex}
Bridge br-ex
Port br-ex
Interface br-ex
type: internal
Port &amp;quot;enp4s0f1&amp;quot;
Interface &amp;quot;enp4s0f1&amp;quot;
Port phy-br-ex
Interface phy-br-ex
type: patch
options: {peer=int-br-ex}
ovs_version: &amp;quot;2.3.2&amp;quot;
[root]# ovs-ofctl show br-int （ovs-ofctl dump-ports-desc br-int）
OFPT_FEATURES_REPLY (xid=0x2): dpid:00005a91ad84984d
n_tables:254, n_buffers:256
capabilities: FLOW_STATS TABLE_STATS PORT_STATS QUEUE_STATS ARP_MATCH_IP
actions: OUTPUT SET_VLAN_VID SET_VLAN_PCP STRIP_VLAN SET_DL_SRC SET_DL_DST SET_NW_SRC SET_NW_DST SET_NW_TOS SET_TP_SRC SET_TP_DST ENQUEUE
1(int-br-ex): addr:fe:b7:c6:2f:41:07
config: 0
state: 0
speed: 0 Mbps now, 0 Mbps max
2(patch-tun): addr:0a:a0:b1:1d:b3:4e
config: 0
state: 0
speed: 0 Mbps now, 0 Mbps max
3(tap8e0ffc9b-fb): addr:00:00:00:00:00:00
config: PORT_DOWN
state: LINK_DOWN
speed: 0 Mbps now, 0 Mbps max
4(tap293c4a9f-81): addr:00:00:00:00:00:00
config: PORT_DOWN
state: LINK_DOWN
speed: 0 Mbps now, 0 Mbps max
5(qg-9a365846-0d): addr:00:00:00:00:00:00
config: PORT_DOWN
state: LINK_DOWN
speed: 0 Mbps now, 0 Mbps max
6(qr-62bd4b1d-38): addr:00:00:00:00:00:00
config: PORT_DOWN
state: LINK_DOWN
speed: 0 Mbps now, 0 Mbps max
7(sg-133ac380-bc): addr:00:00:00:00:00:00
config: PORT_DOWN
state: LINK_DOWN
speed: 0 Mbps now, 0 Mbps max
LOCAL(br-int): addr:5a:91:ad:84:98:4d
config: 0
state: 0
speed: 0 Mbps now, 0 Mbps max
OFPT_GET_CONFIG_REPLY (xid=0x4): frags=normal miss_send_len=0
[root]# ovs-ofctl dump-flows br-int
NXST_FLOW reply (xid=0x4):
cookie=0xaf14bb29ca551fa7, duration=513383.693s, table=0, n_packets=0, n_bytes=0, idle_age=65534, hard_age=65534, priority=4,in_port=1,dl_src=fa:16:3f:29:19:ab actions=resubmit(,2)
cookie=0xaf14bb29ca551fa7, duration=513383.726s, table=0, n_packets=4, n_bytes=440, idle_age=65534, hard_age=65534, priority=2,in_port=2,dl_src=fa:16:3f:58:ba:cf actions=resubmit(,1)
cookie=0xaf14bb29ca551fa7, duration=513383.663s, table=0, n_packets=1, n_bytes=130, idle_age=65534, hard_age=65534, priority=2,in_port=2,dl_src=fa:16:3f:29:19:ab actions=resubmit(,1)
cookie=0xaf14bb29ca551fa7, duration=513383.767s, table=0, n_packets=0, n_bytes=0, idle_age=65534, hard_age=65534, priority=4,in_port=1,dl_src=fa:16:3f:58:ba:cf actions=resubmit(,2)
cookie=0xaf14bb29ca551fa7, duration=513384.808s, table=0, n_packets=134, n_bytes=7700, idle_age=289, hard_age=65534, priority=1 actions=NORMAL
cookie=0xaf14bb29ca551fa7, duration=513385.542s, table=0, n_packets=0, n_bytes=0, idle_age=65534, hard_age=65534, priority=0 actions=NORMAL
cookie=0xaf14bb29ca551fa7, duration=513384.793s, table=0, n_packets=329269, n_bytes=56743305, idle_age=65534, hard_age=65534, priority=2,in_port=1 actions=drop
cookie=0xaf14bb29ca551fa7, duration=175190.953s, table=0, n_packets=170292, n_bytes=29327670, idle_age=2, hard_age=65534, priority=3,in_port=1,vlan_tci=0x0000 actions=mod_vlan_vid:2,NORMAL
cookie=0xaf14bb29ca551fa7, duration=513384.840s, table=1, n_packets=5, n_bytes=570, idle_age=65534, hard_age=65534, priority=1 actions=drop
cookie=0xaf14bb29ca551fa7, duration=175158.855s, table=1, n_packets=0, n_bytes=0, idle_age=65534, hard_age=65534, priority=4,dl_vlan=1,dl_dst=fa:16:3e:4c:16:fa actions=strip_vlan,mod_dl_src:fa:16:3e:4e:0e:58,output:3
cookie=0xaf14bb29ca551fa7, duration=175155.033s, table=1, n_packets=0, n_bytes=0, idle_age=65534, hard_age=65534, priority=4,dl_vlan=1,dl_dst=fa:16:3e:81:7e:ea actions=strip_vlan,mod_dl_src:fa:16:3e:4e:0e:58,output:7
cookie=0xaf14bb29ca551fa7, duration=513384.824s, table=2, n_packets=0, n_bytes=0, idle_age=65534, hard_age=65534, priority=1 actions=drop
cookie=0xaf14bb29ca551fa7, duration=513384.856s, table=23, n_packets=0, n_bytes=0, idle_age=65534, hard_age=65534, priority=0 actions=drop
cookie=0xaf14bb29ca551fa7, duration=513385.512s, table=24, n_packets=0, n_bytes=0, idle_age=65534, hard_age=65534, priority=0 actions=drop
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;依然是继续正常转发&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cookie=0xaf14bb29ca551fa7, duration=182323.183s, table=0, n_packets=174858, n_bytes=30441746, idle_age=2, hard_age=65534, priority=3,in_port=1,vlan_tci=0x0000 actions=mod_vlan_vid:2,NORMAL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;section4&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;四-创建虚机后ovs流表分析&#34;&gt;四、创建虚机后OVS流表分析&lt;/h2&gt;

&lt;p&gt;接着在Compute上创建了一台虚机（flat网络），然后br-ex流表无变化，br-int流表有更新，br-int的port也有更新&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root]# ovs-ofctl dump-ports-desc br-int
…………
8(qvod745905f-4b): addr:fe:c3:39:da:cf:98
config: 0
state: 0
current: 10GB-FD COPPER
speed: 10000 Mbps now, 0 Mbps max
[root]# ovs-ofctl dump-flows br-int（多出来的）
cookie=0xaf14bb29ca551fa7, duration=9.133s, table=0, n_packets=2, n_bytes=140, idle_age=1, priority=9,in_port=8 actions=resubmit(,25)
cookie=0xaf14bb29ca551fa7, duration=9.069s, table=0, n_packets=0, n_bytes=0, idle_age=9, priority=10,arp,in_port=8 actions=resubmit(,24)
cookie=0xaf14bb29ca551fa7, duration=9.100s, table=0, n_packets=0, n_bytes=0, idle_age=9, priority=10,icmp6,in_port=8,icmp_type=136 actions=resubmit(,24)
cookie=0xaf14bb29ca551fa7, duration=304.180s, table=24, n_packets=3, n_bytes=126, idle_age=279, priority=2,arp,in_port=8,arp_spa=172.16.54.196 actions=resubmit(,25)
cookie=0xaf14bb29ca551fa7, duration=304.211s, table=24, n_packets=0, n_bytes=0, idle_age=304, priority=2,icmp6,in_port=8,icmp_type=136,nd_target=fe80::f816:3eff:fe2d:e7c actions=NORMAL
cookie=0xaf14bb29ca551fa7, duration=304.259s, table=25, n_packets=241, n_bytes=23025, idle_age=278, priority=2,in_port=8,dl_src=fa:16:3e:2d:0e:7c actions=NORMAL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;测试从外网ping包，物理网卡抓包如下：&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;17:43:07.941669 54:39:df:2b:56:ba (oui Unknown) &amp;gt; fa:16:3e:2d:0e:7c (oui Unknown), ethertype IPv4 (0x0800), length 74: 172.16.16.136 &amp;gt; 172.16.54.196: ICMP echo request, id 1, seq 1533, length 40
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;目的MAC是fa:16:3e:2d:0e:7c，虚机的MAC
br-ex处理同上，转发时看br-ex的MAC（br-ex可以理解为一台switch，我们现在看的是switch记录的MAC）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root]# ovs-appctl fdb/show br-ex
port VLAN MAC Age
1 0 6c:92:bf:0c:26:08 248
1 0 fa:16:3e:2e:00:f1 117
2 0 fa:16:3e:2d:0e:7c 68
1 0 54:39:df:2b:56:ba 68
1 0 6c:92:bf:0c:27:aa 15
1 0 6c:92:bf:0c:26:0a 8
1 0 0c:c4:7a:18:f5:c7 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;所以br-ex把包往port2（phy-br-ex）上丢，之后br-int也同上（转发时从ovs-appctl fdb/show br-int看，往port8丢）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root]# ovs-appctl fdb/show br-int  #br上的MAC表
port VLAN MAC Age
1 2 6c:92:bf:0c:26:08 219
1 2 fa:16:3e:2e:00:f1 88
1 2 0c:c4:7a:18:f5:c7 45
8 2 fa:16:3e:2d:0e:7c 39
1 2 54:39:df:2b:56:ba 39
1 2 6c:92:bf:0c:27:aa 15
1 2 6c:92:bf:0c:26:0a 8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;接着包的顺序应该是从顺序是Switch(qvod745905f-4b) -&amp;gt; (qvbd745905f-4b) -&amp;gt; Bridge（qbrd745905f-4b），经过安全组的iptables，&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root]# iptables -t filter -S   #安全组里面没有规则
-P INPUT ACCEPT
-P FORWARD ACCEPT
-P OUTPUT ACCEPT
-N CATTLE_FORWARD
-N DOCKER
-N DOCKER-ISOLATION
-N neutron-filter-top
-N neutron-openvswi-FORWARD
-N neutron-openvswi-INPUT
-N neutron-openvswi-OUTPUT
-N neutron-openvswi-id745905f-4
-N neutron-openvswi-local
-N neutron-openvswi-od745905f-4
-N neutron-openvswi-scope
-N neutron-openvswi-sd745905f-4
-N neutron-openvswi-sg-chain
-N neutron-openvswi-sg-fallback
-N nova-api-FORWARD
-N nova-api-INPUT
-N nova-api-OUTPUT
-N nova-api-local
-N nova-filter-top
-A INPUT -j neutron-openvswi-INPUT
-A INPUT -j nova-api-INPUT
-A INPUT -p tcp -m tcp --dport 37032 -j ACCEPT
-A INPUT -p tcp -m tcp --dport 37031 -j ACCEPT
-A INPUT -p tcp -m multiport --dports 10050,10051 -m comment --comment &amp;quot;$commment&amp;quot; -j ACCEPT
-A FORWARD -j neutron-filter-top
-A FORWARD -j neutron-openvswi-FORWARD
-A FORWARD -j nova-filter-top
-A FORWARD -j nova-api-FORWARD
-A FORWARD -j CATTLE_FORWARD
-A FORWARD -j DOCKER-ISOLATION
-A FORWARD -o docker0 -j DOCKER
-A FORWARD -o docker0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -i docker0 ! -o docker0 -j ACCEPT
-A FORWARD -i docker0 -o docker0 -j ACCEPT
-A FORWARD -o server0 -j DOCKER
-A FORWARD -o server0 -m conntrack --ctstate RELATED,ESTABLISHED -j ACCEPT
-A FORWARD -i server0 ! -o server0 -j ACCEPT
-A FORWARD -i server0 -o server0 -j ACCEPT
-A OUTPUT -j neutron-filter-top
-A OUTPUT -j neutron-openvswi-OUTPUT
-A OUTPUT -j nova-filter-top
-A OUTPUT -j nova-api-OUTPUT
-A CATTLE_FORWARD -m mark --mark 0x1068 -j ACCEPT
-A CATTLE_FORWARD -m mark --mark 0x4000 -j ACCEPT
-A DOCKER -d 172.17.0.3/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 9418 -j ACCEPT
-A DOCKER -d 172.17.0.4/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 9418 -j ACCEPT
-A DOCKER -d 172.17.0.2/32 ! -i docker0 -o docker0 -p tcp -m tcp --dport 5000 -j ACCEPT
-A DOCKER -d 10.45.1.2/32 ! -i server0 -o server0 -p tcp -m tcp --dport 8080 -j ACCEPT
-A DOCKER -d 10.45.1.2/32 ! -i server0 -o server0 -p tcp -m tcp --dport 3306 -j ACCEPT
-A DOCKER-ISOLATION -i server0 -o docker0 -j DROP
-A DOCKER-ISOLATION -i docker0 -o server0 -j DROP
-A DOCKER-ISOLATION -j RETURN
-A neutron-filter-top -j neutron-openvswi-local
-A neutron-openvswi-FORWARD -j neutron-openvswi-scope
-A neutron-openvswi-FORWARD -m physdev --physdev-out tapd745905f-4b --physdev-is-bridged -m comment --comment &amp;quot;Direct traffic from the VM interface to the security group chain.&amp;quot; -j neutron-openvswi-sg-chain
-A neutron-openvswi-FORWARD -m physdev --physdev-in tapd745905f-4b --physdev-is-bridged -m comment --comment &amp;quot;Direct traffic from the VM interface to the security group chain.&amp;quot; -j neutron-openvswi-sg-chain
-A neutron-openvswi-INPUT -m physdev --physdev-in tapd745905f-4b --physdev-is-bridged -m comment --comment &amp;quot;Direct incoming traffic from VM to the security group chain.&amp;quot; -j neutron-openvswi-od745905f-4
-A neutron-openvswi-id745905f-4 -m state --state RELATED,ESTABLISHED -m comment --comment &amp;quot;Direct packets associated with a known session to the RETURN chain.&amp;quot; -j RETURN
-A neutron-openvswi-id745905f-4 -s 172.16.54.194/32 -p udp -m udp --sport 67 -m udp --dport 68 -j RETURN
-A neutron-openvswi-id745905f-4 -s 172.16.54.193/32 -p udp -m udp --sport 67 -m udp --dport 68 -j RETURN
-A neutron-openvswi-id745905f-4 -m state --state INVALID -m comment --comment &amp;quot;Drop packets that appear related to an existing connection (e.g. TCP ACK/FIN) but do not have an entry in conntrack.&amp;quot; -j DROP
-A neutron-openvswi-id745905f-4 -m comment --comment &amp;quot;Send unmatched traffic to the fallback chain.&amp;quot; -j neutron-openvswi-sg-fallback
-A neutron-openvswi-od745905f-4 -s 0.0.0.0/32 -d 255.255.255.255/32 -p udp -m udp --sport 68 --dport 67 -m comment --comment &amp;quot;Allow DHCP client traffic.&amp;quot; -j RETURN
-A neutron-openvswi-od745905f-4 -j neutron-openvswi-sd745905f-4
-A neutron-openvswi-od745905f-4 -p udp -m udp --sport 68 --dport 67 -m comment --comment &amp;quot;Allow DHCP client traffic.&amp;quot; -j RETURN
-A neutron-openvswi-od745905f-4 -p udp -m udp --sport 67 -m udp --dport 68 -m comment --comment &amp;quot;Prevent DHCP Spoofing by VM.&amp;quot; -j DROP
-A neutron-openvswi-od745905f-4 -m state --state RELATED,ESTABLISHED -m comment --comment &amp;quot;Direct packets associated with a known session to the RETURN chain.&amp;quot; -j RETURN
-A neutron-openvswi-od745905f-4 -m state --state INVALID -m comment --comment &amp;quot;Drop packets that appear related to an existing connection (e.g. TCP ACK/FIN) but do not have an entry in conntrack.&amp;quot; -j DROP
-A neutron-openvswi-od745905f-4 -m comment --comment &amp;quot;Send unmatched traffic to the fallback chain.&amp;quot; -j neutron-openvswi-sg-fallback
-A neutron-openvswi-sd745905f-4 -s 172.16.54.196/32 -m mac --mac-source FA:16:3E:2D:0E:7C -m comment --comment &amp;quot;Allow traffic from defined IP/MAC pairs.&amp;quot; -j RETURN
-A neutron-openvswi-sd745905f-4 -m comment --comment &amp;quot;Drop traffic without an IP/MAC allow rule.&amp;quot; -j DROP
-A neutron-openvswi-sg-chain -m physdev --physdev-out tapd745905f-4b --physdev-is-bridged -m comment --comment &amp;quot;Jump to the VM specific chain.&amp;quot; -j neutron-openvswi-id745905f-4
-A neutron-openvswi-sg-chain -m physdev --physdev-in tapd745905f-4b --physdev-is-bridged -m comment --comment &amp;quot;Jump to the VM specific chain.&amp;quot; -j neutron-openvswi-od745905f-4
-A neutron-openvswi-sg-chain -j ACCEPT
-A neutron-openvswi-sg-fallback -m comment --comment &amp;quot;Default drop rule for unmatched traffic.&amp;quot; -j DROP
-A nova-api-INPUT -d 172.16.170.131/32 -p tcp -m tcp --dport 8775 -j ACCEPT
-A nova-filter-top -j nova-api-local
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;找不到允许规则，被丢弃
修改安全组规则，把默认安全组改成了ICMP全部允许，br-ex流表不变，br-int流表也不变
安全组多了2条规则&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;-A neutron-openvswi-id745905f-4 -p icmp -j RETURN
-A neutron-openvswi-od745905f-4 -p icmp -j RETURN
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;之后包就可以从Bridge（qbrd745905f-4b）发给虚机的网卡（tapd745905f-4b）&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section5&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;五-虚机发包ovs流表分析&#34;&gt;五、虚机发包OVS流表分析&lt;/h2&gt;

&lt;p&gt;分析从虚机发出的icmp包。先看ovs-ofctl dump-ports-desc br-int，上面多出来的port（qvod745905f-4b），可以理解为openvswitch这台交换机上面8号口新插了根网线，网线的标签是qvod745905f-4b，那么这个网线其他接口也有745905f类似的标签。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root]# ifconfig | grep 745
qbrd745905f-4b: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500
qvbd745905f-4b: flags=4419&amp;lt;UP,BROADCAST,RUNNING,PROMISC,MULTICAST&amp;gt; mtu 1500
qvod745905f-4b: flags=4419&amp;lt;UP,BROADCAST,RUNNING,PROMISC,MULTICAST&amp;gt; mtu 1500
tapd745905f-4b: flags=4163&amp;lt;UP,BROADCAST,RUNNING,MULTICAST&amp;gt; mtu 1500
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;顺序是虚机（tapd745905f-4b）-&amp;gt; Bridge（qbrd745905f-4b）-&amp;gt; (qvbd745905f-4b)-&amp;gt; Switch(qvod745905f-4b)
之后Switch的处理（br-int）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cookie=0xaf14bb29ca551fa7, duration=2971.648s, table=0, n_packets=1047, n_bytes=102125, idle_age=46, priority=9,in_port=8 actions=resubmit(,25)
cookie=0xaf14bb29ca551fa7, duration=2971.679s, table=25, n_packets=1050, n_bytes=102195, idle_age=46, priority=2,in_port=8,dl_src=fa:16:3e:2d:0e:7c actions=NORMAL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;抓包看源mac是fa:16:3e:2d:0e:7c，没错。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;[root]# tcpdump -i enp4s0f1 icmp -e 
15:54:54.639046 fa:16:3e:2d:0e:7c (oui Unknown) &amp;gt; 54:39:df:2b:56:ba (oui Unknown), ethertype IPv4 (0x0800), length 98: 172.16.54.196 &amp;gt; 172.16.33.1: ICMP echo request, id 2381, seq 287, length 64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;虚机发3个包之后，n_packets=1050 变成了n_packets=1053 确认是从这个规则出去的&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cookie=0xaf14bb29ca551fa7, duration=2980.176s, table=0, n_packets=1050, n_bytes=102419, idle_age=3, priority=9,in_port=8 actions=resubmit(,25)
cookie=0xaf14bb29ca551fa7, duration=2980.207s, table=25, n_packets=1053, n_bytes=102489, idle_age=3, priority=2,in_port=8,dl_src=fa:16:3e:2d:0e:7c actions=NORMAL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再观察br-ex ，直接从table=0，剥掉vlan tag后转发出去了（测试了4个包）&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-shell&#34;&gt;cookie=0xbeb308002c7a72ac, duration=178829.516s, table=0, n_packets=968, n_bytes=90561, idle_age=171, hard_age=65534, priority=4,in_port=2,dl_vlan=2 actions=strip_vlan,NORMAL
cookie=0xbeb308002c7a72ac, duration=178843.780s, table=0, n_packets=972, n_bytes=90953, idle_age=6, hard_age=65534, priority=4,in_port=2,dl_vlan=2 actions=strip_vlan,NORMAL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;section12&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a id=&#34;ref01&#34;&gt;&lt;a href=&#34;https://www.sdnlab.com/16414.html&#34;&gt;OVS流表分析&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;ref02&#34;&gt;&lt;a href=&#34;http://www.aboutyun.com/thread-13027-1-1.html&#34;&gt;深入理解 Neutron&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>Markdown Cases Preview</title>
      <link>https://zhanggq.github.io/post/even-preview/</link>
      <pubDate>Wed, 04 Apr 2018 10:03:09 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/even-preview/</guid>
      
        <description>

&lt;p&gt;&lt;a name=&#34;section0&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;摘要&#34;&gt;摘要&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;综合展示一下Markdown各种语法的实例，算是自己以后写Blog的模板吧。
目前这个只能算是初级模板，还有其它很多高级的用法不在展示的范围内。
PS.我用的是Markdownpad2，别人推荐用slackedit。&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;这篇文章集中说明主题所支持的 Markdown 语法和 Hugo Shortcodes 插件，你也可以在这里预览到他们的样子。如果你不喜欢某些样式，可以去修改 css/ 文件夹下的 .scss 文件。&lt;/p&gt;

&lt;h2 id=&#34;table-of-contents&#34;&gt;Table of Contents&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;#section0&#34;&gt;&lt;font color=blue&gt;摘要&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section1&#34;&gt;&lt;font color=red&gt;标题&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section2&#34;&gt;&lt;font color=green&gt;段落&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section3&#34;&gt;&lt;font color=yellow&gt;列表&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section4&#34;&gt;&lt;font color=pink&gt;引用&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section5&#34;&gt;&lt;font color=orange&gt;代码&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section6&#34;&gt;&lt;font color=purple&gt;分割线&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section7&#34;&gt;&lt;font color=brown&gt;图片&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section8&#34;&gt;&lt;font color=grey&gt;表格&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section9&#34;&gt;&lt;font color=powderblue&gt;公式&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section10&#34;&gt;&lt;font color=khaki&gt;音乐&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section11&#34;&gt;&lt;font color=rubine&gt;视频&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;#section12&#34;&gt;&lt;font color=peru&gt;参考资料&lt;/font&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;section1&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;1-标题&#34;&gt;1.标题&lt;/h2&gt;

&lt;h1 id=&#34;h1&#34;&gt;H1&lt;/h1&gt;

&lt;h2 id=&#34;h2&#34;&gt;H2&lt;/h2&gt;

&lt;h3 id=&#34;h3&#34;&gt;H3&lt;/h3&gt;

&lt;h4 id=&#34;h4&#34;&gt;H4&lt;/h4&gt;

&lt;h5 id=&#34;h5&#34;&gt;H5&lt;/h5&gt;

&lt;h6 id=&#34;h6&#34;&gt;H6&lt;/h6&gt;

&lt;p&gt;&lt;a name=&#34;section2&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;2-段落&#34;&gt;2. 段落&lt;/h2&gt;

&lt;p&gt;使用单引号 &lt;code&gt;*&lt;/code&gt; 或者单下划线 &lt;code&gt;_&lt;/code&gt; 标记 &lt;em&gt;斜体强调&lt;/em&gt; 或者 &lt;em&gt;斜体强调&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;使用两个引号 &lt;code&gt;**&lt;/code&gt; 或者两个下划线 &lt;code&gt;__&lt;/code&gt; 标记 &lt;strong&gt;加粗强调&lt;/strong&gt; 或者 &lt;strong&gt;加粗强调&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;引号和下划线可叠加使用 → &lt;strong&gt;只是加粗 &lt;em&gt;斜体并加粗&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;使用两个波浪线 &lt;code&gt;~~&lt;/code&gt; 标记 &lt;del&gt;已删除文字&lt;/del&gt;&lt;/p&gt;

&lt;p&gt;插入文字暂无 &lt;code&gt;Markdown&lt;/code&gt; 标记，直接使用 &lt;code&gt;HTML&lt;/code&gt; 标签 &lt;code&gt;&amp;lt;ins&amp;gt;&lt;/code&gt; 标记 &lt;ins&gt;插入文字&lt;/ins&gt;&lt;/p&gt;

&lt;p&gt;行内代码使用反引号标记 → &lt;code&gt;print(&amp;quot;hello world&amp;quot;)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;上标 X&lt;sup&gt;2&lt;/sup&gt; / 下标 X&lt;sub&gt;2&lt;/sub&gt;&lt;/p&gt;

&lt;p&gt;按键 &lt;kbd&gt;Ctrl&lt;/kbd&gt;&lt;/p&gt;

&lt;p&gt;外链 &lt;a href=&#34;https://chekun.me&#34;&gt;chekun&amp;rsquo;s blog&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;页面内段落 &lt;a href=&#34;#section-07&#34;&gt;图片&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;注意：你可以通过 &lt;code&gt;{#section-id}&lt;/code&gt; 方式自定义段落锚点&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;参考资料 &lt;sup&gt;&lt;a href=&#34;#ref01&#34;&gt;[1]&lt;/a&gt;&lt;/sup&gt;&lt;sup&gt;&lt;a href=&#34;#ref02&#34;&gt;[2]&lt;/a&gt;&lt;/sup&gt;&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section3&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;3-列表&#34;&gt;3. 列表&lt;/h2&gt;

&lt;p&gt;以下的无序、有序和任务列表均支持二级嵌套，不建议使用二级以上嵌套。&lt;/p&gt;

&lt;h3 id=&#34;3-1-无序列表&#34;&gt;3.1 无序列表&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;无序列表

&lt;ul&gt;
&lt;li&gt;嵌套的无序列表&lt;/li&gt;
&lt;li&gt;嵌套的无序列表&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;无序列表

&lt;ol&gt;
&lt;li&gt;嵌套的有序列表&lt;/li&gt;
&lt;li&gt;嵌套的有序列表&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;无序列表&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;3-2-有序列表&#34;&gt;3.2 有序列表&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;有序列表

&lt;ol&gt;
&lt;li&gt;嵌套的有序列表&lt;/li&gt;
&lt;li&gt;嵌套的有序列表&lt;/li&gt;
&lt;/ol&gt;&lt;/li&gt;
&lt;li&gt;有序列表

&lt;ul&gt;
&lt;li&gt;嵌套的无序列表&lt;/li&gt;
&lt;li&gt;嵌套的无序列表&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;有序列表&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;3-3-定义列表&#34;&gt;3.3 定义列表&lt;/h3&gt;

&lt;dl&gt;
&lt;dt&gt;CSS&lt;/dt&gt;
&lt;dd&gt;层叠样式表&lt;/dd&gt;
&lt;/dl&gt;

&lt;h3 id=&#34;3-4-任务列表&#34;&gt;3.4 任务列表&lt;/h3&gt;

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; Cmd Markdown 开发

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; 支持以 PDF 格式导出文稿&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 新增Todo列表功能 &lt;a href=&#34;https://github.com/blog/1375-task-lists-in-gfm-issues-pulls-comments&#34;&gt;语法参考&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 改进 LaTex 功能&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 修复 LaTex 公式渲染问题&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 新增 LaTex 公式编号功能 &lt;a href=&#34;http://docs.mathjax.org/en/latest/tex.html#tex-eq-numbers&#34;&gt;语法参考&lt;/a&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; 七月旅行准备

&lt;ul class=&#34;task-list&#34;&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; 准备邮轮上需要携带的物品&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; disabled class=&#34;task-list-item&#34;&gt; 浏览日本免税店的物品&lt;/label&gt;&lt;/li&gt;
&lt;li&gt;&lt;label&gt;&lt;input type=&#34;checkbox&#34; checked disabled class=&#34;task-list-item&#34;&gt; 购买蓝宝石公主号七月一日的船票&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/label&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;a name=&#34;section4&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;4-引用&#34;&gt;4. 引用&lt;/h2&gt;

&lt;blockquote&gt;
&lt;p&gt;野火烧不尽，春风吹又生。&lt;/p&gt;

&lt;p&gt;&lt;cite&gt;&amp;ndash; 白居易《赋得古原草送别》&lt;/cite&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;a name=&#34;section5&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;5-代码&#34;&gt;5. 代码&lt;/h2&gt;

&lt;p&gt;以本站的一段 &lt;code&gt;JavaScript&lt;/code&gt; 代码做演示。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;// Initialize video.js player
if (document.getElementById(&#39;my-player&#39;) !== null) {
  /* eslint-disable no-undef */
  videojs(&#39;#my-player&#39;, {
    aspectRatio: &#39;16:9&#39;,
    fluid: true,
  });
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a name=&#34;section6&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;6-分割线&#34;&gt;6. 分割线&lt;/h2&gt;

&lt;hr /&gt;

&lt;p&gt;中间能写字的分割线，如果你修改了分割线中字的内容，请配合修改 &lt;code&gt;CSS&lt;/code&gt; 样式。&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section7&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;section-07&#34;&gt;7. 图片&lt;/h2&gt;

&lt;p&gt;不带标题的图片，如下图👇&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://raw.githubusercontent.com/olOwOlo/hugo-theme-even/master/images/showcase.png&#34; alt=&#34;hugo even showcase&#34; title=&#34;showcase.png&#34; /&gt;&lt;/p&gt;

&lt;p&gt;带标题的图片，如下图👇&lt;/p&gt;


&lt;figure class=&#34;center&#34;&gt;
    
        &lt;img src=&#34;https://raw.githubusercontent.com/olOwOlo/hugo-theme-even/master/images/showcase.png&#34; alt=&#34;hugo even showcase&#34; /&gt;
    
    
    &lt;figcaption&gt;
        &lt;h4&gt;showcase.png&lt;/h4&gt;
        
    &lt;/figcaption&gt;
    
&lt;/figure&gt;


&lt;p&gt;&lt;a name=&#34;section8&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;8-表格&#34;&gt;8. 表格&lt;/h2&gt;

&lt;p&gt;使用 &lt;code&gt;Markdown&lt;/code&gt; 画的表格，如下表👇&lt;/p&gt;

&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th align=&#34;left&#34;&gt;Tables&lt;/th&gt;
&lt;th align=&#34;center&#34;&gt;Are&lt;/th&gt;
&lt;th align=&#34;right&#34;&gt;Cool&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;

&lt;tbody&gt;
&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;col 3 is&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;right-aligned&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$1600&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;col 2 is&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;centered&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$12&lt;/td&gt;
&lt;/tr&gt;

&lt;tr&gt;
&lt;td align=&#34;left&#34;&gt;zebra stripes&lt;/td&gt;
&lt;td align=&#34;center&#34;&gt;are neat&lt;/td&gt;
&lt;td align=&#34;right&#34;&gt;$1&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;

&lt;p&gt;&lt;a name=&#34;section9&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;9-数学公式&#34;&gt;9. 数学公式&lt;/h2&gt;

&lt;p&gt;主题使用了 &lt;a href=&#34;https://www.mathjax.org/&#34;&gt;MathJax&lt;/a&gt; 开源库来实现对数学公式的支持，使用 &lt;code&gt;$$&lt;/code&gt; 标记。&lt;/p&gt;

&lt;p&gt;$$ evidence_{i}=\sum_{j}W_{ij}x_{j}+b_{i} $$&lt;/p&gt;

&lt;p&gt;&lt;a name=&#34;section10&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;10-网易云音乐&#34;&gt;10. 网易云音乐&lt;/h2&gt;

&lt;p&gt;主题文章中可以轻松插入 &lt;a href=&#34;https://music.163.com/&#34;&gt;网易云音乐&lt;/a&gt; 的指定音乐，你可以根据需要将音乐设置为自动播放，在主题目录 &lt;code&gt;layouts/shortcodes&lt;/code&gt; 文件夹下的 &lt;code&gt;music.html&lt;/code&gt; 对该标签进行定义。&lt;/p&gt;

  &lt;iframe style=&#34;max-width: 100%&#34;
      class=&#34;music163&#34;
      frameborder=&#34;no&#34;
      border=&#34;0&#34;
      marginwidth=&#34;0&#34;
      marginheight=&#34;0&#34;
      width=&#34;330&#34;
      height=&#34;86&#34;
      src=&#34;//music.163.com/outchain/player?type=2&amp;id=28196554&amp;auto=0&amp;height=66&#34;&gt;
    &lt;/iframe&gt;

&lt;p&gt;&lt;a name=&#34;section11&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;11-youtube&#34;&gt;11. YouTube&lt;/h2&gt;

&lt;p&gt;由于不明原因可能无法播放。&lt;/p&gt;


&lt;div style=&#34;position: relative; padding-bottom: 56.25%; padding-top: 30px; height: 0; overflow: hidden;&#34;&gt;
  &lt;iframe src=&#34;//www.youtube.com/embed/wC5pJm8RAu4&#34; style=&#34;position: absolute; top: 0; left: 0; width: 100%; height: 100%;&#34; allowfullscreen frameborder=&#34;0&#34; title=&#34;YouTube Video&#34;&gt;&lt;/iframe&gt;
 &lt;/div&gt;


&lt;p&gt;&lt;a name=&#34;section12&#34;&gt;&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;参考资料&#34;&gt;参考资料&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a id=&#34;ref01&#34;&gt;&lt;a href=&#34;https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet&#34;&gt;Markdown Cheatsheet&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a id=&#34;ref02&#34;&gt;&lt;a href=&#34;https://www.zybuluo.com/EncyKe/note/120103&#34;&gt;Markdown 语法手册&lt;/a&gt;&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>About</title>
      <link>https://zhanggq.github.io/about/</link>
      <pubDate>Tue, 03 Apr 2018 19:38:52 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/about/</guid>
      
        <description>&lt;p&gt;Emmm &amp;hellip;.&lt;/p&gt;

&lt;p&gt;说啥咧，不知道说啥。&lt;/p&gt;

&lt;p&gt;IT男，喜欢捣鼓折腾，喜欢四处旅游，更喜欢偷懒，语言表达能力不高&lt;/p&gt;

&lt;p&gt;研究方向：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;WEB全栈&lt;/li&gt;
&lt;li&gt;OPENSTACK SDN&lt;/li&gt;
&lt;li&gt;微服务 PaaS平台&lt;/li&gt;
&lt;li&gt;人工智能&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;邮箱：zhang_gq@foxmail.com
穷游：&lt;a href=&#34;http://www.qyer.com/u/2230544&#34;&gt;http://www.qyer.com/u/2230544&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>浅谈Openstack、OpenContrail、OpenFlow、NFV</title>
      <link>https://zhanggq.github.io/post/zgq-sdn-openstack-opencontrail-openflow-nfv/</link>
      <pubDate>Tue, 03 Apr 2018 19:08:48 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-sdn-openstack-opencontrail-openflow-nfv/</guid>
      
        <description>&lt;p&gt;浅谈Openstack、OpenContrail、OpenFlow、NFV。属于我个人学习过程中的笔记杂谈。&lt;/p&gt;

&lt;p&gt;首先先从2个大的概念说起吧：SDN和NFV。它们都是网络虚拟化技术，即用软件来实现传统硬件的网络功能。其中名气最大的就是SDN（软件定义网络）和NFV（网络功能虚拟化）。起初、两者的初衷和架构并不相同，SDN起源于园区网，发展于数据中心，目的是将控制平面和转发平面分离，通过集中化的控制平面能够灵活定义网络行为；而NFV则由运营商联盟提出，为了加速部署新的网络服务，运营商倾向于放弃笨重昂贵的专用网络设备，转而使用标准的IT虚拟化技术来拆分网络功能模块，如DNS、NAT、Firewall等。于是一些运营商联合成立了欧洲通信标准协会ETSI（European Telecommunications Standards Institute），他的一个工作组（ETSI ISG NFV）负责开发制定电信网络的虚拟化架构，如NFV MANO。但随着互联网的发展，两者逐渐融合。有人认为，两者的侧重点不一样，NFV更偏向于网络功能虚拟化，而SDN是对网络本身的控制，两者可以结合使用，作为一种电信级的解决方案（2014年江苏电信的解决方案 &lt;a href=&#34;https://www.sdnlab.com/15751.html&#34;&gt;https://www.sdnlab.com/15751.html&lt;/a&gt; ）。&lt;/p&gt;

&lt;p&gt;接着说SDN的解决方案吧，知道几种OpenContrail，OpenFlow，OpenDayLight，OpenvSwitch。 说说我对他们的理解吧：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OpenFlow：准确的它是一种协议，并不完全是一种解决方案，其主要目的是觉着现在的协议太多太复杂了，所以推翻了以前的所有协议，重新定义了一种。但正好SDN是控制面和转发面分离，OpenFlow也是，所以它也被称作了一种SDN解决方案。但OpenFlow太学院派了，随着时间的发展，已经逐渐被淘汰（高潮是OpenFlow v1.3，v1.5之后好像就没版本了）。&lt;/li&gt;
&lt;li&gt;OpenContrail：与OpenFlow不同的是，OpenContrail是商业派的解决方案，由Juniper在2012年底收购Contrail之后将其SDN平台开源出来，这就是OpenContrail（现已经改名为Tungsten Fabric）。正如前面SDN定义的那样，OpenContrail也分成了控制面和转发面两部分。控制面主要由配置模块、控制模块、分析模块组成，转发面主要是vRouter&lt;/li&gt;
&lt;li&gt;OpenvSwitch：属于开源的SDN解决方案，被Openstack社区用来和Neutron项目配合使用。目前算是比较主流的SDN解决方案之一。小规模的云都喜欢用它，一般的协议都支持，也能支持DPDK。稳定性方面依赖Linux内核版本。以前在Centos 7的3.10.0内核下，是不是会出现Crash。后来升级到4.6.0之后，没有再出现过Crash的现象。&lt;/li&gt;
&lt;li&gt;OpenDayLight：它是由CISCO主导的一个基于Linux的SDN控制器，并不是一个完整的解决方案，一般会配合OpenvSwitch来做解决方案。它比Neutron要更专业一些，但要比OpenContrail轻一些，介于两者之间吧。前期被OpenContrail打压得不行，现在逐渐成熟起来。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;前面说到过SDN+NFV的解决方案，另一种解决方案是Openstack/VMware + OpenContrail。这里讲讲Openstack + OpenContrail。一般大多数OpenStack部署使用OpenvSwitch和OpenStack Neutron进行对接，但是想要实现大规模生产部署需要更多的商业化的产品，这时候就可以选择OpenContrail与Openstack进行对接。OpenContrail提供neutron_plugin_contrail作为插件和Neuron对接，之后openstack就可以通过neutron下发配置给contrail的config模块。刚刚说过，一般情况下Openstack Neutron也就够了，vxlan、FW、LB什么的都支持，那么为啥要用OpenContrail？ 我个人认为，前者是社区的方案，OpenContrail是Juniper的，所以后者给客户的信心会大一点；另一方面OpenContrail确实要强一些，比如支持的协议多一点点（MPLS over GRE/UDP），比如OpenContrail的服务链功能。当然，最重要的还是稳定性和性能，可惜我没做过这方面的对比测试，网上也没找到资料，只知道2017年中国电信省级云资源池试商用SDN工程用的就是这个方案。&lt;/p&gt;

&lt;p&gt;这篇Blog就先写到这，等继续学习了OpenContrail之后再更新吧。&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>关于Go----Golang的优秀组件整理</title>
      <link>https://zhanggq.github.io/post/zgq-web-golang-good-program/</link>
      <pubDate>Tue, 03 Apr 2018 18:53:48 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-web-golang-good-program/</guid>
      
        <description>&lt;p&gt;这里仅介绍我见过的，觉得不错的Golang优秀组件。算是个人笔记吧，只有介绍，没有使用说明。&lt;/p&gt;

&lt;p&gt;1.框架
Go的框架有很多很多，但至今还没有一款能和Spring媲美的神级框架出现。所以大神都是自己直接写，不用框架。这里介绍我用过的2个框架gin和beego，前者路由速度快，后者功能全。但还是我前面讲的那句话，两个都不能算是神级框架，所以仁者见仁，智者见智吧。
github.com/gin-gonic/gin
github.com/astaxie/beego&lt;/p&gt;

&lt;p&gt;2.WEB服务
caddy类似于Apache，Nginx，是一个高性能的HTTP/2和反向代理服务器，天然支持https。挺强。
github.com/mholt/caddy&lt;/p&gt;

&lt;p&gt;3.数据库操作
gorm或者beego的orm，但和前面的框架类似，用也可以，不用也可以。
github.com/jinzhu/gorm&lt;/p&gt;

&lt;p&gt;4.包管理工具
类似于Maven。目前我只用过govendor，其它的还有godep、glide。但有个不好的地方就是被墙的还是被墙，得翻墙出去找。
github.com/kardianos/govendor&lt;/p&gt;

&lt;p&gt;5.热重启
通过监听syscall信号量实现优雅重启。
github.com/fvbock/endless&lt;/p&gt;

&lt;p&gt;6.log记录
github.com/Sirupsen/logrus&lt;/p&gt;

&lt;p&gt;7.定时任务
github.com/robfig/cron&lt;/p&gt;

&lt;p&gt;8.帮助文档生成工具
自己的应用编好之后，自动给你生成帮助文档，执行xxxx -h或者xxxx help显示帮助文档
github.com/urfave/cli(以前叫github.com/codegangsta/cli)&lt;/p&gt;

&lt;p&gt;9.配置文件读取
github.com/spf13/viper&lt;/p&gt;

&lt;p&gt;10.内存管理
支持Redis内存存储
github.com/coocood/freecache&lt;/p&gt;

&lt;p&gt;11.redis依赖
github.com/garyburd/redigo&lt;/p&gt;

&lt;p&gt;12.静态网站生成器
我的Blog就是靠它生成的，挺好用
github.com/gohugoio/hugo&lt;/p&gt;
</description>
      
    </item>
    
    <item>
      <title>Caddy初探</title>
      <link>https://zhanggq.github.io/post/zgq-web-caddy-test/</link>
      <pubDate>Tue, 03 Apr 2018 18:43:48 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-web-caddy-test/</guid>
      
        <description>&lt;p&gt;Caddy
类似于Apache，Nginx，是一个高性能的HTTP和反向代理服务器&lt;/p&gt;

&lt;p&gt;代码
&lt;a href=&#34;https://github.com/mholt/caddy&#34;&gt;https://github.com/mholt/caddy&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;使用，先升级Go至1.9以上(&lt;a href=&#34;https://my.oschina.net/u/2601623/blog/1785798)，然后&#34;&gt;https://my.oschina.net/u/2601623/blog/1785798)，然后&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/mholt/caddy/caddy
go get github.com/caddyserver/builds
cd $GOPATH/src/github.com/mholt/caddy/caddy
go run build.go
./caddy
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;初步尝试，在caddy同目录下创建Caddyfile文件，并写入配置，然后运行caddy&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cat Caddyfile
0.0.0.0:2015

push
browse
websocket /echo cat
ext    .html
log    /var/log/access.log
proxy  /api 127.0.0.1:7005
header /api Access-Control-Allow-Origin *
# 
# ./caddy
Activating privacy features... done.
http://0.0.0.0:2015
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;效果如图，运行了一个简单的文件服务器
&lt;img src=&#34;https://i.imgur.com/pZ8mOWy.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;开启https，需要加一行配置tls /root/ca.pem /root/ca-key.pem，如图：&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cat Caddyfile
0.0.0.0:2015 {
    gzip
    tls /etc/ssl/caddy/ca.pem /etc/ssl/caddy/ca-key.pem
    #tls xxxx@qq.com {
    #    protocols tls1.0 tls1.2
    #}
    push
    browse
    websocket /echo cat
    ext    .html
    log    /var/log/access.log
    proxy  /api 127.0.0.1:7005
    header /api Access-Control-Allow-Origin *
}
# ./caddy
Activating privacy features... done.
https://0.0.0.0:2015
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://i.imgur.com/cW0B0lb.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;看到有很多帖子说Caddy可以自动申请证书，但我尝试了多次都没有成功。墙外的虚机也不行……&lt;/p&gt;

&lt;p&gt;反向代理，简单配置如下，给原来的web服务直接加了https，挺好。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;0.0.0.0:2015 {
    gzip
    tls /root/ca.pem /root/ca-key.pem
    proxy / http://localhost:8080 {
        header_upstream Host {host}
        header_upstream X-Real-IP {remote}
        header_upstream X-Forwarded-For {remote}
        header_upstream X-Forwarded-Proto {scheme}
    }  
} 
&lt;/code&gt;&lt;/pre&gt;
</description>
      
    </item>
    
    <item>
      <title>我对网站开发的总结与思考</title>
      <link>https://zhanggq.github.io/post/zgq-ui-think/</link>
      <pubDate>Tue, 03 Apr 2018 16:43:48 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-ui-think/</guid>
      
        <description>&lt;p&gt;&lt;strong&gt;一、前言&lt;/strong&gt;
  2006年开始入坑至今，期间还进进出出几次，没怎么做过大项目，多是自学，自学和自学。有些时候回头想想，也算接触过不少东东，但没有形成一个完整的体系，所以在这里写点东西，写到哪算哪吧，是总结，也是思考。
  2006年做的是CSS，powerbuilder + weblogic + Oracle。后来也用powerbuilder + access写了些单机小程序玩。不知道PB算不算上古时代的前端技术(≖ ‿ ≖)✧。大概到了08年，第一次接触了BSS，惊为天人，感觉用WEB比PB那玩意高大上了好多，从此开始一发不可收拾，入坑自学研究至今（虽然WEB开发从来不是我的工作内容）。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;二、总结&lt;/strong&gt;
  最初学习WEB开发是从JAVA开始，《Think In Java》，然后开始Spring、Struts、Hibernate三大框架，以及Dreamweaver这种网页编辑器。但因为没有服务器，也不是本职工作，只能看看别人写的源码，自己没法上手，所以始终不得要领。
  直到15年开始做云计算，16年开始用Go，突然发现以前百思不得其解的东西，如今变得非常简单。最初是用Go开始写WEB服务端，顺便在Go里面加了一些HTML代码，然后发现自己原来已经写出了一个简单的网站。接着在Git上找了套Go的框架Beego（因为有中文）和前端框架Layui，很轻松的就搭出了一个管理平台。恰逢阿里云打折，又买了台云主机，在自己的虚机上部署了应用，就算是发布了。
    (￣▽￣)/
&lt;img src=&#34;https://i.imgur.com/6DEkrP8.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;第一步踏出之后，发现后面的路就变得好走了，一方面继续学习，一方面自己思考。第二个WEB是自己写股票分析WEB。后端还是Beego+Mariadb，前端改成了Amaze UI（因为Layui不支持Echarts，或者说是我没搞起来，另一方面因为Amaze UI的实例多）。由于时间关系（毕竟只是空余时间自己学着玩的），很多功能还没搞起来，只做了自动同步数据（网易的API接口，爬出来写数据库），界面展示，股票查询这些。过程中知道了MVC(Model View Controller，是模型(model)－视图(view)－控制器(controller))，知道了网页动静分离，知道了大名鼎鼎的Ajax。因为都是自己在捣鼓，所以后端的开发工作也占用了比较多的时间，比如用Docker容器做了WEB服务和数据库的分离，Mariadb集群（实际上这P大点的东西搞个本地映射就完了，数据丢了从网易全部爬一遍也要不了多少时间），顺便把Docker镜像都传到自己的阿里云仓库了（不收费，真大气）。
&lt;img src=&#34;https://i.imgur.com/oerBiK9.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;

&lt;p&gt;后面的路该怎么走？继续边走边琢磨吧，还有好多东西没玩过，比如说Vue最近很火；比如说Bootstrap虽然不如小鲜肉火，但也曾是业界标杆；比如说nodejs可以完美解决前后端分离；比如说MVC已经过气了，现在火的是MVP、MVVM。还可以再研究一下caddy，毕竟是go里面排第一的。&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;三、思考&lt;/strong&gt;&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;为什么用Go？ Java很牛逼，常年霸占开发语言榜首 &lt;a href=&#34;https://www.tiobe.com/tiobe-index/&#34;&gt;https://www.tiobe.com/tiobe-index/&lt;/a&gt; 。但就我个人而言，工作中用不着Java，只能看，不能摸，咋玩？Java体系太庞大，不适合我这样的匆匆过客。Python也很牛逼，工作中也用，但怎么说呢，性能不高，对第三方库依赖也太重，我自己用起来都觉得麻烦（Go编完了随便往一个容器里面一放就能跑，Python还得装一堆依赖）。&lt;/li&gt;

&lt;li&gt;&lt;p&gt;什么是MVC，它为什么会存在，又为什么被淘汰了？先声明一点，这个话题很大，而且我也不是圈内人士，我只能说点我自己的观念。MVC首先是个老古董，最初并没有流行开（我也不知道它是什么时候火起来的），我觉得人们最初的想法其实很简单，就是让网页的速度更快，而为了达到这个目的，出现了网页动静分离这样一个概念。MVC恰好又符合这一思想，model、view、controller各自做好自己的事情（View负责页面，Controller负责路由，Model负责逻辑和数据库），降低互相间的耦合程度，把一部分工作前移交给浏览器去做，静态页面由浏览器去缓存，动态页面需要的时候再去加载。那为什么现在它又被淘汰了？因为它有了两种演进方向：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;MVP（Model-View-Presenter），Presenter功能和Controller类似，但MVP与MVC有着一个重大的区别：在MVP中View并不直接使用Model，它们之间的通信是通过Presenter，所有的交互都发生在Presenter内部，而在MVC中View会直接从Model中读取数据而不是通过Controller。题外话：这两个一个是上世纪80年代的东东，一个上上世纪90年代的东东，完美的区分这两者有意义么，我觉得差不多理解其思想就行了，有兴趣的可以去看看一位Google Manager的文章&lt;a href=&#34;https://addyosmani.com/blog/understanding-mvc-and-mvp-for-javascript-and-backbone-developers/&#34;&gt;https://addyosmani.com/blog/understanding-mvc-and-mvp-for-javascript-and-backbone-developers/&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;MVVM（Model-View-ViewModel），其实和MVC关系已经不大了，只是为了便于理解把他们放在了一起。ViewModel大致上就是MVP的Presenter和MVC的Controller了，而View和ViewModel间没有了MVP的界面接口，而是直接交互，用数据“绑定”的形式让数据更新的事件不需要开发人员手动去编写特殊用例，而是自动地双向同步，用一种统一的集中的方式实现频繁需要被实现的数据更新问题。例如用于股票这种数据需要被实时更新的场景。简单的总结一下就是，以前用过的Layui和Amaze UI属于MVC(MVP)，还没用过的Vue是MVVM(ElementUI还是iView容我再纠结一下)。Vue还是AngularJS？来张图：
&lt;img src=&#34;https://i.imgur.com/Qnl91oD.png&#34; alt=&#34;&#34; /&gt;
&lt;img src=&#34;https://i.imgur.com/TYTRYSg.png&#34; alt=&#34;&#34; /&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;数据库优化，这也是一个大的命题。做一个网站，撇开内容、美工之外，其他无非就是速度，并发、稳定性。其中数据库在这三个方面都有涉及，为何？速度，不管是都还是写，都和数据库的响应速度有关；并发，大量并发的场景下用户Session的存放，总不能都放内存里吧；稳定性，大量并发的情况下如何保持数据库不锁死。我个人觉得需要想明白的事情包括：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;先搞清楚网站的读写比例，再决定设计方向；&lt;/li&gt;
&lt;li&gt;降低数据库的计算功能，让其把资源都放在存储上；&lt;/li&gt;
&lt;li&gt;数据库进行读写分离；&lt;/li&gt;
&lt;li&gt;数据库之间的数据同步；&lt;/li&gt;
&lt;li&gt;引入缓存系统和搜索技术；&lt;/li&gt;
&lt;li&gt;数据库拆分（垂直拆分&amp;ndash;&amp;gt;水平拆分）;&lt;/li&gt;
&lt;li&gt;分布式事务&lt;/li&gt;
&lt;li&gt;使用NoSql数据库,采用Key/Value这种简单的数据结构&lt;/li&gt;
&lt;li&gt;剩下的就是多读读书，比如看看阿里是怎么做的&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;其它：CDN技术、反向代理、SOA、RAM Caching、Http压缩、Http加速等等。不会的还有很多，Mark一下，慢慢来。&lt;/p&gt;&lt;/li&gt;
&lt;/ol&gt;
</description>
      
    </item>
    
    <item>
      <title>第一篇Blog，顺便吐槽一下segmentfault</title>
      <link>https://zhanggq.github.io/post/zgq-ui-segmentfault/</link>
      <pubDate>Tue, 03 Apr 2018 15:43:48 +0800</pubDate>
      
      <guid>https://zhanggq.github.io/post/zgq-ui-segmentfault/</guid>
      
        <description>&lt;p&gt;第一篇Blog，顺便吐槽一下segmentfault，之前虽然觉得segmentfault之类的虽然low，但一直怕麻烦，没有自己搞个Blog。没想到，还没写几篇文章，就各种审核不通过。各种商业小白文倒是火得很。无语无奈之下，自己动手丰衣足食吧。&lt;/p&gt;

&lt;p&gt;截止到目前，只是搭了一个架子出来，顺便学学Markdown怎么写。后面有空再把评论功能加上，以及去&lt;a href=&#34;https://themes.gohugo.io/找找其它顺眼的主题。Hugo确实强大，可以去学习一下源码。&#34;&gt;https://themes.gohugo.io/找找其它顺眼的主题。Hugo确实强大，可以去学习一下源码。&lt;/a&gt;&lt;/p&gt;
</description>
      
    </item>
    
  </channel>
</rss>